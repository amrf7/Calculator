

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Mon Nov 16 22:29:03 2020

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F1937
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	stringtext6,global,class=STRCODE,delta=2
    12                           	psect	cinit,global,class=CODE,merge=1,delta=2
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	dabs	1,0x7E,2
    52  0000                     
    53                           ; Version 1.44
    54                           ; Generated 14/09/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC16F1937 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     	;# 
    88  0001                     	;# 
    89  0002                     	;# 
    90  0003                     	;# 
    91  0004                     	;# 
    92  0005                     	;# 
    93  0006                     	;# 
    94  0007                     	;# 
    95  0008                     	;# 
    96  0009                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  000D                     	;# 
   101  000E                     	;# 
   102  000F                     	;# 
   103  0010                     	;# 
   104  0011                     	;# 
   105  0012                     	;# 
   106  0013                     	;# 
   107  0015                     	;# 
   108  0016                     	;# 
   109  0016                     	;# 
   110  0017                     	;# 
   111  0018                     	;# 
   112  0019                     	;# 
   113  001A                     	;# 
   114  001B                     	;# 
   115  001C                     	;# 
   116  001E                     	;# 
   117  001F                     	;# 
   118  008C                     	;# 
   119  008D                     	;# 
   120  008E                     	;# 
   121  008F                     	;# 
   122  0090                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0095                     	;# 
   127  0096                     	;# 
   128  0097                     	;# 
   129  0098                     	;# 
   130  0099                     	;# 
   131  009A                     	;# 
   132  009B                     	;# 
   133  009B                     	;# 
   134  009C                     	;# 
   135  009D                     	;# 
   136  009E                     	;# 
   137  010C                     	;# 
   138  010D                     	;# 
   139  010E                     	;# 
   140  010F                     	;# 
   141  0110                     	;# 
   142  0111                     	;# 
   143  0112                     	;# 
   144  0113                     	;# 
   145  0114                     	;# 
   146  0115                     	;# 
   147  0116                     	;# 
   148  0117                     	;# 
   149  0118                     	;# 
   150  0119                     	;# 
   151  011A                     	;# 
   152  011B                     	;# 
   153  011D                     	;# 
   154  018C                     	;# 
   155  018D                     	;# 
   156  018F                     	;# 
   157  0190                     	;# 
   158  0191                     	;# 
   159  0191                     	;# 
   160  0192                     	;# 
   161  0193                     	;# 
   162  0193                     	;# 
   163  0193                     	;# 
   164  0194                     	;# 
   165  0195                     	;# 
   166  0196                     	;# 
   167  0199                     	;# 
   168  019A                     	;# 
   169  019B                     	;# 
   170  019B                     	;# 
   171  019B                     	;# 
   172  019B                     	;# 
   173  019C                     	;# 
   174  019C                     	;# 
   175  019D                     	;# 
   176  019E                     	;# 
   177  019F                     	;# 
   178  020D                     	;# 
   179  0210                     	;# 
   180  0211                     	;# 
   181  0212                     	;# 
   182  0213                     	;# 
   183  0214                     	;# 
   184  0215                     	;# 
   185  0215                     	;# 
   186  0216                     	;# 
   187  0217                     	;# 
   188  0291                     	;# 
   189  0291                     	;# 
   190  0292                     	;# 
   191  0293                     	;# 
   192  0294                     	;# 
   193  0295                     	;# 
   194  0295                     	;# 
   195  0296                     	;# 
   196  0298                     	;# 
   197  0298                     	;# 
   198  0299                     	;# 
   199  029A                     	;# 
   200  029B                     	;# 
   201  029C                     	;# 
   202  029C                     	;# 
   203  029D                     	;# 
   204  029E                     	;# 
   205  029F                     	;# 
   206  0311                     	;# 
   207  0311                     	;# 
   208  0312                     	;# 
   209  0313                     	;# 
   210  0314                     	;# 
   211  0315                     	;# 
   212  0315                     	;# 
   213  0316                     	;# 
   214  0318                     	;# 
   215  0318                     	;# 
   216  0319                     	;# 
   217  031A                     	;# 
   218  031C                     	;# 
   219  031C                     	;# 
   220  031D                     	;# 
   221  031E                     	;# 
   222  0394                     	;# 
   223  0395                     	;# 
   224  0396                     	;# 
   225  0415                     	;# 
   226  0416                     	;# 
   227  0417                     	;# 
   228  041C                     	;# 
   229  041D                     	;# 
   230  041E                     	;# 
   231  0791                     	;# 
   232  0792                     	;# 
   233  0793                     	;# 
   234  0794                     	;# 
   235  0795                     	;# 
   236  0798                     	;# 
   237  0799                     	;# 
   238  079A                     	;# 
   239  07A0                     	;# 
   240  07A1                     	;# 
   241  07A2                     	;# 
   242  07A3                     	;# 
   243  07A4                     	;# 
   244  07A5                     	;# 
   245  07A6                     	;# 
   246  07A7                     	;# 
   247  07A8                     	;# 
   248  07A9                     	;# 
   249  07AA                     	;# 
   250  07AB                     	;# 
   251  0FE4                     	;# 
   252  0FE5                     	;# 
   253  0FE6                     	;# 
   254  0FE7                     	;# 
   255  0FE8                     	;# 
   256  0FE9                     	;# 
   257  0FEA                     	;# 
   258  0FEB                     	;# 
   259  0FED                     	;# 
   260  0FEE                     	;# 
   261  0FEF                     	;# 
   262                           
   263                           	psect	idataBANK1
   264  0005                     __pidataBANK1:	
   265                           
   266                           ;initializer for main@F3637
   267  0005  3464               	retlw	100
   268  0006  3400               	retlw	0
   269  0007  340A               	retlw	10
   270  0008  3400               	retlw	0
   271  0009  3401               	retlw	1
   272  000A  3400               	retlw	0
   273                           
   274                           	psect	idataBANK2
   275  1053                     __pidataBANK2:	
   276                           
   277                           ;initializer for main@F3635
   278  1053  3464               	retlw	100
   279  1054  3400               	retlw	0
   280  1055  340A               	retlw	10
   281  1056  3400               	retlw	0
   282  1057  3401               	retlw	1
   283  1058  3400               	retlw	0
   284                           
   285                           	psect	stringtext1
   286  182D                     __pstringtext1:	
   287  182D                     _dpowers:	
   288  182D  3401               	retlw	1
   289  182E  3400               	retlw	0
   290  182F  3400               	retlw	0
   291  1830  3400               	retlw	0
   292  1831  340A               	retlw	10
   293  1832  3400               	retlw	0
   294  1833  3400               	retlw	0
   295  1834  3400               	retlw	0
   296  1835  3464               	retlw	100
   297  1836  3400               	retlw	0
   298  1837  3400               	retlw	0
   299  1838  3400               	retlw	0
   300  1839  34E8               	retlw	232
   301  183A  3403               	retlw	3
   302  183B  3400               	retlw	0
   303  183C  3400               	retlw	0
   304  183D  3410               	retlw	16
   305  183E  3427               	retlw	39
   306  183F  3400               	retlw	0
   307  1840  3400               	retlw	0
   308  1841  34A0               	retlw	160
   309  1842  3486               	retlw	134
   310  1843  3401               	retlw	1
   311  1844  3400               	retlw	0
   312  1845  3440               	retlw	64
   313  1846  3442               	retlw	66
   314  1847  340F               	retlw	15
   315  1848  3400               	retlw	0
   316  1849  3480               	retlw	128
   317  184A  3496               	retlw	150
   318  184B  3498               	retlw	152
   319  184C  3400               	retlw	0
   320  184D  3400               	retlw	0
   321  184E  34E1               	retlw	225
   322  184F  34F5               	retlw	245
   323  1850  3405               	retlw	5
   324  1851  3400               	retlw	0
   325  1852  34CA               	retlw	202
   326  1853  349A               	retlw	154
   327  1854  343B               	retlw	59
   328  1855                     __end_of_dpowers:	
   329                           
   330                           	psect	stringtext2
   331  1855                     __pstringtext2:	
   332  1855                     __powers_:	
   333  1855  3400               	retlw	0
   334  1856  3480               	retlw	128
   335  1857  343F               	retlw	63
   336  1858  3400               	retlw	0
   337  1859  3420               	retlw	32
   338  185A  3441               	retlw	65
   339  185B  3400               	retlw	0
   340  185C  34C8               	retlw	200
   341  185D  3442               	retlw	66
   342  185E  3400               	retlw	0
   343  185F  347A               	retlw	122
   344  1860  3444               	retlw	68
   345  1861  3440               	retlw	64
   346  1862  341C               	retlw	28
   347  1863  3446               	retlw	70
   348  1864  3450               	retlw	80
   349  1865  34C3               	retlw	195
   350  1866  3447               	retlw	71
   351  1867  3424               	retlw	36
   352  1868  3474               	retlw	116
   353  1869  3449               	retlw	73
   354  186A  3497               	retlw	151
   355  186B  3418               	retlw	24
   356  186C  344B               	retlw	75
   357  186D  34BC               	retlw	188
   358  186E  34BE               	retlw	190
   359  186F  344C               	retlw	76
   360  1870  346B               	retlw	107
   361  1871  346E               	retlw	110
   362  1872  344E               	retlw	78
   363  1873  3403               	retlw	3
   364  1874  3415               	retlw	21
   365  1875  3450               	retlw	80
   366  1876  3479               	retlw	121
   367  1877  34AD               	retlw	173
   368  1878  3460               	retlw	96
   369  1879  34F3               	retlw	243
   370  187A  3449               	retlw	73
   371  187B  3471               	retlw	113
   372  187C                     __end_of__powers_:	
   373                           
   374                           	psect	stringtext3
   375  1800                     __pstringtext3:	
   376  1800                     __npowers_:	
   377  1800  3400               	retlw	0
   378  1801  3480               	retlw	128
   379  1802  343F               	retlw	63
   380  1803  34CD               	retlw	205
   381  1804  34CC               	retlw	204
   382  1805  343D               	retlw	61
   383  1806  34D7               	retlw	215
   384  1807  3423               	retlw	35
   385  1808  343C               	retlw	60
   386  1809  3412               	retlw	18
   387  180A  3483               	retlw	131
   388  180B  343A               	retlw	58
   389  180C  34B7               	retlw	183
   390  180D  34D1               	retlw	209
   391  180E  3438               	retlw	56
   392  180F  34C6               	retlw	198
   393  1810  3427               	retlw	39
   394  1811  3437               	retlw	55
   395  1812  3438               	retlw	56
   396  1813  3486               	retlw	134
   397  1814  3435               	retlw	53
   398  1815  34C0               	retlw	192
   399  1816  34D6               	retlw	214
   400  1817  3433               	retlw	51
   401  1818  34CC               	retlw	204
   402  1819  342B               	retlw	43
   403  181A  3432               	retlw	50
   404  181B  3470               	retlw	112
   405  181C  3489               	retlw	137
   406  181D  3430               	retlw	48
   407  181E  34E7               	retlw	231
   408  181F  34DB               	retlw	219
   409  1820  342E               	retlw	46
   410  1821  34E5               	retlw	229
   411  1822  343C               	retlw	60
   412  1823  341E               	retlw	30
   413  1824  3442               	retlw	66
   414  1825  34A2               	retlw	162
   415  1826  340D               	retlw	13
   416  1827                     __end_of__npowers_:	
   417  000E                     _PORTC	set	14
   418  000D                     _PORTB	set	13
   419  000F                     _PORTDbits	set	15
   420  006F                     _RB7	set	111
   421  006E                     _RB6	set	110
   422  006D                     _RB5	set	109
   423  006C                     _RB4	set	108
   424  006B                     _RB3	set	107
   425  006A                     _RB2	set	106
   426  0069                     _RB1	set	105
   427  0068                     _RB0	set	104
   428  008E                     _TRISC	set	142
   429  0099                     _OSCCONbits	set	153
   430  0095                     _OPTION_REG	set	149
   431  008D                     _TRISB	set	141
   432  008F                     _TRISDbits	set	143
   433  018D                     _ANSELB	set	397
   434  018F                     _ANSELD	set	399
   435  1827                     STR_11:	
   436  1827  3443               	retlw	67	;'C'
   437  1828  344C               	retlw	76	;'L'
   438  1829  3445               	retlw	69	;'E'
   439  182A  3441               	retlw	65	;'A'
   440  182B  3452               	retlw	82	;'R'
   441  182C  3400               	retlw	0
   442                           
   443                           	psect	stringtext4
   444  187C                     __pstringtext4:	
   445  187C                     STR_1:	
   446  187C  3425               	retlw	37	;'%'
   447  187D  3463               	retlw	99	;'c'
   448  187E  3400               	retlw	0
   449                           
   450                           	psect	stringtext5
   451  187F                     __pstringtext5:	
   452  187F                     STR_7:	
   453  187F  3425               	retlw	37	;'%'
   454  1880  3466               	retlw	102	;'f'
   455  1881  3400               	retlw	0
   456                           
   457                           	psect	stringtext6
   458  0000                     __pstringtext6:	
   459  187C                     
   460                           ; #config settings
   461  0000                     
   462                           	psect	cinit
   463  07D8                     start_initialization:	
   464  07D8                     __initialization:	
   465                           
   466                           ; Initialize objects allocated to BANK1
   467  07D8  3005               	movlw	low __pidataBANK1
   468  07D9  0084               	movwf	4
   469  07DA  3080               	movlw	(high __pidataBANK1)| (0+128)
   470  07DB  0085               	movwf	5
   471  07DC  30BF               	movlw	low __pdataBANK1
   472  07DD  0086               	movwf	6
   473  07DE  3000               	movlw	high __pdataBANK1
   474  07DF  0087               	movwf	7
   475  07E0  3006               	movlw	6
   476  07E1  3190  204D  3187   	fcall	init_ram
   477                           
   478                           ; Initialize objects allocated to BANK2
   479  07E4  3053               	movlw	low __pidataBANK2
   480  07E5  0084               	movwf	4
   481  07E6  3090               	movlw	(high __pidataBANK2)| (0+128)
   482  07E7  0085               	movwf	5
   483  07E8  3064               	movlw	low __pdataBANK2
   484  07E9  0086               	movwf	6
   485  07EA  3001               	movlw	high __pdataBANK2
   486  07EB  0087               	movwf	7
   487  07EC  3006               	movlw	6
   488  07ED  3190  204D         	fcall	init_ram
   489                           
   490                           ; Clear objects allocated to BANK1
   491  07EF  0021               	movlb	1	; select bank1
   492  07F0  01B7               	clrf	__pbssBANK1& (0+127)
   493  07F1  01B8               	clrf	(__pbssBANK1+1)& (0+127)
   494  07F2  01B9               	clrf	(__pbssBANK1+2)& (0+127)
   495  07F3  01BA               	clrf	(__pbssBANK1+3)& (0+127)
   496  07F4  01BB               	clrf	(__pbssBANK1+4)& (0+127)
   497  07F5  01BC               	clrf	(__pbssBANK1+5)& (0+127)
   498  07F6  01BD               	clrf	(__pbssBANK1+6)& (0+127)
   499  07F7  01BE               	clrf	(__pbssBANK1+7)& (0+127)
   500                           
   501                           ; Clear objects allocated to BANK2
   502  07F8  0022               	movlb	2	; select bank2
   503  07F9  01EA               	clrf	__pbssBANK2& (0+127)
   504  07FA  01EB               	clrf	(__pbssBANK2+1)& (0+127)
   505  07FB  01EC               	clrf	(__pbssBANK2+2)& (0+127)
   506  07FC  01ED               	clrf	(__pbssBANK2+3)& (0+127)
   507  07FD                     end_of_initialization:	
   508                           ;End of C runtime variable initialization code
   509                           
   510  07FD                     __end_of__initialization:	
   511  07FD  0020               	movlb	0
   512  07FE  3182  2AEC         	ljmp	_main	;jump to C main() function
   513                           
   514                           	psect	bssBANK1
   515  00B7                     __pbssBANK1:	
   516  00B7                     main@F3639:	
   517  00B7                     	ds	8
   518                           
   519                           	psect	dataBANK1
   520  00BF                     __pdataBANK1:	
   521  00BF                     main@F3637:	
   522  00BF                     	ds	6
   523                           
   524                           	psect	bssBANK2
   525  016A                     __pbssBANK2:	
   526  016A                     main@F3645:	
   527  016A                     	ds	4
   528                           
   529                           	psect	dataBANK2
   530  0164                     __pdataBANK2:	
   531  0164                     main@F3635:	
   532  0164                     	ds	6
   533                           
   534                           	psect	inittext
   535  104D                     init_ram:	
   536  104D  00FE               	movwf	126
   537  104E                     initloop:	
   538  104E  0012               	moviw fsr0++
   539  104F  001E               	movwi fsr1++
   540  1050  0BFE               	decfsz	126,f
   541  1051  284E               	goto	initloop
   542  1052  3400               	retlw	0
   543                           
   544                           	psect	cstackBANK2
   545  0120                     __pcstackBANK2:	
   546  0120                     main@buffer:	
   547                           
   548                           ; 20 bytes @ 0x0
   549  0120                     	ds	20
   550  0134                     main@udc:	
   551                           
   552                           ; 6 bytes @ 0x14
   553  0134                     	ds	6
   554  013A                     main@udc1:	
   555                           
   556                           ; 6 bytes @ 0x1A
   557  013A                     	ds	6
   558  0140                     main@num:	
   559                           
   560                           ; 4 bytes @ 0x20
   561  0140                     	ds	4
   562  0144                     main@op:	
   563                           
   564                           ; 1 bytes @ 0x24
   565  0144                     	ds	1
   566  0145                     main@number:	
   567                           
   568                           ; 8 bytes @ 0x25
   569  0145                     	ds	8
   570  014D                     main@i_198:	
   571                           
   572                           ; 2 bytes @ 0x2D
   573  014D                     	ds	2
   574  014F                     main@i_206:	
   575                           
   576                           ; 2 bytes @ 0x2F
   577  014F                     	ds	2
   578  0151                     main@clc:	
   579                           
   580                           ; 2 bytes @ 0x31
   581  0151                     	ds	2
   582  0153                     main@operation:	
   583                           
   584                           ; 3 bytes @ 0x33
   585  0153                     	ds	3
   586  0156                     main@num1:	
   587                           
   588                           ; 3 bytes @ 0x36
   589  0156                     	ds	3
   590  0159                     main@num2:	
   591                           
   592                           ; 3 bytes @ 0x39
   593  0159                     	ds	3
   594  015C                     main@j:	
   595                           
   596                           ; 2 bytes @ 0x3C
   597  015C                     	ds	2
   598  015E                     main@j_205:	
   599                           
   600                           ; 2 bytes @ 0x3E
   601  015E                     	ds	2
   602  0160                     main@i_203:	
   603                           
   604                           ; 2 bytes @ 0x40
   605  0160                     	ds	2
   606  0162                     main@i:	
   607                           
   608                           ; 2 bytes @ 0x42
   609  0162                     	ds	2
   610                           
   611                           	psect	cstackBANK1
   612  00A0                     __pcstackBANK1:	
   613  00A0                     _sprintf$677:	
   614                           
   615                           ; 3 bytes @ 0x0
   616  00A0                     	ds	3
   617  00A3                     sprintf@ap:	
   618                           
   619                           ; 1 bytes @ 0x3
   620  00A3                     	ds	1
   621  00A4                     sprintf@flag:	
   622                           
   623                           ; 2 bytes @ 0x4
   624  00A4                     	ds	2
   625  00A6                     sprintf@prec:	
   626                           
   627                           ; 2 bytes @ 0x6
   628  00A6                     	ds	2
   629  00A8                     sprintf@val:	
   630                           
   631                           ; 4 bytes @ 0x8
   632  00A8                     	ds	4
   633  00AC                     sprintf@exp:	
   634                           
   635                           ; 2 bytes @ 0xC
   636  00AC                     	ds	2
   637  00AE                     sprintf@tmpval:	
   638                           
   639                           ; 4 bytes @ 0xE
   640  00AE                     	ds	4
   641  00B2                     sprintf@fval:	
   642                           
   643                           ; 3 bytes @ 0x12
   644  00B2                     	ds	3
   645  00B5                     sprintf@c:	
   646                           
   647                           ; 1 bytes @ 0x15
   648  00B5                     	ds	1
   649  00B6                     sprintf@sp:	
   650                           
   651                           ; 1 bytes @ 0x16
   652  00B6                     	ds	1
   653                           
   654                           	psect	cstackCOMMON
   655  0070                     __pcstackCOMMON:	
   656  0070                     ?___ftge:	
   657  0070                     ?_Lcd_Cmd:	
   658                           ; 1 bit 
   659                           
   660  0070                     ??_Lcd_Cmd:	
   661                           ; 1 bytes @ 0x0
   662                           
   663  0070                     ?_Lcd_Chr_CP:	
   664                           ; 1 bytes @ 0x0
   665                           
   666  0070                     ??_Lcd_Chr_CP:	
   667                           ; 1 bytes @ 0x0
   668                           
   669  0070                     ?_clear:	
   670                           ; 1 bytes @ 0x0
   671                           
   672  0070                     ?_Lcd_Init:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  0070                     ?_InitKeypad:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0070                     ??_InitKeypad:	
   679                           ; 1 bytes @ 0x0
   680                           
   681  0070                     ?_keypad_scanner:	
   682                           ; 1 bytes @ 0x0
   683                           
   684  0070                     ??_keypad_scanner:	
   685                           ; 1 bytes @ 0x0
   686                           
   687  0070                     ?_switch_press_scan:	
   688                           ; 1 bytes @ 0x0
   689                           
   690  0070                     ?_main:	
   691                           ; 1 bytes @ 0x0
   692                           
   693  0070                     ?___awmod:	
   694                           ; 1 bytes @ 0x0
   695                           
   696  0070                     ?___ftpack:	
   697                           ; 2 bytes @ 0x0
   698                           
   699  0070                     ?___ftneg:	
   700                           ; 3 bytes @ 0x0
   701                           
   702  0070                     ?__tdiv_to_l_:	
   703                           ; 3 bytes @ 0x0
   704                           
   705  0070                     ?__div_to_l_:	
   706                           ; 4 bytes @ 0x0
   707                           
   708  0070                     ?___lldiv:	
   709                           ; 4 bytes @ 0x0
   710                           
   711  0070                     ?___llmod:	
   712                           ; 4 bytes @ 0x0
   713                           
   714  0070                     ___awmod@divisor:	
   715                           ; 4 bytes @ 0x0
   716                           
   717  0070                     __div_to_l_@f1:	
   718                           ; 2 bytes @ 0x0
   719                           
   720  0070                     ___ftpack@arg:	
   721                           ; 3 bytes @ 0x0
   722                           
   723  0070                     __tdiv_to_l_@f1:	
   724                           ; 3 bytes @ 0x0
   725                           
   726  0070                     ___ftge@ff1:	
   727                           ; 3 bytes @ 0x0
   728                           
   729  0070                     ___ftneg@f1:	
   730                           ; 3 bytes @ 0x0
   731                           
   732  0070                     ___lldiv@divisor:	
   733                           ; 3 bytes @ 0x0
   734                           
   735  0070                     ___llmod@divisor:	
   736                           ; 4 bytes @ 0x0
   737                           
   738                           
   739                           ; 4 bytes @ 0x0
   740  0070                     	ds	2
   741  0072                     ??_switch_press_scan:	
   742  0072                     Lcd_Chr_CP@data:	
   743                           ; 1 bytes @ 0x2
   744                           
   745  0072                     Lcd_Cmd@data:	
   746                           ; 1 bytes @ 0x2
   747                           
   748  0072                     ___awmod@dividend:	
   749                           ; 1 bytes @ 0x2
   750                           
   751                           
   752                           ; 2 bytes @ 0x2
   753  0072                     	ds	1
   754  0073                     ??_clear:	
   755  0073                     ??_Lcd_Init:	
   756                           ; 1 bytes @ 0x3
   757                           
   758  0073                     ?_Lcd_Out:	
   759                           ; 1 bytes @ 0x3
   760                           
   761  0073                     ??___ftneg:	
   762                           ; 1 bytes @ 0x3
   763                           
   764  0073                     Lcd_Out@x:	
   765                           ; 1 bytes @ 0x3
   766                           
   767  0073                     switch_press_scan@key:	
   768                           ; 1 bytes @ 0x3
   769                           
   770  0073                     ___ftpack@exp:	
   771                           ; 1 bytes @ 0x3
   772                           
   773  0073                     __div_to_l_@f2:	
   774                           ; 1 bytes @ 0x3
   775                           
   776  0073                     __tdiv_to_l_@f2:	
   777                           ; 3 bytes @ 0x3
   778                           
   779  0073                     ___ftge@ff2:	
   780                           ; 3 bytes @ 0x3
   781                           
   782                           
   783                           ; 3 bytes @ 0x3
   784  0073                     	ds	1
   785  0074                     ??___awmod:	
   786  0074                     Lcd_Init@data:	
   787                           ; 1 bytes @ 0x4
   788                           
   789  0074                     ___ftpack@sign:	
   790                           ; 1 bytes @ 0x4
   791                           
   792  0074                     Lcd_Out@buffer:	
   793                           ; 1 bytes @ 0x4
   794                           
   795  0074                     ___lldiv@dividend:	
   796                           ; 2 bytes @ 0x4
   797                           
   798  0074                     ___llmod@dividend:	
   799                           ; 4 bytes @ 0x4
   800                           
   801                           
   802                           ; 4 bytes @ 0x4
   803  0074                     	ds	1
   804  0075                     ??___ftpack:	
   805  0075                     ___awmod@counter:	
   806                           ; 1 bytes @ 0x5
   807                           
   808                           
   809                           ; 1 bytes @ 0x5
   810  0075                     	ds	1
   811  0076                     ??__tdiv_to_l_:	
   812  0076                     ??__div_to_l_:	
   813                           ; 1 bytes @ 0x6
   814                           
   815  0076                     ??_Lcd_Out:	
   816                           ; 1 bytes @ 0x6
   817                           
   818  0076                     ??___ftge:	
   819                           ; 1 bytes @ 0x6
   820                           
   821  0076                     ___awmod@sign:	
   822                           ; 1 bytes @ 0x6
   823                           
   824                           
   825                           ; 1 bytes @ 0x6
   826  0076                     	ds	1
   827  0077                     ?___awdiv:	
   828  0077                     Lcd_Out@y:	
   829                           ; 2 bytes @ 0x7
   830                           
   831  0077                     ___awdiv@divisor:	
   832                           ; 1 bytes @ 0x7
   833                           
   834                           
   835                           ; 2 bytes @ 0x7
   836  0077                     	ds	1
   837  0078                     ??___lldiv:	
   838  0078                     ??___llmod:	
   839                           ; 1 bytes @ 0x8
   840                           
   841  0078                     ?___ftdiv:	
   842                           ; 1 bytes @ 0x8
   843                           
   844  0078                     ?___lltoft:	
   845                           ; 3 bytes @ 0x8
   846                           
   847  0078                     Lcd_Out@data:	
   848                           ; 3 bytes @ 0x8
   849                           
   850  0078                     ___ftdiv@f2:	
   851                           ; 1 bytes @ 0x8
   852                           
   853  0078                     ___lltoft@c:	
   854                           ; 3 bytes @ 0x8
   855                           
   856                           
   857                           ; 4 bytes @ 0x8
   858  0078                     	ds	1
   859  0079                     ___llmod@counter:	
   860  0079                     ___awdiv@dividend:	
   861                           ; 1 bytes @ 0x9
   862                           
   863  0079                     ___lldiv@quotient:	
   864                           ; 2 bytes @ 0x9
   865                           
   866                           
   867                           ; 4 bytes @ 0x9
   868  0079                     	ds	2
   869  007B                     ??___awdiv:	
   870  007B                     ___ftdiv@f1:	
   871                           ; 1 bytes @ 0xB
   872                           
   873                           
   874                           ; 3 bytes @ 0xB
   875  007B                     	ds	1
   876  007C                     ??___wmul:	
   877  007C                     ??___lltoft:	
   878                           ; 1 bytes @ 0xC
   879                           
   880  007C                     ___wmul@product:	
   881                           ; 1 bytes @ 0xC
   882                           
   883                           
   884                           ; 2 bytes @ 0xC
   885  007C                     	ds	1
   886  007D                     ___lldiv@counter:	
   887  007D                     ___lltoft@exp:	
   888                           ; 1 bytes @ 0xD
   889                           
   890                           
   891                           ; 1 bytes @ 0xD
   892  007D                     	ds	1
   893  007E                     ??___ftsub:	
   894                           
   895                           	psect	cstackBANK0
   896  0020                     __pcstackBANK0:	
   897                           ; 1 bytes @ 0xE
   898                           
   899  0020                     ??___ftdiv:	
   900  0020                     ___awdiv@counter:	
   901                           ; 1 bytes @ 0x0
   902                           
   903  0020                     __div_to_l_@quot:	
   904                           ; 1 bytes @ 0x0
   905                           
   906  0020                     __tdiv_to_l_@quot:	
   907                           ; 4 bytes @ 0x0
   908                           
   909                           
   910                           ; 4 bytes @ 0x0
   911  0020                     	ds	1
   912  0021                     ___awdiv@sign:	
   913                           
   914                           ; 1 bytes @ 0x1
   915  0021                     	ds	1
   916  0022                     ___awdiv@quotient:	
   917                           
   918                           ; 2 bytes @ 0x2
   919  0022                     	ds	2
   920  0024                     ?___wmul:	
   921  0024                     __div_to_l_@cntr:	
   922                           ; 2 bytes @ 0x4
   923                           
   924  0024                     ___ftdiv@cntr:	
   925                           ; 1 bytes @ 0x4
   926                           
   927  0024                     __tdiv_to_l_@cntr:	
   928                           ; 1 bytes @ 0x4
   929                           
   930  0024                     ___wmul@multiplier:	
   931                           ; 1 bytes @ 0x4
   932                           
   933                           
   934                           ; 2 bytes @ 0x4
   935  0024                     	ds	1
   936  0025                     __div_to_l_@exp1:	
   937  0025                     __tdiv_to_l_@exp1:	
   938                           ; 1 bytes @ 0x5
   939                           
   940  0025                     ___ftdiv@f3:	
   941                           ; 1 bytes @ 0x5
   942                           
   943                           
   944                           ; 3 bytes @ 0x5
   945  0025                     	ds	1
   946  0026                     ___wmul@multiplicand:	
   947                           
   948                           ; 2 bytes @ 0x6
   949  0026                     	ds	2
   950  0028                     ?___awtoft:	
   951  0028                     ?___ftmul:	
   952                           ; 3 bytes @ 0x8
   953                           
   954  0028                     ___ftdiv@exp:	
   955                           ; 3 bytes @ 0x8
   956                           
   957  0028                     ___awtoft@c:	
   958                           ; 1 bytes @ 0x8
   959                           
   960  0028                     ___ftmul@f1:	
   961                           ; 2 bytes @ 0x8
   962                           
   963                           
   964                           ; 3 bytes @ 0x8
   965  0028                     	ds	1
   966  0029                     ___ftdiv@sign:	
   967                           
   968                           ; 1 bytes @ 0x9
   969  0029                     	ds	2
   970  002B                     ??___awtoft:	
   971  002B                     ___ftmul@f2:	
   972                           ; 1 bytes @ 0xB
   973                           
   974                           
   975                           ; 3 bytes @ 0xB
   976  002B                     	ds	2
   977  002D                     ___awtoft@sign:	
   978                           
   979                           ; 1 bytes @ 0xD
   980  002D                     	ds	1
   981  002E                     ??___ftmul:	
   982                           
   983                           ; 1 bytes @ 0xE
   984  002E                     	ds	4
   985  0032                     ___ftmul@exp:	
   986                           
   987                           ; 1 bytes @ 0x12
   988  0032                     	ds	1
   989  0033                     ___ftmul@f3_as_product:	
   990                           
   991                           ; 3 bytes @ 0x13
   992  0033                     	ds	3
   993  0036                     ___ftmul@cntr:	
   994                           
   995                           ; 1 bytes @ 0x16
   996  0036                     	ds	1
   997  0037                     ___ftmul@sign:	
   998                           
   999                           ; 1 bytes @ 0x17
  1000  0037                     	ds	1
  1001  0038                     ?_fround:	
  1002  0038                     ?_scale:	
  1003                           ; 3 bytes @ 0x18
  1004                           
  1005                           
  1006                           ; 3 bytes @ 0x18
  1007  0038                     	ds	3
  1008  003B                     ??_fround:	
  1009  003B                     ??_scale:	
  1010                           ; 1 bytes @ 0x1B
  1011                           
  1012                           
  1013                           ; 1 bytes @ 0x1B
  1014  003B                     	ds	2
  1015  003D                     _scale$676:	
  1016                           
  1017                           ; 3 bytes @ 0x1D
  1018  003D                     	ds	2
  1019  003F                     _fround$675:	
  1020                           
  1021                           ; 3 bytes @ 0x1F
  1022  003F                     	ds	1
  1023  0040                     scale@scl:	
  1024                           
  1025                           ; 1 bytes @ 0x20
  1026  0040                     	ds	1
  1027  0041                     ?___fttol:	
  1028  0041                     ___fttol@f1:	
  1029                           ; 4 bytes @ 0x21
  1030                           
  1031                           
  1032                           ; 3 bytes @ 0x21
  1033  0041                     	ds	1
  1034  0042                     _fround$674:	
  1035                           
  1036                           ; 3 bytes @ 0x22
  1037  0042                     	ds	3
  1038  0045                     ??___fttol:	
  1039  0045                     fround@prec:	
  1040                           ; 1 bytes @ 0x25
  1041                           
  1042                           
  1043                           ; 1 bytes @ 0x25
  1044  0045                     	ds	1
  1045  0046                     ?___ftadd:	
  1046  0046                     ___ftadd@f1:	
  1047                           ; 3 bytes @ 0x26
  1048                           
  1049                           
  1050                           ; 3 bytes @ 0x26
  1051  0046                     	ds	3
  1052  0049                     ___fttol@sign1:	
  1053  0049                     ___ftadd@f2:	
  1054                           ; 1 bytes @ 0x29
  1055                           
  1056                           
  1057                           ; 3 bytes @ 0x29
  1058  0049                     	ds	1
  1059  004A                     ___fttol@lval:	
  1060                           
  1061                           ; 4 bytes @ 0x2A
  1062  004A                     	ds	2
  1063  004C                     ??___ftadd:	
  1064                           
  1065                           ; 1 bytes @ 0x2C
  1066  004C                     	ds	2
  1067  004E                     ___fttol@exp1:	
  1068                           
  1069                           ; 1 bytes @ 0x2E
  1070  004E                     	ds	2
  1071  0050                     ___ftadd@sign:	
  1072                           
  1073                           ; 1 bytes @ 0x30
  1074  0050                     	ds	1
  1075  0051                     ___ftadd@exp2:	
  1076                           
  1077                           ; 1 bytes @ 0x31
  1078  0051                     	ds	1
  1079  0052                     ___ftadd@exp1:	
  1080                           
  1081                           ; 1 bytes @ 0x32
  1082  0052                     	ds	1
  1083  0053                     ?___ftsub:	
  1084  0053                     ___ftsub@f2:	
  1085                           ; 3 bytes @ 0x33
  1086                           
  1087                           
  1088                           ; 3 bytes @ 0x33
  1089  0053                     	ds	3
  1090  0056                     ___ftsub@f1:	
  1091                           
  1092                           ; 3 bytes @ 0x36
  1093  0056                     	ds	3
  1094  0059                     ?_sprintf:	
  1095  0059                     sprintf@f:	
  1096                           ; 2 bytes @ 0x39
  1097                           
  1098                           
  1099                           ; 2 bytes @ 0x39
  1100  0059                     	ds	5
  1101  005E                     ??_sprintf:	
  1102                           
  1103                           ; 1 bytes @ 0x3E
  1104  005E                     	ds	6
  1105  0064                     ??_main:	
  1106                           
  1107                           ; 1 bytes @ 0x44
  1108  0064                     	ds	7
  1109                           
  1110                           	psect	maintext
  1111  02EC                     __pmaintext:	
  1112 ;;
  1113 ;;Main: autosize = 0, tempsize = 7, incstack = 0, save=0
  1114 ;;
  1115 ;; *************** function _main *****************
  1116 ;; Defined at:
  1117 ;;		line 15 in file "main.c"
  1118 ;; Parameters:    Size  Location     Type
  1119 ;;		None
  1120 ;; Auto vars:     Size  Location     Type
  1121 ;;  j               2   62[BANK2 ] int 
  1122 ;;  j               2   60[BANK2 ] int 
  1123 ;;  i               2   47[BANK2 ] int 
  1124 ;;  i               2   64[BANK2 ] int 
  1125 ;;  i               2   45[BANK2 ] int 
  1126 ;;  i               2   66[BANK2 ] int 
  1127 ;;  buffer         20    0[BANK2 ] unsigned char [20]
  1128 ;;  number          8   37[BANK2 ] int [4]
  1129 ;;  udc1            6   26[BANK2 ] int [3]
  1130 ;;  udc             6   20[BANK2 ] int [3]
  1131 ;;  num             4   32[BANK2 ] unsigned char [4]
  1132 ;;  num2            3   57[BANK2 ] float 
  1133 ;;  num1            3   54[BANK2 ] float 
  1134 ;;  operation       3   51[BANK2 ] float 
  1135 ;;  clc             2   49[BANK2 ] int 
  1136 ;;  op              1   36[BANK2 ] unsigned char 
  1137 ;; Return value:  Size  Location     Type
  1138 ;;                  1    wreg      void 
  1139 ;; Registers used:
  1140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1141 ;; Tracked objects:
  1142 ;;		On entry : B1F/0
  1143 ;;		On exit  : 0/0
  1144 ;;		Unchanged: 0/0
  1145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1146 ;;      Params:         0       0       0       0       0       0       0       0
  1147 ;;      Locals:         0       0       0      68       0       0       0       0
  1148 ;;      Temps:          0       7       0       0       0       0       0       0
  1149 ;;      Totals:         0       7       0      68       0       0       0       0
  1150 ;;Total ram usage:       75 bytes
  1151 ;; Hardware stack levels required when called:    4
  1152 ;; This function calls:
  1153 ;;		_InitKeypad
  1154 ;;		_Lcd_Cmd
  1155 ;;		_Lcd_Init
  1156 ;;		_Lcd_Out
  1157 ;;		___awtoft
  1158 ;;		___ftadd
  1159 ;;		___ftdiv
  1160 ;;		___ftmul
  1161 ;;		___ftneg
  1162 ;;		___wmul
  1163 ;;		_clear
  1164 ;;		_sprintf
  1165 ;;		_switch_press_scan
  1166 ;; This function is called by:
  1167 ;;		Startup code after reset
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           
  1172                           ;psect for function _main
  1173  02EC                     _main:	
  1174                           
  1175                           ;main.c: 16: OSCCONbits.IRCF = 0b1110;
  1176                           
  1177                           ;incstack = 0
  1178                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1179  02EC  0021               	movlb	1	; select bank1
  1180  02ED  0819               	movf	25,w	;volatile
  1181  02EE  3987               	andlw	-121
  1182  02EF  3870               	iorlw	112
  1183  02F0  0099               	movwf	25	;volatile
  1184                           
  1185                           ;main.c: 17: OSCCONbits.SCS = 0b00;
  1186  02F1  30FC               	movlw	-4
  1187  02F2  0599               	andwf	25,f	;volatile
  1188                           
  1189                           ;main.c: 18: ANSELD = 0;
  1190  02F3  0023               	movlb	3	; select bank3
  1191  02F4  018F               	clrf	15	;volatile
  1192                           
  1193                           ;main.c: 19: ANSELB=0;
  1194  02F5  018D               	clrf	13	;volatile
  1195                           
  1196                           ;main.c: 20: TRISC=0;
  1197  02F6  0021               	movlb	1	; select bank1
  1198  02F7  018E               	clrf	14	;volatile
  1199                           
  1200                           ;main.c: 21: PORTC=0;
  1201  02F8  0020               	movlb	0	; select bank0
  1202  02F9  018E               	clrf	14	;volatile
  1203                           
  1204                           ;main.c: 23: InitKeypad();
  1205  02FA  3190  2061  3182   	fcall	_InitKeypad
  1206                           
  1207                           ;main.c: 24: Lcd_Init();
  1208  02FD  3194  248F  3182   	fcall	_Lcd_Init
  1209                           
  1210                           ;main.c: 25: Lcd_Cmd(1);
  1211  0300  3001               	movlw	1
  1212  0301  3193  234E  3182   	fcall	_Lcd_Cmd
  1213                           
  1214                           ;main.c: 28: int udc[3]={100,10,1},udc1[3]={100,10,1},number[4]={0},
  1215  0304  3064               	movlw	low main@F3635
  1216  0305  0086               	movwf	6
  1217  0306  3001               	movlw	high main@F3635
  1218  0307  0087               	movwf	7
  1219  0308  3034               	movlw	low main@udc
  1220  0309  0084               	movwf	4
  1221  030A  3001               	movlw	high main@udc
  1222  030B  0085               	movwf	5
  1223  030C  3006               	movlw	6
  1224  030D  0020               	movlb	0	; select bank0
  1225  030E  00E4               	movwf	??_main
  1226  030F                     u4620:	
  1227  030F  0016               	moviw fsr1++
  1228  0310  001A               	movwi fsr0++
  1229  0311  0BE4               	decfsz	??_main,f
  1230  0312  2B0F               	goto	u4620
  1231  0313  30BF               	movlw	low main@F3637
  1232  0314  0086               	movwf	6
  1233  0315  3000               	movlw	high main@F3637
  1234  0316  0087               	movwf	7
  1235  0317  303A               	movlw	low main@udc1
  1236  0318  0084               	movwf	4
  1237  0319  3001               	movlw	high main@udc1
  1238  031A  0085               	movwf	5
  1239  031B  3006               	movlw	6
  1240  031C  00E4               	movwf	??_main
  1241  031D                     u4630:	
  1242  031D  0016               	moviw fsr1++
  1243  031E  001A               	movwi fsr0++
  1244  031F  0BE4               	decfsz	??_main,f
  1245  0320  2B1D               	goto	u4630
  1246  0321  30B7               	movlw	low main@F3639
  1247  0322  0086               	movwf	6
  1248  0323  3000               	movlw	high main@F3639
  1249  0324  0087               	movwf	7
  1250  0325  3045               	movlw	low main@number
  1251  0326  0084               	movwf	4
  1252  0327  3001               	movlw	high main@number
  1253  0328  0085               	movwf	5
  1254  0329  3008               	movlw	8
  1255  032A  00E4               	movwf	??_main
  1256  032B                     u4640:	
  1257  032B  0016               	moviw fsr1++
  1258  032C  001A               	movwi fsr0++
  1259  032D  0BE4               	decfsz	??_main,f
  1260  032E  2B2B               	goto	u4640
  1261                           
  1262                           ;main.c: 29: clc=0;
  1263  032F  0022               	movlb	2	; select bank2
  1264  0330  01D1               	clrf	main@clc^(0+256)
  1265  0331  01D2               	clrf	(main@clc+1)^(0+256)
  1266                           
  1267                           ;main.c: 30: float operation=0,num1=0,num2=0;
  1268  0332  3000               	movlw	0
  1269  0333  00D3               	movwf	main@operation^(0+256)
  1270  0334  3000               	movlw	0
  1271  0335  00D4               	movwf	(main@operation+1)^(0+256)
  1272  0336  3000               	movlw	0
  1273  0337  00D5               	movwf	(main@operation+2)^(0+256)
  1274  0338  3000               	movlw	0
  1275  0339  00D6               	movwf	main@num1^(0+256)
  1276  033A  3000               	movlw	0
  1277  033B  00D7               	movwf	(main@num1+1)^(0+256)
  1278  033C  3000               	movlw	0
  1279  033D  00D8               	movwf	(main@num1+2)^(0+256)
  1280  033E  3000               	movlw	0
  1281  033F  00D9               	movwf	main@num2^(0+256)
  1282  0340  3000               	movlw	0
  1283  0341  00DA               	movwf	(main@num2+1)^(0+256)
  1284  0342  3000               	movlw	0
  1285  0343  00DB               	movwf	(main@num2+2)^(0+256)
  1286                           
  1287                           ;main.c: 31: char num[4]={0},op=' ';
  1288  0344  086D               	movf	(main@F3645+3)^(0+256),w
  1289  0345  00C3               	movwf	(main@num+3)^(0+256)
  1290  0346  086C               	movf	(main@F3645+2)^(0+256),w
  1291  0347  00C2               	movwf	(main@num+2)^(0+256)
  1292  0348  086B               	movf	(main@F3645+1)^(0+256),w
  1293  0349  00C1               	movwf	(main@num+1)^(0+256)
  1294  034A  086A               	movf	main@F3645^(0+256),w
  1295  034B  00C0               	movwf	main@num^(0+256)
  1296  034C  3020               	movlw	32
  1297  034D  0020               	movlb	0	; select bank0
  1298  034E  00E4               	movwf	??_main
  1299  034F  0864               	movf	??_main,w
  1300  0350  0022               	movlb	2	; select bank2
  1301  0351  00C4               	movwf	main@op^(0+256)
  1302                           
  1303                           ;main.c: 35: for(int i=0;i<4;i++){
  1304                           
  1305                           ;main.c: 32: unsigned char buffer[20];
  1306                           ;main.c: 34: do{
  1307  0352  01E2               	clrf	main@i^(0+256)
  1308  0353  01E3               	clrf	(main@i+1)^(0+256)
  1309  0354  0863               	movf	(main@i+1)^(0+256),w
  1310  0355  3A80               	xorlw	128
  1311  0356  0020               	movlb	0	; select bank0
  1312  0357  00E4               	movwf	??_main
  1313  0358  3080               	movlw	128
  1314  0359  0264               	subwf	??_main,w
  1315  035A  1D03               	skipz
  1316  035B  2B5F               	goto	u4655
  1317  035C  3004               	movlw	4
  1318  035D  0022               	movlb	2	; select bank2
  1319  035E  0262               	subwf	main@i^(0+256),w
  1320  035F                     u4655:	
  1321  035F  1803               	btfsc	3,0
  1322  0360  2C7B               	goto	l3188
  1323  0361                     l3146:	
  1324                           
  1325                           ;main.c: 37: num[i]=switch_press_scan();
  1326  0361  3190  206B  3182   	fcall	_switch_press_scan
  1327  0364  0020               	movlb	0	; select bank0
  1328  0365  00E4               	movwf	??_main
  1329  0366  0022               	movlb	2	; select bank2
  1330  0367  0862               	movf	main@i^(0+256),w
  1331  0368  3E40               	addlw	(low (main@num| (0+256)))& (0+255)
  1332  0369  0086               	movwf	6
  1333  036A  3001               	movlw	1	; select bank2/3
  1334  036B  0087               	movwf	7
  1335  036C  0020               	movlb	0	; select bank0
  1336  036D  0864               	movf	??_main,w
  1337  036E  0081               	movwf	1
  1338                           
  1339                           ;main.c: 38: number[i]=num[i]-48;
  1340  036F  0022               	movlb	2	; select bank2
  1341  0370  0862               	movf	main@i^(0+256),w
  1342  0371  3E40               	addlw	(low (main@num| (0+256)))& (0+255)
  1343  0372  0086               	movwf	6
  1344  0373  3001               	movlw	1	; select bank2/3
  1345  0374  0087               	movwf	7
  1346  0375  0801               	movf	1,w
  1347  0376  3ED0               	addlw	208
  1348  0377  0020               	movlb	0	; select bank0
  1349  0378  00E4               	movwf	??_main
  1350  0379  30FF               	movlw	255
  1351  037A  1803               	skipnc
  1352  037B  3000               	movlw	0
  1353  037C  00E5               	movwf	??_main+1
  1354  037D  0022               	movlb	2	; select bank2
  1355  037E  3562               	lslf	main@i^(0+256),w
  1356  037F  3E45               	addlw	(low (main@number| (0+256)))& (0+255)
  1357  0380  0086               	movwf	6
  1358  0381  3001               	movlw	1	; select bank2/3
  1359  0382  0087               	movwf	7
  1360  0383  0020               	movlb	0	; select bank0
  1361  0384  0864               	movf	??_main,w
  1362  0385  3FC0               	movwi [0]fsr1
  1363  0386  0865               	movf	??_main+1,w
  1364  0387  3FC1               	movwi [1]fsr1
  1365                           
  1366                           ;main.c: 39: if(number[i]==(int)('*'-48)){
  1367  0388  0022               	movlb	2	; select bank2
  1368  0389  3562               	lslf	main@i^(0+256),w
  1369  038A  3E45               	addlw	(low (main@number| (0+256)))& (0+255)
  1370  038B  0086               	movwf	6
  1371  038C  3001               	movlw	1	; select bank2/3
  1372  038D  0087               	movwf	7
  1373  038E  0016               	moviw fsr1++
  1374  038F  3AFA               	xorlw	250
  1375  0390  0020               	movlb	0	; select bank0
  1376  0391  00E4               	movwf	??_main
  1377  0392  0016               	moviw fsr1++
  1378  0393  3AFF               	xorlw	255
  1379  0394  04E4               	iorwf	??_main,f
  1380  0395  1D03               	btfss	3,2
  1381  0396  2B9D               	goto	l3156
  1382                           
  1383                           ;main.c: 40: clc=1;
  1384  0397  3001               	movlw	1
  1385  0398  0022               	movlb	2	; select bank2
  1386  0399  00D1               	movwf	main@clc^(0+256)
  1387  039A  3000               	movlw	0
  1388  039B  00D2               	movwf	(main@clc^(0+256)+1)
  1389                           
  1390                           ;main.c: 41: break;
  1391  039C  2C7B               	goto	l3188
  1392  039D                     l3156:	
  1393                           ;main.c: 42: }else if(number[i]<10&&number[i]>=0){
  1394                           
  1395  039D  0022               	movlb	2	; select bank2
  1396  039E  3562               	lslf	main@i^(0+256),w
  1397  039F  3E45               	addlw	(low (main@number| (0+256)))& (0+255)
  1398  03A0  0086               	movwf	6
  1399  03A1  3001               	movlw	1	; select bank2/3
  1400  03A2  0087               	movwf	7
  1401  03A3  3F40               	moviw [0]fsr1
  1402  03A4  0020               	movlb	0	; select bank0
  1403  03A5  00E4               	movwf	??_main
  1404  03A6  3F41               	moviw [1]fsr1
  1405  03A7  00E5               	movwf	??_main+1
  1406  03A8  0865               	movf	??_main+1,w
  1407  03A9  3A80               	xorlw	128
  1408  03AA  00E6               	movwf	??_main+2
  1409  03AB  3080               	movlw	128
  1410  03AC  0266               	subwf	??_main+2,w
  1411  03AD  1D03               	skipz
  1412  03AE  2BB1               	goto	u4675
  1413  03AF  300A               	movlw	10
  1414  03B0  0264               	subwf	??_main,w
  1415  03B1                     u4675:	
  1416  03B1  1803               	skipnc
  1417  03B2  2BE5               	goto	l3164
  1418  03B3  0022               	movlb	2	; select bank2
  1419  03B4  3562               	lslf	main@i^(0+256),w
  1420  03B5  3E45               	addlw	(low (main@number| (0+256)))& (0+255)
  1421  03B6  0086               	movwf	6
  1422  03B7  3001               	movlw	1	; select bank2/3
  1423  03B8  0087               	movwf	7
  1424  03B9  3F40               	moviw [0]fsr1
  1425  03BA  0020               	movlb	0	; select bank0
  1426  03BB  00E4               	movwf	??_main
  1427  03BC  3F41               	moviw [1]fsr1
  1428  03BD  00E5               	movwf	??_main+1
  1429  03BE  1BE5               	btfsc	??_main+1,7
  1430  03BF  2BE5               	goto	l3164
  1431                           
  1432                           ;main.c: 43: sprintf(buffer,"%c",num[i]);
  1433  03C0  307C               	movlw	low (STR_1| (0+32768))
  1434  03C1  00D9               	movwf	sprintf@f
  1435  03C2  3098               	movlw	high (STR_1| (0+32768))
  1436  03C3  00DA               	movwf	sprintf@f+1
  1437  03C4  0022               	movlb	2	; select bank2
  1438  03C5  0862               	movf	main@i^(0+256),w
  1439  03C6  3E40               	addlw	(low (main@num| (0+256)))& (0+255)
  1440  03C7  0086               	movwf	6
  1441  03C8  3001               	movlw	1	; select bank2/3
  1442  03C9  0087               	movwf	7
  1443  03CA  0801               	movf	1,w
  1444  03CB  0020               	movlb	0	; select bank0
  1445  03CC  00E4               	movwf	??_main
  1446  03CD  01E5               	clrf	??_main+1
  1447  03CE  0864               	movf	??_main,w
  1448  03CF  00DB               	movwf	?_sprintf+2
  1449  03D0  0865               	movf	??_main+1,w
  1450  03D1  00DC               	movwf	?_sprintf+3
  1451  03D2  3020               	movlw	(low (main@buffer| (0+256)))& (0+255)
  1452  03D3  318B  2395  3182   	fcall	_sprintf
  1453                           
  1454                           ;main.c: 44: Lcd_Out(1,i,buffer);
  1455  03D6  0022               	movlb	2	; select bank2
  1456  03D7  0862               	movf	main@i^(0+256),w
  1457  03D8  0020               	movlb	0	; select bank0
  1458  03D9  00E4               	movwf	??_main
  1459  03DA  0864               	movf	??_main,w
  1460  03DB  00F3               	movwf	Lcd_Out@x
  1461  03DC  3020               	movlw	low main@buffer
  1462  03DD  00F4               	movwf	Lcd_Out@buffer
  1463  03DE  3001               	movlw	high main@buffer
  1464  03DF  00F5               	movwf	Lcd_Out@buffer+1
  1465  03E0  3001               	movlw	1
  1466  03E1  3188  2000  3182   	fcall	_Lcd_Out
  1467                           
  1468                           ;main.c: 45: }else{
  1469  03E4  2C69               	goto	l3186
  1470  03E5                     l3164:	
  1471                           
  1472                           ;main.c: 46: op=num[i];
  1473  03E5  0022               	movlb	2	; select bank2
  1474  03E6  0862               	movf	main@i^(0+256),w
  1475  03E7  3E40               	addlw	(low (main@num| (0+256)))& (0+255)
  1476  03E8  0086               	movwf	6
  1477  03E9  3001               	movlw	1	; select bank2/3
  1478  03EA  0087               	movwf	7
  1479  03EB  0801               	movf	1,w
  1480  03EC  0020               	movlb	0	; select bank0
  1481  03ED  00E4               	movwf	??_main
  1482  03EE  0864               	movf	??_main,w
  1483  03EF  0022               	movlb	2	; select bank2
  1484  03F0  00C4               	movwf	main@op^(0+256)
  1485                           
  1486                           ;main.c: 47: for(int j = 0; j < 2; j++){
  1487  03F1  01DC               	clrf	main@j^(0+256)
  1488  03F2  01DD               	clrf	(main@j+1)^(0+256)
  1489  03F3                     L1:	
  1490  03F3  085D               	movf	(main@j+1)^(0+256),w
  1491  03F4  3A80               	xorlw	128
  1492  03F5  0020               	movlb	0	; select bank0
  1493  03F6  00E4               	movwf	??_main
  1494  03F7  3080               	movlw	128
  1495  03F8  0264               	subwf	??_main,w
  1496  03F9  1D03               	skipz
  1497  03FA  2BFE               	goto	u4695
  1498  03FB  3002               	movlw	2
  1499  03FC  0022               	movlb	2	; select bank2
  1500  03FD  025C               	subwf	main@j^(0+256),w
  1501  03FE                     u4695:	
  1502  03FE  1803               	btfsc	3,0
  1503  03FF  2C7B               	goto	l3188
  1504                           
  1505                           ;main.c: 48: if(j+i<3)
  1506  0400  0022               	movlb	2	; select bank2
  1507  0401  0862               	movf	main@i^(0+256),w
  1508  0402  075C               	addwf	main@j^(0+256),w
  1509  0403  0020               	movlb	0	; select bank0
  1510  0404  00E4               	movwf	??_main
  1511  0405  0022               	movlb	2	; select bank2
  1512  0406  0863               	movf	(main@i+1)^(0+256),w
  1513  0407  3D5D               	addwfc	(main@j+1)^(0+256),w
  1514  0408  0020               	movlb	0	; select bank0
  1515  0409  00E5               	movwf	??_main+1
  1516  040A  0865               	movf	??_main+1,w
  1517  040B  3A80               	xorlw	128
  1518  040C  00E6               	movwf	??_main+2
  1519  040D  3080               	movlw	128
  1520  040E  0266               	subwf	??_main+2,w
  1521  040F  1D03               	skipz
  1522  0410  2C13               	goto	u4705
  1523  0411  3003               	movlw	3
  1524  0412  0264               	subwf	??_main,w
  1525  0413                     u4705:	
  1526  0413  1803               	skipnc
  1527  0414  2C20               	goto	l3176
  1528                           
  1529                           ;main.c: 49: number[i+j]=0;
  1530  0415  0022               	movlb	2	; select bank2
  1531  0416  0862               	movf	main@i^(0+256),w
  1532  0417  075C               	addwf	main@j^(0+256),w
  1533  0418  0709               	addwf	9,w
  1534  0419  3E45               	addlw	(low (main@number| (0+256)))& (0+255)
  1535  041A  0086               	movwf	6
  1536  041B  3001               	movlw	1	; select bank2/3
  1537  041C  0087               	movwf	7
  1538  041D  3000               	movlw	0
  1539  041E  3FC0               	movwi [0]fsr1
  1540  041F  3FC1               	movwi [1]fsr1
  1541  0420                     l3176:	
  1542                           
  1543                           ;main.c: 50: if(3-i+j<3)
  1544  0420  0022               	movlb	2	; select bank2
  1545  0421  0962               	comf	main@i^(0+256),w
  1546  0422  0020               	movlb	0	; select bank0
  1547  0423  00E4               	movwf	??_main
  1548  0424  0022               	movlb	2	; select bank2
  1549  0425  0963               	comf	(main@i+1)^(0+256),w
  1550  0426  0020               	movlb	0	; select bank0
  1551  0427  00E5               	movwf	??_main+1
  1552  0428  0AE4               	incf	??_main,f
  1553  0429  1903               	skipnz
  1554  042A  0AE5               	incf	??_main+1,f
  1555  042B  0022               	movlb	2	; select bank2
  1556  042C  085C               	movf	main@j^(0+256),w
  1557  042D  0020               	movlb	0	; select bank0
  1558  042E  0764               	addwf	??_main,w
  1559  042F  00E6               	movwf	??_main+2
  1560  0430  0022               	movlb	2	; select bank2
  1561  0431  085D               	movf	(main@j+1)^(0+256),w
  1562  0432  0020               	movlb	0	; select bank0
  1563  0433  3D65               	addwfc	??_main+1,w
  1564  0434  00E7               	movwf	??_main+3
  1565  0435  0866               	movf	??_main+2,w
  1566  0436  3E03               	addlw	3
  1567  0437  00E8               	movwf	??_main+4
  1568  0438  3000               	movlw	0
  1569  0439  3D67               	addwfc	??_main+3,w
  1570  043A  00E9               	movwf	??_main+5
  1571  043B  0869               	movf	??_main+5,w
  1572  043C  3A80               	xorlw	128
  1573  043D  00EA               	movwf	??_main+6
  1574  043E  3080               	movlw	128
  1575  043F  026A               	subwf	??_main+6,w
  1576  0440  1D03               	skipz
  1577  0441  2C44               	goto	u4715
  1578  0442  3003               	movlw	3
  1579  0443  0268               	subwf	??_main+4,w
  1580  0444                     u4715:	
  1581  0444  1803               	skipnc
  1582  0445  2C5A               	goto	l3180
  1583                           
  1584                           ;main.c: 51: udc[j]=udc[3-i+j];
  1585  0446  0022               	movlb	2	; select bank2
  1586  0447  0362               	decf	main@i^(0+256),w
  1587  0448  3AFF               	xorlw	255
  1588  0449  075C               	addwf	main@j^(0+256),w
  1589  044A  0709               	addwf	9,w
  1590  044B  3E06               	addlw	6
  1591  044C  3E34               	addlw	(low (main@udc| (0+256)))& (0+255)
  1592  044D  0086               	movwf	6
  1593  044E  3001               	movlw	1	; select bank2/3
  1594  044F  0087               	movwf	7
  1595  0450  355C               	lslf	main@j^(0+256),w
  1596  0451  3E34               	addlw	(low (main@udc| (0+256)))& (0+255)
  1597  0452  0084               	movwf	4
  1598  0453  3001               	movlw	1	; select bank2/3
  1599  0454  0085               	movwf	5
  1600  0455  3F40               	moviw [0]fsr1
  1601  0456  3F80               	movwi [0]fsr0
  1602  0457  3F41               	moviw [1]fsr1
  1603  0458  3F81               	movwi [1]fsr0
  1604  0459  2C64               	goto	l3182
  1605  045A                     l3180:	
  1606                           
  1607                           ;main.c: 52: else
  1608                           ;main.c: 53: udc[j]=1;
  1609  045A  0022               	movlb	2	; select bank2
  1610  045B  355C               	lslf	main@j^(0+256),w
  1611  045C  3E34               	addlw	(low (main@udc| (0+256)))& (0+255)
  1612  045D  0086               	movwf	6
  1613  045E  3001               	movlw	1	; select bank2/3
  1614  045F  0087               	movwf	7
  1615  0460  3001               	movlw	1
  1616  0461  3FC0               	movwi [0]fsr1
  1617  0462  3000               	movlw	0
  1618  0463  3FC1               	movwi [1]fsr1
  1619  0464                     l3182:	
  1620  0464  3001               	movlw	1
  1621  0465  07DC               	addwf	main@j^(0+256),f
  1622  0466  3000               	movlw	0
  1623  0467  3DDD               	addwfc	(main@j+1)^(0+256),f
  1624  0468  2BF3               	goto	L1
  1625  0469                     l3186:	
  1626                           ;main.c: 54: }
  1627                           ;main.c: 55: break;
  1628                           
  1629  0469  3001               	movlw	1
  1630  046A  0022               	movlb	2	; select bank2
  1631  046B  07E2               	addwf	main@i^(0+256),f
  1632  046C  3000               	movlw	0
  1633  046D  3DE3               	addwfc	(main@i+1)^(0+256),f
  1634  046E  0863               	movf	(main@i+1)^(0+256),w
  1635  046F  3A80               	xorlw	128
  1636  0470  0020               	movlb	0	; select bank0
  1637  0471  00E4               	movwf	??_main
  1638  0472  3080               	movlw	128
  1639  0473  0264               	subwf	??_main,w
  1640  0474  1D03               	skipz
  1641  0475  2C79               	goto	u4735
  1642  0476  3004               	movlw	4
  1643  0477  0022               	movlb	2	; select bank2
  1644  0478  0262               	subwf	main@i^(0+256),w
  1645  0479                     u4735:	
  1646  0479  1C03               	skipc
  1647  047A  2B61               	goto	l3146
  1648  047B                     l3188:	
  1649                           
  1650                           ;main.c: 56: }
  1651                           ;main.c: 57: }
  1652                           ;main.c: 58: if(clc==1)
  1653  047B  0022               	movlb	2	; select bank2
  1654  047C  0351               	decf	main@clc^(0+256),w
  1655  047D  0452               	iorwf	(main@clc+1)^(0+256),w
  1656  047E  1903               	btfsc	3,2
  1657  047F  2FB8               	goto	l3308
  1658                           
  1659                           ;main.c: 60: for(int i = 0; i < 3; i++){
  1660                           
  1661                           ;main.c: 59: break;
  1662  0480  01CD               	clrf	main@i_198^(0+256)
  1663  0481  01CE               	clrf	(main@i_198+1)^(0+256)
  1664  0482                     L2:	
  1665  0482  084E               	movf	(main@i_198+1)^(0+256),w
  1666  0483  3A80               	xorlw	128
  1667  0484  0020               	movlb	0	; select bank0
  1668  0485  00E4               	movwf	??_main
  1669  0486  3080               	movlw	128
  1670  0487  0264               	subwf	??_main,w
  1671  0488  1D03               	skipz
  1672  0489  2C8D               	goto	u4755
  1673  048A  3003               	movlw	3
  1674  048B  0022               	movlb	2	; select bank2
  1675  048C  024D               	subwf	main@i_198^(0+256),w
  1676  048D                     u4755:	
  1677  048D  1803               	btfsc	3,0
  1678  048E  2D0F               	goto	l3214
  1679                           
  1680                           ;main.c: 61: num1+=udc[i]*number[i];
  1681  048F  0022               	movlb	2	; select bank2
  1682  0490  354D               	lslf	main@i_198^(0+256),w
  1683  0491  3E45               	addlw	(low (main@number| (0+256)))& (0+255)
  1684  0492  0086               	movwf	6
  1685  0493  3001               	movlw	1	; select bank2/3
  1686  0494  0087               	movwf	7
  1687  0495  3F40               	moviw [0]fsr1
  1688  0496  0020               	movlb	0	; select bank0
  1689  0497  00A6               	movwf	___wmul@multiplicand
  1690  0498  3F41               	moviw [1]fsr1
  1691  0499  00A7               	movwf	___wmul@multiplicand+1
  1692  049A  0022               	movlb	2	; select bank2
  1693  049B  354D               	lslf	main@i_198^(0+256),w
  1694  049C  3E34               	addlw	(low (main@udc| (0+256)))& (0+255)
  1695  049D  0086               	movwf	6
  1696  049E  3001               	movlw	1	; select bank2/3
  1697  049F  0087               	movwf	7
  1698  04A0  3F40               	moviw [0]fsr1
  1699  04A1  0020               	movlb	0	; select bank0
  1700  04A2  00A4               	movwf	___wmul@multiplier
  1701  04A3  3F41               	moviw [1]fsr1
  1702  04A4  00A5               	movwf	___wmul@multiplier+1
  1703  04A5  3190  2079  3182   	fcall	___wmul
  1704  04A8  0020               	movlb	0	; select bank0
  1705  04A9  0825               	movf	?___wmul+1,w
  1706  04AA  00A9               	movwf	___awtoft@c+1
  1707  04AB  0824               	movf	?___wmul,w
  1708  04AC  00A8               	movwf	___awtoft@c
  1709  04AD  3190  20B3  3182   	fcall	___awtoft
  1710  04B0  0020               	movlb	0	; select bank0
  1711  04B1  0828               	movf	?___awtoft,w
  1712  04B2  00C6               	movwf	___ftadd@f1
  1713  04B3  0829               	movf	?___awtoft+1,w
  1714  04B4  00C7               	movwf	___ftadd@f1+1
  1715  04B5  082A               	movf	?___awtoft+2,w
  1716  04B6  00C8               	movwf	___ftadd@f1+2
  1717  04B7  0022               	movlb	2	; select bank2
  1718  04B8  0856               	movf	main@num1^(0+256),w
  1719  04B9  0020               	movlb	0	; select bank0
  1720  04BA  00C9               	movwf	___ftadd@f2
  1721  04BB  0022               	movlb	2	; select bank2
  1722  04BC  0857               	movf	(main@num1+1)^(0+256),w
  1723  04BD  0020               	movlb	0	; select bank0
  1724  04BE  00CA               	movwf	___ftadd@f2+1
  1725  04BF  0022               	movlb	2	; select bank2
  1726  04C0  0858               	movf	(main@num1+2)^(0+256),w
  1727  04C1  0020               	movlb	0	; select bank0
  1728  04C2  00CB               	movwf	___ftadd@f2+2
  1729  04C3  3195  25ED  3182   	fcall	___ftadd
  1730  04C6  0020               	movlb	0	; select bank0
  1731  04C7  0846               	movf	?___ftadd,w
  1732  04C8  0022               	movlb	2	; select bank2
  1733  04C9  00D6               	movwf	main@num1^(0+256)
  1734  04CA  0020               	movlb	0	; select bank0
  1735  04CB  0847               	movf	?___ftadd+1,w
  1736  04CC  0022               	movlb	2	; select bank2
  1737  04CD  00D7               	movwf	(main@num1+1)^(0+256)
  1738  04CE  0020               	movlb	0	; select bank0
  1739  04CF  0848               	movf	?___ftadd+2,w
  1740  04D0  0022               	movlb	2	; select bank2
  1741  04D1  00D8               	movwf	(main@num1+2)^(0+256)
  1742  04D2  3001               	movlw	1
  1743  04D3  07CD               	addwf	main@i_198^(0+256),f
  1744  04D4  3000               	movlw	0
  1745  04D5  3DCE               	addwfc	(main@i_198+1)^(0+256),f
  1746  04D6  2C82               	goto	L2
  1747  04D7                     l3204:	
  1748                           ;main.c: 65: case 'A':
  1749                           
  1750                           ;main.c: 62: }
  1751                           ;main.c: 64: switch(op){
  1752                           
  1753                           
  1754                           ;main.c: 66: sprintf(buffer,"%c",'/');
  1755  04D7  307C               	movlw	low (STR_1| (0+32768))
  1756  04D8  0020               	movlb	0	; select bank0
  1757  04D9  00D9               	movwf	sprintf@f
  1758  04DA  3098               	movlw	high (STR_1| (0+32768))
  1759  04DB  00DA               	movwf	sprintf@f+1
  1760  04DC  302F               	movlw	47
  1761  04DD  00DB               	movwf	?_sprintf+2
  1762  04DE  3000               	movlw	0
  1763  04DF  00DC               	movwf	?_sprintf+3
  1764  04E0  3020               	movlw	(low (main@buffer| (0+256)))& (0+255)
  1765  04E1  318B  2395  3182   	fcall	_sprintf
  1766                           
  1767                           ;main.c: 67: break;
  1768  04E4  2D1E               	goto	l3216
  1769  04E5                     l3206:	
  1770                           ;main.c: 68: case 'B':
  1771                           
  1772                           
  1773                           ;main.c: 69: sprintf(buffer,"%c",'x');
  1774  04E5  307C               	movlw	low (STR_1| (0+32768))
  1775  04E6  0020               	movlb	0	; select bank0
  1776  04E7  00D9               	movwf	sprintf@f
  1777  04E8  3098               	movlw	high (STR_1| (0+32768))
  1778  04E9  00DA               	movwf	sprintf@f+1
  1779  04EA  3078               	movlw	120
  1780  04EB  00DB               	movwf	?_sprintf+2
  1781  04EC  3000               	movlw	0
  1782  04ED  00DC               	movwf	?_sprintf+3
  1783  04EE  3020               	movlw	(low (main@buffer| (0+256)))& (0+255)
  1784  04EF  318B  2395  3182   	fcall	_sprintf
  1785                           
  1786                           ;main.c: 70: break;
  1787  04F2  2D1E               	goto	l3216
  1788  04F3                     l3208:	
  1789                           ;main.c: 71: case 'C':
  1790                           
  1791                           
  1792                           ;main.c: 72: sprintf(buffer,"%c",'-');
  1793  04F3  307C               	movlw	low (STR_1| (0+32768))
  1794  04F4  0020               	movlb	0	; select bank0
  1795  04F5  00D9               	movwf	sprintf@f
  1796  04F6  3098               	movlw	high (STR_1| (0+32768))
  1797  04F7  00DA               	movwf	sprintf@f+1
  1798  04F8  302D               	movlw	45
  1799  04F9  00DB               	movwf	?_sprintf+2
  1800  04FA  3000               	movlw	0
  1801  04FB  00DC               	movwf	?_sprintf+3
  1802  04FC  3020               	movlw	(low (main@buffer| (0+256)))& (0+255)
  1803  04FD  318B  2395  3182   	fcall	_sprintf
  1804                           
  1805                           ;main.c: 73: break;
  1806  0500  2D1E               	goto	l3216
  1807  0501                     l3210:	
  1808                           ;main.c: 74: case 'D':
  1809                           
  1810                           
  1811                           ;main.c: 75: sprintf(buffer,"%c",'+');
  1812  0501  307C               	movlw	low (STR_1| (0+32768))
  1813  0502  0020               	movlb	0	; select bank0
  1814  0503  00D9               	movwf	sprintf@f
  1815  0504  3098               	movlw	high (STR_1| (0+32768))
  1816  0505  00DA               	movwf	sprintf@f+1
  1817  0506  302B               	movlw	43
  1818  0507  00DB               	movwf	?_sprintf+2
  1819  0508  3000               	movlw	0
  1820  0509  00DC               	movwf	?_sprintf+3
  1821  050A  3020               	movlw	(low (main@buffer| (0+256)))& (0+255)
  1822  050B  318B  2395  3182   	fcall	_sprintf
  1823                           
  1824                           ;main.c: 77: }
  1825                           
  1826                           ;main.c: 76: break;
  1827  050E  2D1E               	goto	l3216
  1828  050F                     l3214:	
  1829  050F  0022               	movlb	2	; select bank2
  1830  0510  0844               	movf	main@op^(0+256),w
  1831                           
  1832                           ; Switch size 1, requested type "space"
  1833                           ; Number of cases is 4, Range of values is 65 to 68
  1834                           ; switch strategies available:
  1835                           ; Name         Instructions Cycles
  1836                           ; simple_byte           13     7 (average)
  1837                           ; direct_byte           17     9 (fixed)
  1838                           ; jumptable            263     9 (fixed)
  1839                           ;	Chosen strategy is simple_byte
  1840  0511  3A41               	xorlw	65	; case 65
  1841  0512  1903               	skipnz
  1842  0513  2CD7               	goto	l3204
  1843  0514  3A03               	xorlw	3	; case 66
  1844  0515  1903               	skipnz
  1845  0516  2CE5               	goto	l3206
  1846  0517  3A01               	xorlw	1	; case 67
  1847  0518  1903               	skipnz
  1848  0519  2CF3               	goto	l3208
  1849  051A  3A07               	xorlw	7	; case 68
  1850  051B  1903               	skipnz
  1851  051C  2D01               	goto	l3210
  1852  051D  2D1E               	goto	l3216
  1853  051E                     l3216:	
  1854                           
  1855                           ;main.c: 78: Lcd_Out(1,3,buffer);
  1856  051E  3003               	movlw	3
  1857  051F  0020               	movlb	0	; select bank0
  1858  0520  00E4               	movwf	??_main
  1859  0521  0864               	movf	??_main,w
  1860  0522  00F3               	movwf	Lcd_Out@x
  1861  0523  3020               	movlw	low main@buffer
  1862  0524  00F4               	movwf	Lcd_Out@buffer
  1863  0525  3001               	movlw	high main@buffer
  1864  0526  00F5               	movwf	Lcd_Out@buffer+1
  1865  0527  3001               	movlw	1
  1866  0528  3188  2000  3182   	fcall	_Lcd_Out
  1867                           
  1868                           ;main.c: 79: for(int i=0;i<4;i++){
  1869  052B  0022               	movlb	2	; select bank2
  1870  052C  01E0               	clrf	main@i_203^(0+256)
  1871  052D  01E1               	clrf	(main@i_203+1)^(0+256)
  1872  052E  0861               	movf	(main@i_203+1)^(0+256),w
  1873  052F  3A80               	xorlw	128
  1874  0530  0020               	movlb	0	; select bank0
  1875  0531  00E4               	movwf	??_main
  1876  0532  3080               	movlw	128
  1877  0533  0264               	subwf	??_main,w
  1878  0534  1D03               	skipz
  1879  0535  2D39               	goto	u4775
  1880  0536  3004               	movlw	4
  1881  0537  0022               	movlb	2	; select bank2
  1882  0538  0260               	subwf	main@i_203^(0+256),w
  1883  0539                     u4775:	
  1884  0539  1803               	btfsc	3,0
  1885  053A  2E4B               	goto	l3264
  1886  053B                     l3224:	
  1887                           
  1888                           ;main.c: 81: num[i]=switch_press_scan();
  1889  053B  3190  206B  3182   	fcall	_switch_press_scan
  1890  053E  0020               	movlb	0	; select bank0
  1891  053F  00E4               	movwf	??_main
  1892  0540  0022               	movlb	2	; select bank2
  1893  0541  0860               	movf	main@i_203^(0+256),w
  1894  0542  3E40               	addlw	(low (main@num| (0+256)))& (0+255)
  1895  0543  0086               	movwf	6
  1896  0544  3001               	movlw	1	; select bank2/3
  1897  0545  0087               	movwf	7
  1898  0546  0020               	movlb	0	; select bank0
  1899  0547  0864               	movf	??_main,w
  1900  0548  0081               	movwf	1
  1901                           
  1902                           ;main.c: 82: number[i]=num[i]-48;
  1903  0549  0022               	movlb	2	; select bank2
  1904  054A  0860               	movf	main@i_203^(0+256),w
  1905  054B  3E40               	addlw	(low (main@num| (0+256)))& (0+255)
  1906  054C  0086               	movwf	6
  1907  054D  3001               	movlw	1	; select bank2/3
  1908  054E  0087               	movwf	7
  1909  054F  0801               	movf	1,w
  1910  0550  3ED0               	addlw	208
  1911  0551  0020               	movlb	0	; select bank0
  1912  0552  00E4               	movwf	??_main
  1913  0553  30FF               	movlw	255
  1914  0554  1803               	skipnc
  1915  0555  3000               	movlw	0
  1916  0556  00E5               	movwf	??_main+1
  1917  0557  0022               	movlb	2	; select bank2
  1918  0558  3560               	lslf	main@i_203^(0+256),w
  1919  0559  3E45               	addlw	(low (main@number| (0+256)))& (0+255)
  1920  055A  0086               	movwf	6
  1921  055B  3001               	movlw	1	; select bank2/3
  1922  055C  0087               	movwf	7
  1923  055D  0020               	movlb	0	; select bank0
  1924  055E  0864               	movf	??_main,w
  1925  055F  3FC0               	movwi [0]fsr1
  1926  0560  0865               	movf	??_main+1,w
  1927  0561  3FC1               	movwi [1]fsr1
  1928                           
  1929                           ;main.c: 83: if(number[i]==(int)('*'-48)){
  1930  0562  0022               	movlb	2	; select bank2
  1931  0563  3560               	lslf	main@i_203^(0+256),w
  1932  0564  3E45               	addlw	(low (main@number| (0+256)))& (0+255)
  1933  0565  0086               	movwf	6
  1934  0566  3001               	movlw	1	; select bank2/3
  1935  0567  0087               	movwf	7
  1936  0568  0016               	moviw fsr1++
  1937  0569  3AFA               	xorlw	250
  1938  056A  0020               	movlb	0	; select bank0
  1939  056B  00E4               	movwf	??_main
  1940  056C  0016               	moviw fsr1++
  1941  056D  3AFF               	xorlw	255
  1942  056E  04E4               	iorwf	??_main,f
  1943  056F  1D03               	btfss	3,2
  1944  0570  2D77               	goto	l3234
  1945                           
  1946                           ;main.c: 84: clc=1;
  1947  0571  3001               	movlw	1
  1948  0572  0022               	movlb	2	; select bank2
  1949  0573  00D1               	movwf	main@clc^(0+256)
  1950  0574  3000               	movlw	0
  1951  0575  00D2               	movwf	(main@clc^(0+256)+1)
  1952                           
  1953                           ;main.c: 85: break;
  1954  0576  2E4B               	goto	l3264
  1955  0577                     l3234:	
  1956                           ;main.c: 86: }else if(number[i]<10&&number[i]>=0){
  1957                           
  1958  0577  0022               	movlb	2	; select bank2
  1959  0578  3560               	lslf	main@i_203^(0+256),w
  1960  0579  3E45               	addlw	(low (main@number| (0+256)))& (0+255)
  1961  057A  0086               	movwf	6
  1962  057B  3001               	movlw	1	; select bank2/3
  1963  057C  0087               	movwf	7
  1964  057D  3F40               	moviw [0]fsr1
  1965  057E  0020               	movlb	0	; select bank0
  1966  057F  00E4               	movwf	??_main
  1967  0580  3F41               	moviw [1]fsr1
  1968  0581  00E5               	movwf	??_main+1
  1969  0582  0865               	movf	??_main+1,w
  1970  0583  3A80               	xorlw	128
  1971  0584  00E6               	movwf	??_main+2
  1972  0585  3080               	movlw	128
  1973  0586  0266               	subwf	??_main+2,w
  1974  0587  1D03               	skipz
  1975  0588  2D8B               	goto	u4795
  1976  0589  300A               	movlw	10
  1977  058A  0264               	subwf	??_main,w
  1978  058B                     u4795:	
  1979  058B  1803               	skipnc
  1980  058C  2DC0               	goto	l3242
  1981  058D  0022               	movlb	2	; select bank2
  1982  058E  3560               	lslf	main@i_203^(0+256),w
  1983  058F  3E45               	addlw	(low (main@number| (0+256)))& (0+255)
  1984  0590  0086               	movwf	6
  1985  0591  3001               	movlw	1	; select bank2/3
  1986  0592  0087               	movwf	7
  1987  0593  3F40               	moviw [0]fsr1
  1988  0594  0020               	movlb	0	; select bank0
  1989  0595  00E4               	movwf	??_main
  1990  0596  3F41               	moviw [1]fsr1
  1991  0597  00E5               	movwf	??_main+1
  1992  0598  1BE5               	btfsc	??_main+1,7
  1993  0599  2DC0               	goto	l3242
  1994                           
  1995                           ;main.c: 87: sprintf(buffer,"%c",num[i]);
  1996  059A  307C               	movlw	low (STR_1| (0+32768))
  1997  059B  00D9               	movwf	sprintf@f
  1998  059C  3098               	movlw	high (STR_1| (0+32768))
  1999  059D  00DA               	movwf	sprintf@f+1
  2000  059E  0022               	movlb	2	; select bank2
  2001  059F  0860               	movf	main@i_203^(0+256),w
  2002  05A0  3E40               	addlw	(low (main@num| (0+256)))& (0+255)
  2003  05A1  0086               	movwf	6
  2004  05A2  3001               	movlw	1	; select bank2/3
  2005  05A3  0087               	movwf	7
  2006  05A4  0801               	movf	1,w
  2007  05A5  0020               	movlb	0	; select bank0
  2008  05A6  00E4               	movwf	??_main
  2009  05A7  01E5               	clrf	??_main+1
  2010  05A8  0864               	movf	??_main,w
  2011  05A9  00DB               	movwf	?_sprintf+2
  2012  05AA  0865               	movf	??_main+1,w
  2013  05AB  00DC               	movwf	?_sprintf+3
  2014  05AC  3020               	movlw	(low (main@buffer| (0+256)))& (0+255)
  2015  05AD  318B  2395  3182   	fcall	_sprintf
  2016                           
  2017                           ;main.c: 88: Lcd_Out(1,4+i,buffer);
  2018  05B0  0022               	movlb	2	; select bank2
  2019  05B1  0860               	movf	main@i_203^(0+256),w
  2020  05B2  3E04               	addlw	4
  2021  05B3  0020               	movlb	0	; select bank0
  2022  05B4  00E4               	movwf	??_main
  2023  05B5  0864               	movf	??_main,w
  2024  05B6  00F3               	movwf	Lcd_Out@x
  2025  05B7  3020               	movlw	low main@buffer
  2026  05B8  00F4               	movwf	Lcd_Out@buffer
  2027  05B9  3001               	movlw	high main@buffer
  2028  05BA  00F5               	movwf	Lcd_Out@buffer+1
  2029  05BB  3001               	movlw	1
  2030  05BC  3188  2000  3182   	fcall	_Lcd_Out
  2031                           
  2032                           ;main.c: 89: }else{
  2033  05BF  2E39               	goto	l3262
  2034  05C0                     l3242:	
  2035                           
  2036                           ;main.c: 90: for(int j = 0; j < 2; j++){
  2037  05C0  0022               	movlb	2	; select bank2
  2038  05C1  01DE               	clrf	main@j_205^(0+256)
  2039  05C2  01DF               	clrf	(main@j_205+1)^(0+256)
  2040  05C3                     L3:	
  2041  05C3  085F               	movf	(main@j_205+1)^(0+256),w
  2042  05C4  3A80               	xorlw	128
  2043  05C5  0020               	movlb	0	; select bank0
  2044  05C6  00E4               	movwf	??_main
  2045  05C7  3080               	movlw	128
  2046  05C8  0264               	subwf	??_main,w
  2047  05C9  1D03               	skipz
  2048  05CA  2DCE               	goto	u4815
  2049  05CB  3002               	movlw	2
  2050  05CC  0022               	movlb	2	; select bank2
  2051  05CD  025E               	subwf	main@j_205^(0+256),w
  2052  05CE                     u4815:	
  2053  05CE  1803               	btfsc	3,0
  2054  05CF  2E4B               	goto	l3264
  2055                           
  2056                           ;main.c: 91: if(j+i<3)
  2057  05D0  0022               	movlb	2	; select bank2
  2058  05D1  0860               	movf	main@i_203^(0+256),w
  2059  05D2  075E               	addwf	main@j_205^(0+256),w
  2060  05D3  0020               	movlb	0	; select bank0
  2061  05D4  00E4               	movwf	??_main
  2062  05D5  0022               	movlb	2	; select bank2
  2063  05D6  0861               	movf	(main@i_203+1)^(0+256),w
  2064  05D7  3D5F               	addwfc	(main@j_205+1)^(0+256),w
  2065  05D8  0020               	movlb	0	; select bank0
  2066  05D9  00E5               	movwf	??_main+1
  2067  05DA  0865               	movf	??_main+1,w
  2068  05DB  3A80               	xorlw	128
  2069  05DC  00E6               	movwf	??_main+2
  2070  05DD  3080               	movlw	128
  2071  05DE  0266               	subwf	??_main+2,w
  2072  05DF  1D03               	skipz
  2073  05E0  2DE3               	goto	u4825
  2074  05E1  3003               	movlw	3
  2075  05E2  0264               	subwf	??_main,w
  2076  05E3                     u4825:	
  2077  05E3  1803               	skipnc
  2078  05E4  2DF0               	goto	l3252
  2079                           
  2080                           ;main.c: 92: number[i+j]=0;
  2081  05E5  0022               	movlb	2	; select bank2
  2082  05E6  0860               	movf	main@i_203^(0+256),w
  2083  05E7  075E               	addwf	main@j_205^(0+256),w
  2084  05E8  0709               	addwf	9,w
  2085  05E9  3E45               	addlw	(low (main@number| (0+256)))& (0+255)
  2086  05EA  0086               	movwf	6
  2087  05EB  3001               	movlw	1	; select bank2/3
  2088  05EC  0087               	movwf	7
  2089  05ED  3000               	movlw	0
  2090  05EE  3FC0               	movwi [0]fsr1
  2091  05EF  3FC1               	movwi [1]fsr1
  2092  05F0                     l3252:	
  2093                           
  2094                           ;main.c: 93: if(3-i+j<3)
  2095  05F0  0022               	movlb	2	; select bank2
  2096  05F1  0960               	comf	main@i_203^(0+256),w
  2097  05F2  0020               	movlb	0	; select bank0
  2098  05F3  00E4               	movwf	??_main
  2099  05F4  0022               	movlb	2	; select bank2
  2100  05F5  0961               	comf	(main@i_203+1)^(0+256),w
  2101  05F6  0020               	movlb	0	; select bank0
  2102  05F7  00E5               	movwf	??_main+1
  2103  05F8  0AE4               	incf	??_main,f
  2104  05F9  1903               	skipnz
  2105  05FA  0AE5               	incf	??_main+1,f
  2106  05FB  0022               	movlb	2	; select bank2
  2107  05FC  085E               	movf	main@j_205^(0+256),w
  2108  05FD  0020               	movlb	0	; select bank0
  2109  05FE  0764               	addwf	??_main,w
  2110  05FF  00E6               	movwf	??_main+2
  2111  0600  0022               	movlb	2	; select bank2
  2112  0601  085F               	movf	(main@j_205+1)^(0+256),w
  2113  0602  0020               	movlb	0	; select bank0
  2114  0603  3D65               	addwfc	??_main+1,w
  2115  0604  00E7               	movwf	??_main+3
  2116  0605  0866               	movf	??_main+2,w
  2117  0606  3E03               	addlw	3
  2118  0607  00E8               	movwf	??_main+4
  2119  0608  3000               	movlw	0
  2120  0609  3D67               	addwfc	??_main+3,w
  2121  060A  00E9               	movwf	??_main+5
  2122  060B  0869               	movf	??_main+5,w
  2123  060C  3A80               	xorlw	128
  2124  060D  00EA               	movwf	??_main+6
  2125  060E  3080               	movlw	128
  2126  060F  026A               	subwf	??_main+6,w
  2127  0610  1D03               	skipz
  2128  0611  2E14               	goto	u4835
  2129  0612  3003               	movlw	3
  2130  0613  0268               	subwf	??_main+4,w
  2131  0614                     u4835:	
  2132  0614  1803               	skipnc
  2133  0615  2E2A               	goto	l3256
  2134                           
  2135                           ;main.c: 94: udc1[j]=udc1[3-i+j];
  2136  0616  0022               	movlb	2	; select bank2
  2137  0617  0360               	decf	main@i_203^(0+256),w
  2138  0618  3AFF               	xorlw	255
  2139  0619  075E               	addwf	main@j_205^(0+256),w
  2140  061A  0709               	addwf	9,w
  2141  061B  3E06               	addlw	6
  2142  061C  3E3A               	addlw	(low (main@udc1| (0+256)))& (0+255)
  2143  061D  0086               	movwf	6
  2144  061E  3001               	movlw	1	; select bank2/3
  2145  061F  0087               	movwf	7
  2146  0620  355E               	lslf	main@j_205^(0+256),w
  2147  0621  3E3A               	addlw	(low (main@udc1| (0+256)))& (0+255)
  2148  0622  0084               	movwf	4
  2149  0623  3001               	movlw	1	; select bank2/3
  2150  0624  0085               	movwf	5
  2151  0625  3F40               	moviw [0]fsr1
  2152  0626  3F80               	movwi [0]fsr0
  2153  0627  3F41               	moviw [1]fsr1
  2154  0628  3F81               	movwi [1]fsr0
  2155  0629  2E34               	goto	l3258
  2156  062A                     l3256:	
  2157                           
  2158                           ;main.c: 95: else
  2159                           ;main.c: 96: udc1[j]=1;
  2160  062A  0022               	movlb	2	; select bank2
  2161  062B  355E               	lslf	main@j_205^(0+256),w
  2162  062C  3E3A               	addlw	(low (main@udc1| (0+256)))& (0+255)
  2163  062D  0086               	movwf	6
  2164  062E  3001               	movlw	1	; select bank2/3
  2165  062F  0087               	movwf	7
  2166  0630  3001               	movlw	1
  2167  0631  3FC0               	movwi [0]fsr1
  2168  0632  3000               	movlw	0
  2169  0633  3FC1               	movwi [1]fsr1
  2170  0634                     l3258:	
  2171  0634  3001               	movlw	1
  2172  0635  07DE               	addwf	main@j_205^(0+256),f
  2173  0636  3000               	movlw	0
  2174  0637  3DDF               	addwfc	(main@j_205+1)^(0+256),f
  2175  0638  2DC3               	goto	L3
  2176  0639                     l3262:	
  2177                           ;main.c: 97: }
  2178                           ;main.c: 98: break;
  2179                           
  2180  0639  3001               	movlw	1
  2181  063A  0022               	movlb	2	; select bank2
  2182  063B  07E0               	addwf	main@i_203^(0+256),f
  2183  063C  3000               	movlw	0
  2184  063D  3DE1               	addwfc	(main@i_203+1)^(0+256),f
  2185  063E  0861               	movf	(main@i_203+1)^(0+256),w
  2186  063F  3A80               	xorlw	128
  2187  0640  0020               	movlb	0	; select bank0
  2188  0641  00E4               	movwf	??_main
  2189  0642  3080               	movlw	128
  2190  0643  0264               	subwf	??_main,w
  2191  0644  1D03               	skipz
  2192  0645  2E49               	goto	u4855
  2193  0646  3004               	movlw	4
  2194  0647  0022               	movlb	2	; select bank2
  2195  0648  0260               	subwf	main@i_203^(0+256),w
  2196  0649                     u4855:	
  2197  0649  1C03               	skipc
  2198  064A  2D3B               	goto	l3224
  2199  064B                     l3264:	
  2200                           
  2201                           ;main.c: 99: }
  2202                           ;main.c: 100: }
  2203                           ;main.c: 101: if(clc==1)
  2204  064B  0022               	movlb	2	; select bank2
  2205  064C  0351               	decf	main@clc^(0+256),w
  2206  064D  0452               	iorwf	(main@clc+1)^(0+256),w
  2207  064E  1903               	btfsc	3,2
  2208  064F  2FB8               	goto	l3308
  2209                           
  2210                           ;main.c: 103: for(int i = 0; i < 3; i++){
  2211                           
  2212                           ;main.c: 102: break;
  2213  0650  01CF               	clrf	main@i_206^(0+256)
  2214  0651  01D0               	clrf	(main@i_206+1)^(0+256)
  2215  0652                     L4:	
  2216  0652  0850               	movf	(main@i_206+1)^(0+256),w
  2217  0653  3A80               	xorlw	128
  2218  0654  0020               	movlb	0	; select bank0
  2219  0655  00E4               	movwf	??_main
  2220  0656  3080               	movlw	128
  2221  0657  0264               	subwf	??_main,w
  2222  0658  1D03               	skipz
  2223  0659  2E5D               	goto	u4875
  2224  065A  3003               	movlw	3
  2225  065B  0022               	movlb	2	; select bank2
  2226  065C  024F               	subwf	main@i_206^(0+256),w
  2227  065D                     u4875:	
  2228  065D  1803               	btfsc	3,0
  2229  065E  2F90               	goto	l3298
  2230                           
  2231                           ;main.c: 104: num2+=udc1[i]*number[i];
  2232  065F  0022               	movlb	2	; select bank2
  2233  0660  354F               	lslf	main@i_206^(0+256),w
  2234  0661  3E45               	addlw	(low (main@number| (0+256)))& (0+255)
  2235  0662  0086               	movwf	6
  2236  0663  3001               	movlw	1	; select bank2/3
  2237  0664  0087               	movwf	7
  2238  0665  3F40               	moviw [0]fsr1
  2239  0666  0020               	movlb	0	; select bank0
  2240  0667  00A6               	movwf	___wmul@multiplicand
  2241  0668  3F41               	moviw [1]fsr1
  2242  0669  00A7               	movwf	___wmul@multiplicand+1
  2243  066A  0022               	movlb	2	; select bank2
  2244  066B  354F               	lslf	main@i_206^(0+256),w
  2245  066C  3E3A               	addlw	(low (main@udc1| (0+256)))& (0+255)
  2246  066D  0086               	movwf	6
  2247  066E  3001               	movlw	1	; select bank2/3
  2248  066F  0087               	movwf	7
  2249  0670  3F40               	moviw [0]fsr1
  2250  0671  0020               	movlb	0	; select bank0
  2251  0672  00A4               	movwf	___wmul@multiplier
  2252  0673  3F41               	moviw [1]fsr1
  2253  0674  00A5               	movwf	___wmul@multiplier+1
  2254  0675  3190  2079  3182   	fcall	___wmul
  2255  0678  0020               	movlb	0	; select bank0
  2256  0679  0825               	movf	?___wmul+1,w
  2257  067A  00A9               	movwf	___awtoft@c+1
  2258  067B  0824               	movf	?___wmul,w
  2259  067C  00A8               	movwf	___awtoft@c
  2260  067D  3190  20B3  3182   	fcall	___awtoft
  2261  0680  0020               	movlb	0	; select bank0
  2262  0681  0828               	movf	?___awtoft,w
  2263  0682  00C6               	movwf	___ftadd@f1
  2264  0683  0829               	movf	?___awtoft+1,w
  2265  0684  00C7               	movwf	___ftadd@f1+1
  2266  0685  082A               	movf	?___awtoft+2,w
  2267  0686  00C8               	movwf	___ftadd@f1+2
  2268  0687  0022               	movlb	2	; select bank2
  2269  0688  0859               	movf	main@num2^(0+256),w
  2270  0689  0020               	movlb	0	; select bank0
  2271  068A  00C9               	movwf	___ftadd@f2
  2272  068B  0022               	movlb	2	; select bank2
  2273  068C  085A               	movf	(main@num2+1)^(0+256),w
  2274  068D  0020               	movlb	0	; select bank0
  2275  068E  00CA               	movwf	___ftadd@f2+1
  2276  068F  0022               	movlb	2	; select bank2
  2277  0690  085B               	movf	(main@num2+2)^(0+256),w
  2278  0691  0020               	movlb	0	; select bank0
  2279  0692  00CB               	movwf	___ftadd@f2+2
  2280  0693  3195  25ED  3182   	fcall	___ftadd
  2281  0696  0020               	movlb	0	; select bank0
  2282  0697  0846               	movf	?___ftadd,w
  2283  0698  0022               	movlb	2	; select bank2
  2284  0699  00D9               	movwf	main@num2^(0+256)
  2285  069A  0020               	movlb	0	; select bank0
  2286  069B  0847               	movf	?___ftadd+1,w
  2287  069C  0022               	movlb	2	; select bank2
  2288  069D  00DA               	movwf	(main@num2+1)^(0+256)
  2289  069E  0020               	movlb	0	; select bank0
  2290  069F  0848               	movf	?___ftadd+2,w
  2291  06A0  0022               	movlb	2	; select bank2
  2292  06A1  00DB               	movwf	(main@num2+2)^(0+256)
  2293  06A2  3001               	movlw	1
  2294  06A3  07CF               	addwf	main@i_206^(0+256),f
  2295  06A4  3000               	movlw	0
  2296  06A5  3DD0               	addwfc	(main@i_206+1)^(0+256),f
  2297  06A6  2E52               	goto	L4
  2298  06A7                     l3280:	
  2299                           ;main.c: 108: case 'A':
  2300                           
  2301                           ;main.c: 105: }
  2302                           ;main.c: 107: switch(op){
  2303                           
  2304                           
  2305                           ;main.c: 109: operation=num1/num2;
  2306  06A7  0022               	movlb	2	; select bank2
  2307  06A8  0859               	movf	main@num2^(0+256),w
  2308  06A9  00F8               	movwf	___ftdiv@f2
  2309  06AA  085A               	movf	(main@num2+1)^(0+256),w
  2310  06AB  00F9               	movwf	___ftdiv@f2+1
  2311  06AC  085B               	movf	(main@num2+2)^(0+256),w
  2312  06AD  00FA               	movwf	___ftdiv@f2+2
  2313  06AE  0856               	movf	main@num1^(0+256),w
  2314  06AF  00FB               	movwf	___ftdiv@f1
  2315  06B0  0857               	movf	(main@num1+1)^(0+256),w
  2316  06B1  00FC               	movwf	___ftdiv@f1+1
  2317  06B2  0858               	movf	(main@num1+2)^(0+256),w
  2318  06B3  00FD               	movwf	___ftdiv@f1+2
  2319  06B4  3193  23E7  3182   	fcall	___ftdiv
  2320  06B7  0878               	movf	?___ftdiv,w
  2321  06B8  0022               	movlb	2	; select bank2
  2322  06B9  00D3               	movwf	main@operation^(0+256)
  2323  06BA  0879               	movf	?___ftdiv+1,w
  2324  06BB  00D4               	movwf	(main@operation+1)^(0+256)
  2325  06BC  087A               	movf	?___ftdiv+2,w
  2326  06BD  00D5               	movwf	(main@operation+2)^(0+256)
  2327                           
  2328                           ;main.c: 110: sprintf(buffer,"%f",operation);
  2329  06BE  307F               	movlw	low (STR_7| (0+32768))
  2330  06BF  0020               	movlb	0	; select bank0
  2331  06C0  00D9               	movwf	sprintf@f
  2332  06C1  3098               	movlw	high (STR_7| (0+32768))
  2333  06C2  00DA               	movwf	sprintf@f+1
  2334  06C3  0022               	movlb	2	; select bank2
  2335  06C4  0853               	movf	main@operation^(0+256),w
  2336  06C5  0020               	movlb	0	; select bank0
  2337  06C6  00DB               	movwf	?_sprintf+2
  2338  06C7  0022               	movlb	2	; select bank2
  2339  06C8  0854               	movf	(main@operation+1)^(0+256),w
  2340  06C9  0020               	movlb	0	; select bank0
  2341  06CA  00DC               	movwf	?_sprintf+3
  2342  06CB  0022               	movlb	2	; select bank2
  2343  06CC  0855               	movf	(main@operation+2)^(0+256),w
  2344  06CD  0020               	movlb	0	; select bank0
  2345  06CE  00DD               	movwf	?_sprintf+4
  2346  06CF  3020               	movlw	(low (main@buffer| (0+256)))& (0+255)
  2347  06D0  318B  2395  3182   	fcall	_sprintf
  2348                           
  2349                           ;main.c: 111: break;
  2350  06D3  2F9F               	goto	l3300
  2351  06D4                     l3284:	
  2352                           ;main.c: 112: case 'B':
  2353                           
  2354                           
  2355                           ;main.c: 113: operation=num1*num2;
  2356  06D4  0022               	movlb	2	; select bank2
  2357  06D5  0859               	movf	main@num2^(0+256),w
  2358  06D6  0020               	movlb	0	; select bank0
  2359  06D7  00A8               	movwf	___ftmul@f1
  2360  06D8  0022               	movlb	2	; select bank2
  2361  06D9  085A               	movf	(main@num2+1)^(0+256),w
  2362  06DA  0020               	movlb	0	; select bank0
  2363  06DB  00A9               	movwf	___ftmul@f1+1
  2364  06DC  0022               	movlb	2	; select bank2
  2365  06DD  085B               	movf	(main@num2+2)^(0+256),w
  2366  06DE  0020               	movlb	0	; select bank0
  2367  06DF  00AA               	movwf	___ftmul@f1+2
  2368  06E0  0022               	movlb	2	; select bank2
  2369  06E1  0856               	movf	main@num1^(0+256),w
  2370  06E2  0020               	movlb	0	; select bank0
  2371  06E3  00AB               	movwf	___ftmul@f2
  2372  06E4  0022               	movlb	2	; select bank2
  2373  06E5  0857               	movf	(main@num1+1)^(0+256),w
  2374  06E6  0020               	movlb	0	; select bank0
  2375  06E7  00AC               	movwf	___ftmul@f2+1
  2376  06E8  0022               	movlb	2	; select bank2
  2377  06E9  0858               	movf	(main@num1+2)^(0+256),w
  2378  06EA  0020               	movlb	0	; select bank0
  2379  06EB  00AD               	movwf	___ftmul@f2+2
  2380  06EC  3195  2539  3182   	fcall	___ftmul
  2381  06EF  0020               	movlb	0	; select bank0
  2382  06F0  0828               	movf	?___ftmul,w
  2383  06F1  0022               	movlb	2	; select bank2
  2384  06F2  00D3               	movwf	main@operation^(0+256)
  2385  06F3  0020               	movlb	0	; select bank0
  2386  06F4  0829               	movf	?___ftmul+1,w
  2387  06F5  0022               	movlb	2	; select bank2
  2388  06F6  00D4               	movwf	(main@operation+1)^(0+256)
  2389  06F7  0020               	movlb	0	; select bank0
  2390  06F8  082A               	movf	?___ftmul+2,w
  2391  06F9  0022               	movlb	2	; select bank2
  2392  06FA  00D5               	movwf	(main@operation+2)^(0+256)
  2393                           
  2394                           ;main.c: 114: sprintf(buffer, "%f", operation);
  2395  06FB  307F               	movlw	low (STR_7| (0+32768))
  2396  06FC  0020               	movlb	0	; select bank0
  2397  06FD  00D9               	movwf	sprintf@f
  2398  06FE  3098               	movlw	high (STR_7| (0+32768))
  2399  06FF  00DA               	movwf	sprintf@f+1
  2400  0700  0022               	movlb	2	; select bank2
  2401  0701  0853               	movf	main@operation^(0+256),w
  2402  0702  0020               	movlb	0	; select bank0
  2403  0703  00DB               	movwf	?_sprintf+2
  2404  0704  0022               	movlb	2	; select bank2
  2405  0705  0854               	movf	(main@operation+1)^(0+256),w
  2406  0706  0020               	movlb	0	; select bank0
  2407  0707  00DC               	movwf	?_sprintf+3
  2408  0708  0022               	movlb	2	; select bank2
  2409  0709  0855               	movf	(main@operation+2)^(0+256),w
  2410  070A  0020               	movlb	0	; select bank0
  2411  070B  00DD               	movwf	?_sprintf+4
  2412  070C  3020               	movlw	(low (main@buffer| (0+256)))& (0+255)
  2413  070D  318B  2395  3182   	fcall	_sprintf
  2414                           
  2415                           ;main.c: 115: break;
  2416  0710  2F9F               	goto	l3300
  2417  0711                     l3288:	
  2418                           ;main.c: 116: case 'C':
  2419                           
  2420                           
  2421                           ;main.c: 117: operation=num1-num2;
  2422  0711  0022               	movlb	2	; select bank2
  2423  0712  0856               	movf	main@num1^(0+256),w
  2424  0713  0020               	movlb	0	; select bank0
  2425  0714  00C6               	movwf	___ftadd@f1
  2426  0715  0022               	movlb	2	; select bank2
  2427  0716  0857               	movf	(main@num1+1)^(0+256),w
  2428  0717  0020               	movlb	0	; select bank0
  2429  0718  00C7               	movwf	___ftadd@f1+1
  2430  0719  0022               	movlb	2	; select bank2
  2431  071A  0858               	movf	(main@num1+2)^(0+256),w
  2432  071B  0020               	movlb	0	; select bank0
  2433  071C  00C8               	movwf	___ftadd@f1+2
  2434  071D  0022               	movlb	2	; select bank2
  2435  071E  0859               	movf	main@num2^(0+256),w
  2436  071F  00F0               	movwf	___ftneg@f1
  2437  0720  085A               	movf	(main@num2+1)^(0+256),w
  2438  0721  00F1               	movwf	___ftneg@f1+1
  2439  0722  085B               	movf	(main@num2+2)^(0+256),w
  2440  0723  00F2               	movwf	___ftneg@f1+2
  2441  0724  3190  2059  3182   	fcall	___ftneg
  2442  0727  0870               	movf	?___ftneg,w
  2443  0728  0020               	movlb	0	; select bank0
  2444  0729  00C9               	movwf	___ftadd@f2
  2445  072A  0871               	movf	?___ftneg+1,w
  2446  072B  00CA               	movwf	___ftadd@f2+1
  2447  072C  0872               	movf	?___ftneg+2,w
  2448  072D  00CB               	movwf	___ftadd@f2+2
  2449  072E  3195  25ED  3182   	fcall	___ftadd
  2450  0731  0020               	movlb	0	; select bank0
  2451  0732  0846               	movf	?___ftadd,w
  2452  0733  0022               	movlb	2	; select bank2
  2453  0734  00D3               	movwf	main@operation^(0+256)
  2454  0735  0020               	movlb	0	; select bank0
  2455  0736  0847               	movf	?___ftadd+1,w
  2456  0737  0022               	movlb	2	; select bank2
  2457  0738  00D4               	movwf	(main@operation+1)^(0+256)
  2458  0739  0020               	movlb	0	; select bank0
  2459  073A  0848               	movf	?___ftadd+2,w
  2460  073B  0022               	movlb	2	; select bank2
  2461  073C  00D5               	movwf	(main@operation+2)^(0+256)
  2462                           
  2463                           ;main.c: 118: sprintf(buffer, "%f", operation);
  2464  073D  307F               	movlw	low (STR_7| (0+32768))
  2465  073E  0020               	movlb	0	; select bank0
  2466  073F  00D9               	movwf	sprintf@f
  2467  0740  3098               	movlw	high (STR_7| (0+32768))
  2468  0741  00DA               	movwf	sprintf@f+1
  2469  0742  0022               	movlb	2	; select bank2
  2470  0743  0853               	movf	main@operation^(0+256),w
  2471  0744  0020               	movlb	0	; select bank0
  2472  0745  00DB               	movwf	?_sprintf+2
  2473  0746  0022               	movlb	2	; select bank2
  2474  0747  0854               	movf	(main@operation+1)^(0+256),w
  2475  0748  0020               	movlb	0	; select bank0
  2476  0749  00DC               	movwf	?_sprintf+3
  2477  074A  0022               	movlb	2	; select bank2
  2478  074B  0855               	movf	(main@operation+2)^(0+256),w
  2479  074C  0020               	movlb	0	; select bank0
  2480  074D  00DD               	movwf	?_sprintf+4
  2481  074E  3020               	movlw	(low (main@buffer| (0+256)))& (0+255)
  2482  074F  318B  2395  3182   	fcall	_sprintf
  2483                           
  2484                           ;main.c: 119: break;
  2485  0752  2F9F               	goto	l3300
  2486  0753                     l3292:	
  2487                           ;main.c: 120: case 'D':
  2488                           
  2489                           
  2490                           ;main.c: 121: operation=num1+num2;
  2491  0753  0022               	movlb	2	; select bank2
  2492  0754  0859               	movf	main@num2^(0+256),w
  2493  0755  0020               	movlb	0	; select bank0
  2494  0756  00C6               	movwf	___ftadd@f1
  2495  0757  0022               	movlb	2	; select bank2
  2496  0758  085A               	movf	(main@num2+1)^(0+256),w
  2497  0759  0020               	movlb	0	; select bank0
  2498  075A  00C7               	movwf	___ftadd@f1+1
  2499  075B  0022               	movlb	2	; select bank2
  2500  075C  085B               	movf	(main@num2+2)^(0+256),w
  2501  075D  0020               	movlb	0	; select bank0
  2502  075E  00C8               	movwf	___ftadd@f1+2
  2503  075F  0022               	movlb	2	; select bank2
  2504  0760  0856               	movf	main@num1^(0+256),w
  2505  0761  0020               	movlb	0	; select bank0
  2506  0762  00C9               	movwf	___ftadd@f2
  2507  0763  0022               	movlb	2	; select bank2
  2508  0764  0857               	movf	(main@num1+1)^(0+256),w
  2509  0765  0020               	movlb	0	; select bank0
  2510  0766  00CA               	movwf	___ftadd@f2+1
  2511  0767  0022               	movlb	2	; select bank2
  2512  0768  0858               	movf	(main@num1+2)^(0+256),w
  2513  0769  0020               	movlb	0	; select bank0
  2514  076A  00CB               	movwf	___ftadd@f2+2
  2515  076B  3195  25ED  3182   	fcall	___ftadd
  2516  076E  0020               	movlb	0	; select bank0
  2517  076F  0846               	movf	?___ftadd,w
  2518  0770  0022               	movlb	2	; select bank2
  2519  0771  00D3               	movwf	main@operation^(0+256)
  2520  0772  0020               	movlb	0	; select bank0
  2521  0773  0847               	movf	?___ftadd+1,w
  2522  0774  0022               	movlb	2	; select bank2
  2523  0775  00D4               	movwf	(main@operation+1)^(0+256)
  2524  0776  0020               	movlb	0	; select bank0
  2525  0777  0848               	movf	?___ftadd+2,w
  2526  0778  0022               	movlb	2	; select bank2
  2527  0779  00D5               	movwf	(main@operation+2)^(0+256)
  2528                           
  2529                           ;main.c: 122: sprintf(buffer,"%f",operation);
  2530  077A  307F               	movlw	low (STR_7| (0+32768))
  2531  077B  0020               	movlb	0	; select bank0
  2532  077C  00D9               	movwf	sprintf@f
  2533  077D  3098               	movlw	high (STR_7| (0+32768))
  2534  077E  00DA               	movwf	sprintf@f+1
  2535  077F  0022               	movlb	2	; select bank2
  2536  0780  0853               	movf	main@operation^(0+256),w
  2537  0781  0020               	movlb	0	; select bank0
  2538  0782  00DB               	movwf	?_sprintf+2
  2539  0783  0022               	movlb	2	; select bank2
  2540  0784  0854               	movf	(main@operation+1)^(0+256),w
  2541  0785  0020               	movlb	0	; select bank0
  2542  0786  00DC               	movwf	?_sprintf+3
  2543  0787  0022               	movlb	2	; select bank2
  2544  0788  0855               	movf	(main@operation+2)^(0+256),w
  2545  0789  0020               	movlb	0	; select bank0
  2546  078A  00DD               	movwf	?_sprintf+4
  2547  078B  3020               	movlw	(low (main@buffer| (0+256)))& (0+255)
  2548  078C  318B  2395  3182   	fcall	_sprintf
  2549                           
  2550                           ;main.c: 124: }
  2551                           
  2552                           ;main.c: 123: break;
  2553  078F  2F9F               	goto	l3300
  2554  0790                     l3298:	
  2555  0790  0022               	movlb	2	; select bank2
  2556  0791  0844               	movf	main@op^(0+256),w
  2557                           
  2558                           ; Switch size 1, requested type "space"
  2559                           ; Number of cases is 4, Range of values is 65 to 68
  2560                           ; switch strategies available:
  2561                           ; Name         Instructions Cycles
  2562                           ; simple_byte           13     7 (average)
  2563                           ; direct_byte           17     9 (fixed)
  2564                           ; jumptable            263     9 (fixed)
  2565                           ;	Chosen strategy is simple_byte
  2566  0792  3A41               	xorlw	65	; case 65
  2567  0793  1903               	skipnz
  2568  0794  2EA7               	goto	l3280
  2569  0795  3A03               	xorlw	3	; case 66
  2570  0796  1903               	skipnz
  2571  0797  2ED4               	goto	l3284
  2572  0798  3A01               	xorlw	1	; case 67
  2573  0799  1903               	skipnz
  2574  079A  2F11               	goto	l3288
  2575  079B  3A07               	xorlw	7	; case 68
  2576  079C  1903               	skipnz
  2577  079D  2F53               	goto	l3292
  2578  079E  2F9F               	goto	l3300
  2579  079F                     l3300:	
  2580                           
  2581                           ;main.c: 125: Lcd_Out(2,0,buffer);
  2582  079F  01F3               	clrf	Lcd_Out@x
  2583  07A0  3020               	movlw	low main@buffer
  2584  07A1  00F4               	movwf	Lcd_Out@buffer
  2585  07A2  3001               	movlw	high main@buffer
  2586  07A3  00F5               	movwf	Lcd_Out@buffer+1
  2587  07A4  3002               	movlw	2
  2588  07A5  3188  2000  3182   	fcall	_Lcd_Out
  2589                           
  2590                           ;main.c: 126: _delay((unsigned long)((2000)*(32000000/4000.0)));
  2591  07A8  3052               	movlw	82
  2592  07A9  0020               	movlb	0	; select bank0
  2593  07AA  00E5               	movwf	??_main+1
  2594  07AB  302B               	movlw	43
  2595  07AC  00E4               	movwf	??_main
  2596  07AD  3000               	movlw	0
  2597  07AE                     u4917:	
  2598  07AE  0B89               	decfsz	9,f
  2599  07AF  2FAE               	goto	u4917
  2600  07B0  0BE4               	decfsz	??_main,f
  2601  07B1  2FAE               	goto	u4917
  2602  07B2  0BE5               	decfsz	??_main+1,f
  2603  07B3  2FAE               	goto	u4917
  2604  07B4  0000               	nop
  2605                           
  2606                           ;main.c: 127: clear();
  2607  07B5  3190  2049  3182   	fcall	_clear
  2608  07B8                     l3308:	
  2609                           ;main.c: 129: }while(clc!=1);
  2610                           
  2611                           ;main.c: 128: break;
  2612                           
  2613                           
  2614                           ;main.c: 130: if(clc==1){
  2615  07B8  0022               	movlb	2	; select bank2
  2616  07B9  0351               	decf	main@clc^(0+256),w
  2617  07BA  0452               	iorwf	(main@clc+1)^(0+256),w
  2618  07BB  1D03               	btfss	3,2
  2619  07BC  2FD6               	goto	l215
  2620                           
  2621                           ;main.c: 131: clear();
  2622  07BD  3190  2049  3182   	fcall	_clear
  2623                           
  2624                           ;main.c: 132: Lcd_Out(1,1,"CLEAR");
  2625  07C0  01F3               	clrf	Lcd_Out@x
  2626  07C1  0AF3               	incf	Lcd_Out@x,f
  2627  07C2  3027               	movlw	low (STR_11| (0+32768))
  2628  07C3  00F4               	movwf	Lcd_Out@buffer
  2629  07C4  3098               	movlw	high (STR_11| (0+32768))
  2630  07C5  00F5               	movwf	Lcd_Out@buffer+1
  2631  07C6  3001               	movlw	1
  2632  07C7  3188  2000  3182   	fcall	_Lcd_Out
  2633                           
  2634                           ;main.c: 133: _delay((unsigned long)((1000)*(32000000/4000.0)));
  2635  07CA  3029               	movlw	41
  2636  07CB  0020               	movlb	0	; select bank0
  2637  07CC  00E5               	movwf	??_main+1
  2638  07CD  3096               	movlw	150
  2639  07CE  00E4               	movwf	??_main
  2640  07CF  307F               	movlw	127
  2641  07D0                     u4927:	
  2642  07D0  0B89               	decfsz	9,f
  2643  07D1  2FD0               	goto	u4927
  2644  07D2  0BE4               	decfsz	??_main,f
  2645  07D3  2FD0               	goto	u4927
  2646  07D4  0BE5               	decfsz	??_main+1,f
  2647  07D5  2FD0               	goto	u4927
  2648  07D6                     l215:	
  2649                           ;main.c: 134: }
  2650                           ;main.c: 135: return;
  2651                           
  2652  07D6  3180  2802         	ljmp	start
  2653  07D8                     __end_of_main:	
  2654                           
  2655                           	psect	text1
  2656  106B                     __ptext1:	
  2657 ;; *************** function _switch_press_scan *****************
  2658 ;; Defined at:
  2659 ;;		line 49 in file "Keypad.c"
  2660 ;; Parameters:    Size  Location     Type
  2661 ;;		None
  2662 ;; Auto vars:     Size  Location     Type
  2663 ;;  key             1    3[COMMON] unsigned char 
  2664 ;; Return value:  Size  Location     Type
  2665 ;;                  1    wreg      unsigned char 
  2666 ;; Registers used:
  2667 ;;		wreg, status,2, status,0, pclath, cstack
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2673 ;;      Params:         0       0       0       0       0       0       0       0
  2674 ;;      Locals:         1       0       0       0       0       0       0       0
  2675 ;;      Temps:          1       0       0       0       0       0       0       0
  2676 ;;      Totals:         2       0       0       0       0       0       0       0
  2677 ;;Total ram usage:        2 bytes
  2678 ;; Hardware stack levels used:    1
  2679 ;; Hardware stack levels required when called:    1
  2680 ;; This function calls:
  2681 ;;		_keypad_scanner
  2682 ;; This function is called by:
  2683 ;;		_main
  2684 ;; This function uses a non-reentrant model
  2685 ;;
  2686                           
  2687                           
  2688                           ;psect for function _switch_press_scan
  2689  106B                     _switch_press_scan:	
  2690                           
  2691                           ;Keypad.c: 51: char key = 'n';
  2692                           
  2693                           ;incstack = 0
  2694                           ; Regs used in _switch_press_scan: [wreg+status,2+status,0+pclath+cstack]
  2695  106B  306E               	movlw	110
  2696  106C                     L5:	
  2697  106C  00F2               	movwf	??_switch_press_scan
  2698  106D  0872               	movf	??_switch_press_scan,w
  2699  106E  00F3               	movwf	switch_press_scan@key
  2700  106F  306E               	movlw	110
  2701  1070  0673               	xorwf	switch_press_scan@key,w
  2702  1071  1D03               	btfss	3,2
  2703  1072  2877               	goto	l2848
  2704                           
  2705                           ;Keypad.c: 54: key = keypad_scanner();
  2706                           
  2707                           ;Keypad.c: 53: while(key=='n')
  2708  1073  3188  20ED  3190   	fcall	_keypad_scanner
  2709  1076  286C               	goto	L5
  2710  1077                     l2848:	
  2711                           
  2712                           ;Keypad.c: 56: return key;
  2713  1077  0873               	movf	switch_press_scan@key,w
  2714  1078  0008               	return
  2715  1079                     __end_of_switch_press_scan:	
  2716                           
  2717                           	psect	text2
  2718  08ED                     __ptext2:	
  2719 ;; *************** function _keypad_scanner *****************
  2720 ;; Defined at:
  2721 ;;		line 13 in file "Keypad.c"
  2722 ;; Parameters:    Size  Location     Type
  2723 ;;		None
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;		None
  2726 ;; Return value:  Size  Location     Type
  2727 ;;                  1    wreg      unsigned char 
  2728 ;; Registers used:
  2729 ;;		wreg
  2730 ;; Tracked objects:
  2731 ;;		On entry : 0/0
  2732 ;;		On exit  : 0/0
  2733 ;;		Unchanged: 0/0
  2734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2735 ;;      Params:         0       0       0       0       0       0       0       0
  2736 ;;      Locals:         0       0       0       0       0       0       0       0
  2737 ;;      Temps:          2       0       0       0       0       0       0       0
  2738 ;;      Totals:         2       0       0       0       0       0       0       0
  2739 ;;Total ram usage:        2 bytes
  2740 ;; Hardware stack levels used:    1
  2741 ;; This function calls:
  2742 ;;		Nothing
  2743 ;; This function is called by:
  2744 ;;		_switch_press_scan
  2745 ;; This function uses a non-reentrant model
  2746 ;;
  2747                           
  2748                           
  2749                           ;psect for function _keypad_scanner
  2750  08ED                     _keypad_scanner:	
  2751                           
  2752                           ;Keypad.c: 15: RB0 = 0; RB1 = 1; RB2 = 1; RB3 = 1;
  2753                           
  2754                           ;incstack = 0
  2755                           ; Regs used in _keypad_scanner: [wreg]
  2756  08ED  0020               	movlb	0	; select bank0
  2757  08EE  100D               	bcf	13,0	;volatile
  2758  08EF  148D               	bsf	13,1	;volatile
  2759  08F0  150D               	bsf	13,2	;volatile
  2760  08F1  158D               	bsf	13,3	;volatile
  2761                           
  2762                           ;Keypad.c: 17: if (RB4 == 0) { _delay((unsigned long)((100)*(32000000/4000.0))); while (
      +                          RB4==0); return '7'; }
  2763  08F2  1A0D               	btfsc	13,4	;volatile
  2764  08F3  2905               	goto	l89
  2765  08F4  3005               	movlw	5
  2766  08F5  00F1               	movwf	??_keypad_scanner+1
  2767  08F6  300F               	movlw	15
  2768  08F7  00F0               	movwf	??_keypad_scanner
  2769  08F8  30F1               	movlw	241
  2770  08F9                     u4937:	
  2771  08F9  0B89               	decfsz	9,f
  2772  08FA  28F9               	goto	u4937
  2773  08FB  0BF0               	decfsz	??_keypad_scanner,f
  2774  08FC  28F9               	goto	u4937
  2775  08FD  0BF1               	decfsz	??_keypad_scanner+1,f
  2776  08FE  28F9               	goto	u4937
  2777  08FF  0000               	nop
  2778  0900                     l90:	
  2779  0900  0020               	movlb	0	; select bank0
  2780  0901  1E0D               	btfss	13,4	;volatile
  2781  0902  2900               	goto	l90
  2782  0903  3037               	movlw	55
  2783  0904  0008               	return
  2784  0905                     l89:	
  2785                           
  2786                           ;Keypad.c: 18: if (RB5 == 0) { _delay((unsigned long)((100)*(32000000/4000.0))); while (
      +                          RB5==0); return '8'; }
  2787  0905  1A8D               	btfsc	13,5	;volatile
  2788  0906  2918               	goto	l94
  2789  0907  3005               	movlw	5
  2790  0908  00F1               	movwf	??_keypad_scanner+1
  2791  0909  300F               	movlw	15
  2792  090A  00F0               	movwf	??_keypad_scanner
  2793  090B  30F1               	movlw	241
  2794  090C                     u4947:	
  2795  090C  0B89               	decfsz	9,f
  2796  090D  290C               	goto	u4947
  2797  090E  0BF0               	decfsz	??_keypad_scanner,f
  2798  090F  290C               	goto	u4947
  2799  0910  0BF1               	decfsz	??_keypad_scanner+1,f
  2800  0911  290C               	goto	u4947
  2801  0912  0000               	nop
  2802  0913                     l95:	
  2803  0913  0020               	movlb	0	; select bank0
  2804  0914  1E8D               	btfss	13,5	;volatile
  2805  0915  2913               	goto	l95
  2806  0916  3038               	movlw	56
  2807  0917  0008               	return
  2808  0918                     l94:	
  2809                           
  2810                           ;Keypad.c: 19: if (RB6 == 0) { _delay((unsigned long)((100)*(32000000/4000.0))); while (
      +                          RB6==0); return '9'; }
  2811  0918  1B0D               	btfsc	13,6	;volatile
  2812  0919  292B               	goto	l98
  2813  091A  3005               	movlw	5
  2814  091B  00F1               	movwf	??_keypad_scanner+1
  2815  091C  300F               	movlw	15
  2816  091D  00F0               	movwf	??_keypad_scanner
  2817  091E  30F1               	movlw	241
  2818  091F                     u4957:	
  2819  091F  0B89               	decfsz	9,f
  2820  0920  291F               	goto	u4957
  2821  0921  0BF0               	decfsz	??_keypad_scanner,f
  2822  0922  291F               	goto	u4957
  2823  0923  0BF1               	decfsz	??_keypad_scanner+1,f
  2824  0924  291F               	goto	u4957
  2825  0925  0000               	nop
  2826  0926                     l99:	
  2827  0926  0020               	movlb	0	; select bank0
  2828  0927  1F0D               	btfss	13,6	;volatile
  2829  0928  2926               	goto	l99
  2830  0929  3039               	movlw	57
  2831  092A  0008               	return
  2832  092B                     l98:	
  2833                           
  2834                           ;Keypad.c: 20: if (RB7 == 0) { _delay((unsigned long)((100)*(32000000/4000.0))); while (
      +                          RB7==0); return 'A'; }
  2835  092B  1B8D               	btfsc	13,7	;volatile
  2836  092C  293E               	goto	l102
  2837  092D  3005               	movlw	5
  2838  092E  00F1               	movwf	??_keypad_scanner+1
  2839  092F  300F               	movlw	15
  2840  0930  00F0               	movwf	??_keypad_scanner
  2841  0931  30F1               	movlw	241
  2842  0932                     u4967:	
  2843  0932  0B89               	decfsz	9,f
  2844  0933  2932               	goto	u4967
  2845  0934  0BF0               	decfsz	??_keypad_scanner,f
  2846  0935  2932               	goto	u4967
  2847  0936  0BF1               	decfsz	??_keypad_scanner+1,f
  2848  0937  2932               	goto	u4967
  2849  0938  0000               	nop
  2850  0939                     l103:	
  2851  0939  0020               	movlb	0	; select bank0
  2852  093A  1F8D               	btfss	13,7	;volatile
  2853  093B  2939               	goto	l103
  2854  093C  3041               	movlw	65
  2855  093D  0008               	return
  2856  093E                     l102:	
  2857                           
  2858                           ;Keypad.c: 22: RB0 = 1; RB1 = 0; RB2 = 1; RB3 = 1;
  2859  093E  140D               	bsf	13,0	;volatile
  2860  093F  108D               	bcf	13,1	;volatile
  2861  0940  150D               	bsf	13,2	;volatile
  2862  0941  158D               	bsf	13,3	;volatile
  2863                           
  2864                           ;Keypad.c: 24: if (RB4 == 0) { _delay((unsigned long)((100)*(32000000/4000.0))); while (
      +                          RB4==0); return '4'; }
  2865  0942  1A0D               	btfsc	13,4	;volatile
  2866  0943  2955               	goto	l106
  2867  0944  3005               	movlw	5
  2868  0945  00F1               	movwf	??_keypad_scanner+1
  2869  0946  300F               	movlw	15
  2870  0947  00F0               	movwf	??_keypad_scanner
  2871  0948  30F1               	movlw	241
  2872  0949                     u4977:	
  2873  0949  0B89               	decfsz	9,f
  2874  094A  2949               	goto	u4977
  2875  094B  0BF0               	decfsz	??_keypad_scanner,f
  2876  094C  2949               	goto	u4977
  2877  094D  0BF1               	decfsz	??_keypad_scanner+1,f
  2878  094E  2949               	goto	u4977
  2879  094F  0000               	nop
  2880  0950                     l107:	
  2881  0950  0020               	movlb	0	; select bank0
  2882  0951  1E0D               	btfss	13,4	;volatile
  2883  0952  2950               	goto	l107
  2884  0953  3034               	movlw	52
  2885  0954  0008               	return
  2886  0955                     l106:	
  2887                           
  2888                           ;Keypad.c: 25: if (RB5 == 0) { _delay((unsigned long)((100)*(32000000/4000.0))); while (
      +                          RB5==0); return '5'; }
  2889  0955  1A8D               	btfsc	13,5	;volatile
  2890  0956  2968               	goto	l110
  2891  0957  3005               	movlw	5
  2892  0958  00F1               	movwf	??_keypad_scanner+1
  2893  0959  300F               	movlw	15
  2894  095A  00F0               	movwf	??_keypad_scanner
  2895  095B  30F1               	movlw	241
  2896  095C                     u4987:	
  2897  095C  0B89               	decfsz	9,f
  2898  095D  295C               	goto	u4987
  2899  095E  0BF0               	decfsz	??_keypad_scanner,f
  2900  095F  295C               	goto	u4987
  2901  0960  0BF1               	decfsz	??_keypad_scanner+1,f
  2902  0961  295C               	goto	u4987
  2903  0962  0000               	nop
  2904  0963                     l111:	
  2905  0963  0020               	movlb	0	; select bank0
  2906  0964  1E8D               	btfss	13,5	;volatile
  2907  0965  2963               	goto	l111
  2908  0966  3035               	movlw	53
  2909  0967  0008               	return
  2910  0968                     l110:	
  2911                           
  2912                           ;Keypad.c: 26: if (RB6 == 0) { _delay((unsigned long)((100)*(32000000/4000.0))); while (
      +                          RB6==0); return '6'; }
  2913  0968  1B0D               	btfsc	13,6	;volatile
  2914  0969  297B               	goto	l114
  2915  096A  3005               	movlw	5
  2916  096B  00F1               	movwf	??_keypad_scanner+1
  2917  096C  300F               	movlw	15
  2918  096D  00F0               	movwf	??_keypad_scanner
  2919  096E  30F1               	movlw	241
  2920  096F                     u4997:	
  2921  096F  0B89               	decfsz	9,f
  2922  0970  296F               	goto	u4997
  2923  0971  0BF0               	decfsz	??_keypad_scanner,f
  2924  0972  296F               	goto	u4997
  2925  0973  0BF1               	decfsz	??_keypad_scanner+1,f
  2926  0974  296F               	goto	u4997
  2927  0975  0000               	nop
  2928  0976                     l115:	
  2929  0976  0020               	movlb	0	; select bank0
  2930  0977  1F0D               	btfss	13,6	;volatile
  2931  0978  2976               	goto	l115
  2932  0979  3036               	movlw	54
  2933  097A  0008               	return
  2934  097B                     l114:	
  2935                           
  2936                           ;Keypad.c: 27: if (RB7 == 0) { _delay((unsigned long)((100)*(32000000/4000.0))); while (
      +                          RB7==0); return 'B'; }
  2937  097B  1B8D               	btfsc	13,7	;volatile
  2938  097C  298E               	goto	l118
  2939  097D  3005               	movlw	5
  2940  097E  00F1               	movwf	??_keypad_scanner+1
  2941  097F  300F               	movlw	15
  2942  0980  00F0               	movwf	??_keypad_scanner
  2943  0981  30F1               	movlw	241
  2944  0982                     u5007:	
  2945  0982  0B89               	decfsz	9,f
  2946  0983  2982               	goto	u5007
  2947  0984  0BF0               	decfsz	??_keypad_scanner,f
  2948  0985  2982               	goto	u5007
  2949  0986  0BF1               	decfsz	??_keypad_scanner+1,f
  2950  0987  2982               	goto	u5007
  2951  0988  0000               	nop
  2952  0989                     l119:	
  2953  0989  0020               	movlb	0	; select bank0
  2954  098A  1F8D               	btfss	13,7	;volatile
  2955  098B  2989               	goto	l119
  2956  098C  3042               	movlw	66
  2957  098D  0008               	return
  2958  098E                     l118:	
  2959                           
  2960                           ;Keypad.c: 29: RB0 = 1; RB1 = 1; RB2 = 0; RB3 = 1;
  2961  098E  140D               	bsf	13,0	;volatile
  2962  098F  148D               	bsf	13,1	;volatile
  2963  0990  110D               	bcf	13,2	;volatile
  2964  0991  158D               	bsf	13,3	;volatile
  2965                           
  2966                           ;Keypad.c: 31: if (RB4 == 0) { _delay((unsigned long)((100)*(32000000/4000.0))); while (
      +                          RB4==0); return '1'; }
  2967  0992  1A0D               	btfsc	13,4	;volatile
  2968  0993  29A5               	goto	l122
  2969  0994  3005               	movlw	5
  2970  0995  00F1               	movwf	??_keypad_scanner+1
  2971  0996  300F               	movlw	15
  2972  0997  00F0               	movwf	??_keypad_scanner
  2973  0998  30F1               	movlw	241
  2974  0999                     u5017:	
  2975  0999  0B89               	decfsz	9,f
  2976  099A  2999               	goto	u5017
  2977  099B  0BF0               	decfsz	??_keypad_scanner,f
  2978  099C  2999               	goto	u5017
  2979  099D  0BF1               	decfsz	??_keypad_scanner+1,f
  2980  099E  2999               	goto	u5017
  2981  099F  0000               	nop
  2982  09A0                     l123:	
  2983  09A0  0020               	movlb	0	; select bank0
  2984  09A1  1E0D               	btfss	13,4	;volatile
  2985  09A2  29A0               	goto	l123
  2986  09A3  3031               	movlw	49
  2987  09A4  0008               	return
  2988  09A5                     l122:	
  2989                           
  2990                           ;Keypad.c: 32: if (RB5 == 0) { _delay((unsigned long)((100)*(32000000/4000.0))); while (
      +                          RB5==0); return '2'; }
  2991  09A5  1A8D               	btfsc	13,5	;volatile
  2992  09A6  29B8               	goto	l126
  2993  09A7  3005               	movlw	5
  2994  09A8  00F1               	movwf	??_keypad_scanner+1
  2995  09A9  300F               	movlw	15
  2996  09AA  00F0               	movwf	??_keypad_scanner
  2997  09AB  30F1               	movlw	241
  2998  09AC                     u5027:	
  2999  09AC  0B89               	decfsz	9,f
  3000  09AD  29AC               	goto	u5027
  3001  09AE  0BF0               	decfsz	??_keypad_scanner,f
  3002  09AF  29AC               	goto	u5027
  3003  09B0  0BF1               	decfsz	??_keypad_scanner+1,f
  3004  09B1  29AC               	goto	u5027
  3005  09B2  0000               	nop
  3006  09B3                     l127:	
  3007  09B3  0020               	movlb	0	; select bank0
  3008  09B4  1E8D               	btfss	13,5	;volatile
  3009  09B5  29B3               	goto	l127
  3010  09B6  3032               	movlw	50
  3011  09B7  0008               	return
  3012  09B8                     l126:	
  3013                           
  3014                           ;Keypad.c: 33: if (RB6 == 0) { _delay((unsigned long)((100)*(32000000/4000.0))); while (
      +                          RB6==0); return '3'; }
  3015  09B8  1B0D               	btfsc	13,6	;volatile
  3016  09B9  29CB               	goto	l130
  3017  09BA  3005               	movlw	5
  3018  09BB  00F1               	movwf	??_keypad_scanner+1
  3019  09BC  300F               	movlw	15
  3020  09BD  00F0               	movwf	??_keypad_scanner
  3021  09BE  30F1               	movlw	241
  3022  09BF                     u5037:	
  3023  09BF  0B89               	decfsz	9,f
  3024  09C0  29BF               	goto	u5037
  3025  09C1  0BF0               	decfsz	??_keypad_scanner,f
  3026  09C2  29BF               	goto	u5037
  3027  09C3  0BF1               	decfsz	??_keypad_scanner+1,f
  3028  09C4  29BF               	goto	u5037
  3029  09C5  0000               	nop
  3030  09C6                     l131:	
  3031  09C6  0020               	movlb	0	; select bank0
  3032  09C7  1F0D               	btfss	13,6	;volatile
  3033  09C8  29C6               	goto	l131
  3034  09C9  3033               	movlw	51
  3035  09CA  0008               	return
  3036  09CB                     l130:	
  3037                           
  3038                           ;Keypad.c: 34: if (RB7 == 0) { _delay((unsigned long)((100)*(32000000/4000.0))); while (
      +                          RB7==0); return 'C'; }
  3039  09CB  1B8D               	btfsc	13,7	;volatile
  3040  09CC  29DE               	goto	l134
  3041  09CD  3005               	movlw	5
  3042  09CE  00F1               	movwf	??_keypad_scanner+1
  3043  09CF  300F               	movlw	15
  3044  09D0  00F0               	movwf	??_keypad_scanner
  3045  09D1  30F1               	movlw	241
  3046  09D2                     u5047:	
  3047  09D2  0B89               	decfsz	9,f
  3048  09D3  29D2               	goto	u5047
  3049  09D4  0BF0               	decfsz	??_keypad_scanner,f
  3050  09D5  29D2               	goto	u5047
  3051  09D6  0BF1               	decfsz	??_keypad_scanner+1,f
  3052  09D7  29D2               	goto	u5047
  3053  09D8  0000               	nop
  3054  09D9                     l135:	
  3055  09D9  0020               	movlb	0	; select bank0
  3056  09DA  1F8D               	btfss	13,7	;volatile
  3057  09DB  29D9               	goto	l135
  3058  09DC  3043               	movlw	67
  3059  09DD  0008               	return
  3060  09DE                     l134:	
  3061                           
  3062                           ;Keypad.c: 36: RB0 = 1; RB1 = 1; RB2 = 1; RB3 = 0;
  3063  09DE  140D               	bsf	13,0	;volatile
  3064  09DF  148D               	bsf	13,1	;volatile
  3065  09E0  150D               	bsf	13,2	;volatile
  3066  09E1  118D               	bcf	13,3	;volatile
  3067                           
  3068                           ;Keypad.c: 38: if (RB4 == 0) { _delay((unsigned long)((100)*(32000000/4000.0))); while (
      +                          RB4==0); return '*'; }
  3069  09E2  1A0D               	btfsc	13,4	;volatile
  3070  09E3  29F5               	goto	l138
  3071  09E4  3005               	movlw	5
  3072  09E5  00F1               	movwf	??_keypad_scanner+1
  3073  09E6  300F               	movlw	15
  3074  09E7  00F0               	movwf	??_keypad_scanner
  3075  09E8  30F1               	movlw	241
  3076  09E9                     u5057:	
  3077  09E9  0B89               	decfsz	9,f
  3078  09EA  29E9               	goto	u5057
  3079  09EB  0BF0               	decfsz	??_keypad_scanner,f
  3080  09EC  29E9               	goto	u5057
  3081  09ED  0BF1               	decfsz	??_keypad_scanner+1,f
  3082  09EE  29E9               	goto	u5057
  3083  09EF  0000               	nop
  3084  09F0                     l139:	
  3085  09F0  0020               	movlb	0	; select bank0
  3086  09F1  1E0D               	btfss	13,4	;volatile
  3087  09F2  29F0               	goto	l139
  3088  09F3  302A               	movlw	42
  3089  09F4  0008               	return
  3090  09F5                     l138:	
  3091                           
  3092                           ;Keypad.c: 39: if (RB5 == 0) { _delay((unsigned long)((100)*(32000000/4000.0))); while (
      +                          RB5==0); return '0'; }
  3093  09F5  1A8D               	btfsc	13,5	;volatile
  3094  09F6  2A08               	goto	l142
  3095  09F7  3005               	movlw	5
  3096  09F8  00F1               	movwf	??_keypad_scanner+1
  3097  09F9  300F               	movlw	15
  3098  09FA  00F0               	movwf	??_keypad_scanner
  3099  09FB  30F1               	movlw	241
  3100  09FC                     u5067:	
  3101  09FC  0B89               	decfsz	9,f
  3102  09FD  29FC               	goto	u5067
  3103  09FE  0BF0               	decfsz	??_keypad_scanner,f
  3104  09FF  29FC               	goto	u5067
  3105  0A00  0BF1               	decfsz	??_keypad_scanner+1,f
  3106  0A01  29FC               	goto	u5067
  3107  0A02  0000               	nop
  3108  0A03                     l143:	
  3109  0A03  0020               	movlb	0	; select bank0
  3110  0A04  1E8D               	btfss	13,5	;volatile
  3111  0A05  2A03               	goto	l143
  3112  0A06  3030               	movlw	48
  3113  0A07  0008               	return
  3114  0A08                     l142:	
  3115                           
  3116                           ;Keypad.c: 40: if (RB6 == 0) { _delay((unsigned long)((100)*(32000000/4000.0))); while (
      +                          RB6==0); return '#'; }
  3117  0A08  1B0D               	btfsc	13,6	;volatile
  3118  0A09  2A1B               	goto	l146
  3119  0A0A  3005               	movlw	5
  3120  0A0B  00F1               	movwf	??_keypad_scanner+1
  3121  0A0C  300F               	movlw	15
  3122  0A0D  00F0               	movwf	??_keypad_scanner
  3123  0A0E  30F1               	movlw	241
  3124  0A0F                     u5077:	
  3125  0A0F  0B89               	decfsz	9,f
  3126  0A10  2A0F               	goto	u5077
  3127  0A11  0BF0               	decfsz	??_keypad_scanner,f
  3128  0A12  2A0F               	goto	u5077
  3129  0A13  0BF1               	decfsz	??_keypad_scanner+1,f
  3130  0A14  2A0F               	goto	u5077
  3131  0A15  0000               	nop
  3132  0A16                     l147:	
  3133  0A16  0020               	movlb	0	; select bank0
  3134  0A17  1F0D               	btfss	13,6	;volatile
  3135  0A18  2A16               	goto	l147
  3136  0A19  3023               	movlw	35
  3137  0A1A  0008               	return
  3138  0A1B                     l146:	
  3139                           
  3140                           ;Keypad.c: 41: if (RB7 == 0) { _delay((unsigned long)((100)*(32000000/4000.0))); while (
      +                          RB7==0); return 'D'; }
  3141  0A1B  1B8D               	btfsc	13,7	;volatile
  3142  0A1C  2A2E               	goto	l2460
  3143  0A1D  3005               	movlw	5
  3144  0A1E  00F1               	movwf	??_keypad_scanner+1
  3145  0A1F  300F               	movlw	15
  3146  0A20  00F0               	movwf	??_keypad_scanner
  3147  0A21  30F1               	movlw	241
  3148  0A22                     u5087:	
  3149  0A22  0B89               	decfsz	9,f
  3150  0A23  2A22               	goto	u5087
  3151  0A24  0BF0               	decfsz	??_keypad_scanner,f
  3152  0A25  2A22               	goto	u5087
  3153  0A26  0BF1               	decfsz	??_keypad_scanner+1,f
  3154  0A27  2A22               	goto	u5087
  3155  0A28  0000               	nop
  3156  0A29                     l151:	
  3157  0A29  0020               	movlb	0	; select bank0
  3158  0A2A  1F8D               	btfss	13,7	;volatile
  3159  0A2B  2A29               	goto	l151
  3160  0A2C  3044               	movlw	68
  3161  0A2D  0008               	return
  3162  0A2E                     l2460:	
  3163                           
  3164                           ;Keypad.c: 43: return 'n';
  3165  0A2E  306E               	movlw	110
  3166  0A2F  0008               	return
  3167  0A30                     __end_of_keypad_scanner:	
  3168                           
  3169                           	psect	text3
  3170  0B95                     __ptext3:	
  3171 ;; *************** function _sprintf *****************
  3172 ;; Defined at:
  3173 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  3174 ;; Parameters:    Size  Location     Type
  3175 ;;  sp              1    wreg     PTR unsigned char 
  3176 ;;		 -> main@buffer(20), 
  3177 ;;  f               2   57[BANK0 ] PTR const unsigned char 
  3178 ;;		 -> STR_10(3), STR_9(3), STR_8(3), STR_7(3), 
  3179 ;;		 -> STR_6(3), STR_5(3), STR_4(3), STR_3(3), 
  3180 ;;		 -> STR_2(3), STR_1(3), 
  3181 ;; Auto vars:     Size  Location     Type
  3182 ;;  sp              1   22[BANK1 ] PTR unsigned char 
  3183 ;;		 -> main@buffer(20), 
  3184 ;;  tmpval          4   14[BANK1 ] struct .
  3185 ;;  val             4    8[BANK1 ] unsigned long 
  3186 ;;  fval            3   18[BANK1 ] unsigned long 
  3187 ;;  exp             2   12[BANK1 ] int 
  3188 ;;  prec            2    6[BANK1 ] int 
  3189 ;;  flag            2    4[BANK1 ] unsigned short 
  3190 ;;  cp              2    0        PTR const unsigned char 
  3191 ;;  len             2    0        unsigned int 
  3192 ;;  width           2    0        int 
  3193 ;;  c               1   21[BANK1 ] char 
  3194 ;;  ap              1    3[BANK1 ] PTR void [1]
  3195 ;;		 -> ?_sprintf(2), 
  3196 ;;  d               1    0        unsigned char 
  3197 ;; Return value:  Size  Location     Type
  3198 ;;                  2   57[BANK0 ] int 
  3199 ;; Registers used:
  3200 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3201 ;; Tracked objects:
  3202 ;;		On entry : 0/0
  3203 ;;		On exit  : 0/0
  3204 ;;		Unchanged: 0/0
  3205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3206 ;;      Params:         0       5       0       0       0       0       0       0
  3207 ;;      Locals:         0       0      23       0       0       0       0       0
  3208 ;;      Temps:          0       6       0       0       0       0       0       0
  3209 ;;      Totals:         0      11      23       0       0       0       0       0
  3210 ;;Total ram usage:       34 bytes
  3211 ;; Hardware stack levels used:    1
  3212 ;; Hardware stack levels required when called:    3
  3213 ;; This function calls:
  3214 ;;		___awdiv
  3215 ;;		___ftadd
  3216 ;;		___ftge
  3217 ;;		___ftmul
  3218 ;;		___ftneg
  3219 ;;		___ftsub
  3220 ;;		___fttol
  3221 ;;		___lldiv
  3222 ;;		___llmod
  3223 ;;		___lltoft
  3224 ;;		___wmul
  3225 ;;		__div_to_l_
  3226 ;;		__tdiv_to_l_
  3227 ;;		_fround
  3228 ;;		_scale
  3229 ;; This function is called by:
  3230 ;;		_main
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           
  3235                           ;psect for function _sprintf
  3236  0B95                     _sprintf:	
  3237                           
  3238                           ;incstack = 0
  3239                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3240                           ;sprintf@sp stored from wreg
  3241  0B95  0021               	movlb	1	; select bank1
  3242  0B96  00B6               	movwf	sprintf@sp^(0+128)
  3243                           
  3244                           ;doprnt.c: 494: va_list ap;
  3245                           ;doprnt.c: 499: signed char c;
  3246                           ;doprnt.c: 501: int width;
  3247                           ;doprnt.c: 504: int prec;
  3248                           ;doprnt.c: 508: unsigned short flag;
  3249                           ;doprnt.c: 515: char d;
  3250                           ;doprnt.c: 516: double fval;
  3251                           ;doprnt.c: 517: int exp;
  3252                           ;doprnt.c: 523: union {
  3253                           ;doprnt.c: 524: unsigned long vd;
  3254                           ;doprnt.c: 525: double integ;
  3255                           ;doprnt.c: 526: } tmpval;
  3256                           ;doprnt.c: 528: unsigned long val;
  3257                           ;doprnt.c: 529: unsigned len;
  3258                           ;doprnt.c: 530: const char * cp;
  3259                           ;doprnt.c: 533: *ap = __va_start();
  3260  0B97  305B               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  3261  0B98  0020               	movlb	0	; select bank0
  3262  0B99  00DE               	movwf	??_sprintf
  3263  0B9A  085E               	movf	??_sprintf,w
  3264  0B9B  0021               	movlb	1	; select bank1
  3265  0B9C  00A3               	movwf	sprintf@ap^(0+128)
  3266  0B9D                     l3020:	
  3267                           ;doprnt.c: 536: while(c = *f++) {
  3268                           
  3269  0B9D  0020               	movlb	0	; select bank0
  3270  0B9E  085A               	movf	sprintf@f+1,w
  3271  0B9F  00DF               	movwf	??_sprintf+1
  3272  0BA0  0859               	movf	sprintf@f,w
  3273  0BA1  00DE               	movwf	??_sprintf
  3274  0BA2  0AD9               	incf	sprintf@f,f
  3275  0BA3  1903               	skipnz
  3276  0BA4  0ADA               	incf	sprintf@f+1,f
  3277  0BA5  085E               	movf	??_sprintf,w
  3278  0BA6  0084               	movwf	4
  3279  0BA7  085F               	movf	??_sprintf+1,w
  3280  0BA8  0085               	movwf	5
  3281  0BA9  0800               	movf	0,w	;code access
  3282  0BAA  00E0               	movwf	??_sprintf+2
  3283  0BAB  0860               	movf	??_sprintf+2,w
  3284  0BAC  0021               	movlb	1	; select bank1
  3285  0BAD  00B5               	movwf	sprintf@c^(0+128)
  3286  0BAE  0835               	movf	sprintf@c^(0+128),w
  3287  0BAF  1903               	btfsc	3,2
  3288  0BB0  2FFA               	goto	l3022
  3289                           
  3290                           ;doprnt.c: 538: if(c != '%')
  3291  0BB1  3025               	movlw	37
  3292  0BB2  0635               	xorwf	sprintf@c^(0+128),w
  3293  0BB3  1D03               	btfss	3,2
  3294  0BB4  2BC9               	goto	l2866
  3295                           
  3296                           ;doprnt.c: 543: }
  3297                           ;doprnt.c: 548: flag = 0;
  3298                           
  3299                           ;doprnt.c: 542: continue;
  3300                           
  3301                           ;doprnt.c: 540: {
  3302                           ;doprnt.c: 541: ((*sp++ = (c)));
  3303  0BB5  01A4               	clrf	sprintf@flag^(0+128)
  3304  0BB6  01A5               	clrf	(sprintf@flag+1)^(0+128)
  3305                           
  3306                           ;doprnt.c: 635: switch(c = *f++) {
  3307  0BB7  2BCC               	goto	l2870
  3308  0BB8                     l257:	
  3309                           ;doprnt.c: 662: case 'f':
  3310                           
  3311                           ;doprnt.c: 638: goto alldone;
  3312                           
  3313                           ;doprnt.c: 637: case 0:
  3314                           
  3315                           
  3316                           ;doprnt.c: 663: flag |= 0x400;
  3317  0BB8  1525               	bsf	(sprintf@flag^(0+128)+1),2
  3318                           
  3319                           ;doprnt.c: 664: break;
  3320  0BB9  2BE5               	goto	l2872
  3321  0BBA                     l2862:	
  3322                           ;doprnt.c: 784: case 'c':
  3323                           
  3324                           
  3325                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3326  0BBA  0823               	movf	sprintf@ap^(0+128),w
  3327  0BBB  0086               	movwf	6
  3328  0BBC  0187               	clrf	7
  3329  0BBD  0801               	movf	1,w
  3330  0BBE  0020               	movlb	0	; select bank0
  3331  0BBF  00DE               	movwf	??_sprintf
  3332  0BC0  085E               	movf	??_sprintf,w
  3333  0BC1  0021               	movlb	1	; select bank1
  3334  0BC2  00B5               	movwf	sprintf@c^(0+128)
  3335  0BC3  3002               	movlw	2
  3336  0BC4  0020               	movlb	0	; select bank0
  3337  0BC5  00DE               	movwf	??_sprintf
  3338  0BC6  085E               	movf	??_sprintf,w
  3339  0BC7  0021               	movlb	1	; select bank1
  3340  0BC8  07A3               	addwf	sprintf@ap^(0+128),f
  3341  0BC9                     l2866:	
  3342                           ;doprnt.c: 802: default:
  3343                           
  3344                           
  3345                           ;doprnt.c: 809: ((*sp++ = (c)));
  3346  0BC9  0835               	movf	sprintf@c^(0+128),w
  3347  0BCA  0020               	movlb	0	; select bank0
  3348  0BCB  2FEB               	goto	L10
  3349  0BCC                     l2870:	
  3350                           ;doprnt.c: 822: }
  3351                           
  3352                           ;doprnt.c: 810: continue;
  3353                           
  3354  0BCC  0020               	movlb	0	; select bank0
  3355  0BCD  085A               	movf	sprintf@f+1,w
  3356  0BCE  00DF               	movwf	??_sprintf+1
  3357  0BCF  0859               	movf	sprintf@f,w
  3358  0BD0  00DE               	movwf	??_sprintf
  3359  0BD1  0AD9               	incf	sprintf@f,f
  3360  0BD2  1903               	skipnz
  3361  0BD3  0ADA               	incf	sprintf@f+1,f
  3362  0BD4  085E               	movf	??_sprintf,w
  3363  0BD5  0084               	movwf	4
  3364  0BD6  085F               	movf	??_sprintf+1,w
  3365  0BD7  0085               	movwf	5
  3366  0BD8  0800               	movf	0,w	;code access
  3367  0BD9  0021               	movlb	1	; select bank1
  3368  0BDA  00B5               	movwf	sprintf@c^(0+128)
  3369                           
  3370                           ; Switch size 1, requested type "space"
  3371                           ; Number of cases is 3, Range of values is 0 to 102
  3372                           ; switch strategies available:
  3373                           ; Name         Instructions Cycles
  3374                           ; simple_byte           10     6 (average)
  3375                           ; direct_byte          212     6 (fixed)
  3376                           ; jumptable            260     6 (fixed)
  3377                           ;	Chosen strategy is simple_byte
  3378  0BDB  3A00               	xorlw	0	; case 0
  3379  0BDC  1903               	skipnz
  3380  0BDD  2FFA               	goto	l3022
  3381  0BDE  3A63               	xorlw	99	; case 99
  3382  0BDF  1903               	skipnz
  3383  0BE0  2BBA               	goto	l2862
  3384  0BE1  3A05               	xorlw	5	; case 102
  3385  0BE2  1903               	skipnz
  3386  0BE3  2BB8               	goto	l257
  3387  0BE4  2BC9               	goto	l2866
  3388  0BE5                     l2872:	
  3389                           
  3390                           ;doprnt.c: 825: if(flag & (0x700)) {
  3391  0BE5  3000               	movlw	0
  3392  0BE6  0524               	andwf	sprintf@flag^(0+128),w
  3393  0BE7  0020               	movlb	0	; select bank0
  3394  0BE8  00DE               	movwf	??_sprintf
  3395  0BE9  3007               	movlw	7
  3396  0BEA  0021               	movlb	1	; select bank1
  3397  0BEB  0525               	andwf	(sprintf@flag+1)^(0+128),w
  3398  0BEC  0020               	movlb	0	; select bank0
  3399  0BED  00DF               	movwf	??_sprintf+1
  3400  0BEE  085E               	movf	??_sprintf,w
  3401  0BEF  045F               	iorwf	??_sprintf+1,w
  3402  0BF0  1903               	btfsc	3,2
  3403  0BF1  2FDC               	goto	l3014
  3404                           
  3405                           ;doprnt.c: 829: prec = 6;
  3406  0BF2  3006               	movlw	6
  3407  0BF3  0021               	movlb	1	; select bank1
  3408  0BF4  00A6               	movwf	sprintf@prec^(0+128)
  3409  0BF5  3000               	movlw	0
  3410  0BF6  00A7               	movwf	(sprintf@prec^(0+128)+1)
  3411                           
  3412                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3413  0BF7  0823               	movf	sprintf@ap^(0+128),w
  3414  0BF8  0086               	movwf	6
  3415  0BF9  0187               	clrf	7
  3416  0BFA  3F40               	moviw [0]fsr1
  3417  0BFB  00B2               	movwf	sprintf@fval^(0+128)
  3418  0BFC  3F41               	moviw [1]fsr1
  3419  0BFD  00B3               	movwf	(sprintf@fval+1)^(0+128)
  3420  0BFE  3F42               	moviw [2]fsr1
  3421  0BFF  00B4               	movwf	(sprintf@fval+2)^(0+128)
  3422  0C00  3003               	movlw	3
  3423  0C01  0020               	movlb	0	; select bank0
  3424  0C02  00DE               	movwf	??_sprintf
  3425  0C03  085E               	movf	??_sprintf,w
  3426  0C04  0021               	movlb	1	; select bank1
  3427  0C05  07A3               	addwf	sprintf@ap^(0+128),f
  3428                           
  3429                           ;doprnt.c: 831: if(fval < 0.0) {
  3430  0C06  0832               	movf	sprintf@fval^(0+128),w
  3431  0C07  00F0               	movwf	___ftge@ff1
  3432  0C08  0833               	movf	(sprintf@fval+1)^(0+128),w
  3433  0C09  00F1               	movwf	___ftge@ff1+1
  3434  0C0A  0834               	movf	(sprintf@fval+2)^(0+128),w
  3435  0C0B  00F2               	movwf	___ftge@ff1+2
  3436  0C0C  3000               	movlw	0
  3437  0C0D  00F3               	movwf	___ftge@ff2
  3438  0C0E  3000               	movlw	0
  3439  0C0F  00F4               	movwf	___ftge@ff2+1
  3440  0C10  3000               	movlw	0
  3441  0C11  00F5               	movwf	___ftge@ff2+2
  3442  0C12  3190  20FD  318B   	fcall	___ftge
  3443  0C15  1803               	btfsc	3,0
  3444  0C16  2C2C               	goto	l2886
  3445                           
  3446                           ;doprnt.c: 832: fval = -fval;
  3447  0C17  0021               	movlb	1	; select bank1
  3448  0C18  0832               	movf	sprintf@fval^(0+128),w
  3449  0C19  00F0               	movwf	___ftneg@f1
  3450  0C1A  0833               	movf	(sprintf@fval+1)^(0+128),w
  3451  0C1B  00F1               	movwf	___ftneg@f1+1
  3452  0C1C  0834               	movf	(sprintf@fval+2)^(0+128),w
  3453  0C1D  00F2               	movwf	___ftneg@f1+2
  3454  0C1E  3190  2059  318B   	fcall	___ftneg
  3455  0C21  0870               	movf	?___ftneg,w
  3456  0C22  0021               	movlb	1	; select bank1
  3457  0C23  00B2               	movwf	sprintf@fval^(0+128)
  3458  0C24  0871               	movf	?___ftneg+1,w
  3459  0C25  00B3               	movwf	(sprintf@fval+1)^(0+128)
  3460  0C26  0872               	movf	?___ftneg+2,w
  3461  0C27  00B4               	movwf	(sprintf@fval+2)^(0+128)
  3462                           
  3463                           ;doprnt.c: 833: flag |= 0x03;
  3464  0C28  3003               	movlw	3
  3465  0C29  04A4               	iorwf	sprintf@flag^(0+128),f
  3466  0C2A  3000               	movlw	0
  3467  0C2B  04A5               	iorwf	(sprintf@flag+1)^(0+128),f
  3468  0C2C                     l2886:	
  3469                           
  3470                           ;doprnt.c: 834: }
  3471                           ;doprnt.c: 835: exp = 0;
  3472  0C2C  0021               	movlb	1	; select bank1
  3473  0C2D  01AC               	clrf	sprintf@exp^(0+128)
  3474  0C2E  01AD               	clrf	(sprintf@exp+1)^(0+128)
  3475                           
  3476                           ;doprnt.c: 836: if( fval!=0) {
  3477  0C2F  0834               	movf	(sprintf@fval+2)^(0+128),w
  3478  0C30  0433               	iorwf	(sprintf@fval+1)^(0+128),w
  3479  0C31  0432               	iorwf	sprintf@fval^(0+128),w
  3480  0C32  1903               	skipnz
  3481  0C33  2CEC               	goto	l263
  3482                           
  3483                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3484  0C34  30B2               	movlw	low (sprintf@fval| 0)
  3485  0C35  0086               	movwf	6
  3486  0C36  0187               	clrf	7
  3487  0C37  3F40               	moviw [0]fsr1
  3488  0C38  0020               	movlb	0	; select bank0
  3489  0C39  00DE               	movwf	??_sprintf
  3490  0C3A  3F41               	moviw [1]fsr1
  3491  0C3B  00DF               	movwf	??_sprintf+1
  3492  0C3C  3F42               	moviw [2]fsr1
  3493  0C3D  00E0               	movwf	??_sprintf+2
  3494  0C3E  3F43               	moviw [3]fsr1
  3495  0C3F  00E1               	movwf	??_sprintf+3
  3496  0C40  300F               	movlw	15
  3497  0C41                     u4305:	
  3498  0C41  36E1               	lsrf	??_sprintf+3,f
  3499  0C42  0CE0               	rrf	??_sprintf+2,f
  3500  0C43  0CDF               	rrf	??_sprintf+1,f
  3501  0C44  0CDE               	rrf	??_sprintf,f
  3502  0C45  0B89               	decfsz	9,f
  3503  0C46  2C41               	goto	u4305
  3504  0C47  30FF               	movlw	255
  3505  0C48  055E               	andwf	??_sprintf,w
  3506  0C49  00E2               	movwf	??_sprintf+4
  3507  0C4A  3000               	movlw	0
  3508  0C4B  055F               	andwf	??_sprintf+1,w
  3509  0C4C  00E3               	movwf	??_sprintf+5
  3510  0C4D  0862               	movf	??_sprintf+4,w
  3511  0C4E  3E82               	addlw	130
  3512  0C4F  0021               	movlb	1	; select bank1
  3513  0C50  00AC               	movwf	sprintf@exp^(0+128)
  3514  0C51  30FF               	movlw	255
  3515  0C52  0020               	movlb	0	; select bank0
  3516  0C53  3D63               	addwfc	??_sprintf+5,w
  3517  0C54  0021               	movlb	1	; select bank1
  3518  0C55  00AD               	movwf	(sprintf@exp+1)^(0+128)
  3519                           
  3520                           ;doprnt.c: 838: exp--;
  3521  0C56  30FF               	movlw	255
  3522  0C57  07AC               	addwf	sprintf@exp^(0+128),f
  3523  0C58  30FF               	movlw	255
  3524  0C59  3DAD               	addwfc	(sprintf@exp+1)^(0+128),f
  3525                           
  3526                           ;doprnt.c: 839: exp *= 3;
  3527  0C5A  3003               	movlw	3
  3528  0C5B  0020               	movlb	0	; select bank0
  3529  0C5C  00A4               	movwf	___wmul@multiplier
  3530  0C5D  3000               	movlw	0
  3531  0C5E  00A5               	movwf	___wmul@multiplier+1
  3532  0C5F  0021               	movlb	1	; select bank1
  3533  0C60  082D               	movf	(sprintf@exp+1)^(0+128),w
  3534  0C61  0020               	movlb	0	; select bank0
  3535  0C62  00A7               	movwf	___wmul@multiplicand+1
  3536  0C63  0021               	movlb	1	; select bank1
  3537  0C64  082C               	movf	sprintf@exp^(0+128),w
  3538  0C65  0020               	movlb	0	; select bank0
  3539  0C66  00A6               	movwf	___wmul@multiplicand
  3540  0C67  3190  2079  318B   	fcall	___wmul
  3541  0C6A  0020               	movlb	0	; select bank0
  3542  0C6B  0825               	movf	?___wmul+1,w
  3543  0C6C  0021               	movlb	1	; select bank1
  3544  0C6D  00AD               	movwf	(sprintf@exp+1)^(0+128)
  3545  0C6E  0020               	movlb	0	; select bank0
  3546  0C6F  0824               	movf	?___wmul,w
  3547  0C70  0021               	movlb	1	; select bank1
  3548  0C71  00AC               	movwf	sprintf@exp^(0+128)
  3549                           
  3550                           ;doprnt.c: 840: exp /= 10;
  3551  0C72  300A               	movlw	10
  3552  0C73  00F7               	movwf	___awdiv@divisor
  3553  0C74  3000               	movlw	0
  3554  0C75  00F8               	movwf	___awdiv@divisor+1
  3555  0C76  082D               	movf	(sprintf@exp+1)^(0+128),w
  3556  0C77  00FA               	movwf	___awdiv@dividend+1
  3557  0C78  082C               	movf	sprintf@exp^(0+128),w
  3558  0C79  00F9               	movwf	___awdiv@dividend
  3559  0C7A  3192  2211  318B   	fcall	___awdiv
  3560  0C7D  0878               	movf	?___awdiv+1,w
  3561  0C7E  0021               	movlb	1	; select bank1
  3562  0C7F  00AD               	movwf	(sprintf@exp+1)^(0+128)
  3563  0C80  0877               	movf	?___awdiv,w
  3564  0C81  00AC               	movwf	sprintf@exp^(0+128)
  3565                           
  3566                           ;doprnt.c: 841: if(exp < 0)
  3567  0C82  1FAD               	btfss	(sprintf@exp+1)^(0+128),7
  3568  0C83  2C88               	goto	l2902
  3569                           
  3570                           ;doprnt.c: 842: exp--;
  3571  0C84  30FF               	movlw	255
  3572  0C85  07AC               	addwf	sprintf@exp^(0+128),f
  3573  0C86  30FF               	movlw	255
  3574  0C87  3DAD               	addwfc	(sprintf@exp+1)^(0+128),f
  3575  0C88                     l2902:	
  3576                           
  3577                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3578  0C88  032C               	decf	sprintf@exp^(0+128),w
  3579  0C89  3AFF               	xorlw	255
  3580  0C8A  3180  20A8  318B   	fcall	_scale
  3581  0C8D  0020               	movlb	0	; select bank0
  3582  0C8E  0838               	movf	?_scale,w
  3583  0C8F  0021               	movlb	1	; select bank1
  3584  0C90  00AE               	movwf	sprintf@tmpval^(0+128)
  3585  0C91  0020               	movlb	0	; select bank0
  3586  0C92  0839               	movf	?_scale+1,w
  3587  0C93  0021               	movlb	1	; select bank1
  3588  0C94  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  3589  0C95  0020               	movlb	0	; select bank0
  3590  0C96  083A               	movf	?_scale+2,w
  3591  0C97  0021               	movlb	1	; select bank1
  3592  0C98  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  3593                           
  3594                           ;doprnt.c: 847: tmpval.integ *= fval;
  3595  0C99  0832               	movf	sprintf@fval^(0+128),w
  3596  0C9A  0020               	movlb	0	; select bank0
  3597  0C9B  00A8               	movwf	___ftmul@f1
  3598  0C9C  0021               	movlb	1	; select bank1
  3599  0C9D  0833               	movf	(sprintf@fval+1)^(0+128),w
  3600  0C9E  0020               	movlb	0	; select bank0
  3601  0C9F  00A9               	movwf	___ftmul@f1+1
  3602  0CA0  0021               	movlb	1	; select bank1
  3603  0CA1  0834               	movf	(sprintf@fval+2)^(0+128),w
  3604  0CA2  0020               	movlb	0	; select bank0
  3605  0CA3  00AA               	movwf	___ftmul@f1+2
  3606  0CA4  0021               	movlb	1	; select bank1
  3607  0CA5  082E               	movf	sprintf@tmpval^(0+128),w
  3608  0CA6  0020               	movlb	0	; select bank0
  3609  0CA7  00AB               	movwf	___ftmul@f2
  3610  0CA8  0021               	movlb	1	; select bank1
  3611  0CA9  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  3612  0CAA  0020               	movlb	0	; select bank0
  3613  0CAB  00AC               	movwf	___ftmul@f2+1
  3614  0CAC  0021               	movlb	1	; select bank1
  3615  0CAD  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  3616  0CAE  0020               	movlb	0	; select bank0
  3617  0CAF  00AD               	movwf	___ftmul@f2+2
  3618  0CB0  3195  2539  318B   	fcall	___ftmul
  3619  0CB3  0020               	movlb	0	; select bank0
  3620  0CB4  0828               	movf	?___ftmul,w
  3621  0CB5  0021               	movlb	1	; select bank1
  3622  0CB6  00AE               	movwf	sprintf@tmpval^(0+128)
  3623  0CB7  0020               	movlb	0	; select bank0
  3624  0CB8  0829               	movf	?___ftmul+1,w
  3625  0CB9  0021               	movlb	1	; select bank1
  3626  0CBA  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  3627  0CBB  0020               	movlb	0	; select bank0
  3628  0CBC  082A               	movf	?___ftmul+2,w
  3629  0CBD  0021               	movlb	1	; select bank1
  3630  0CBE  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  3631                           
  3632                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3633  0CBF  082E               	movf	sprintf@tmpval^(0+128),w
  3634  0CC0  00F0               	movwf	___ftge@ff1
  3635  0CC1  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  3636  0CC2  00F1               	movwf	___ftge@ff1+1
  3637  0CC3  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  3638  0CC4  00F2               	movwf	___ftge@ff1+2
  3639  0CC5  3000               	movlw	0
  3640  0CC6  00F3               	movwf	___ftge@ff2
  3641  0CC7  3080               	movlw	128
  3642  0CC8  00F4               	movwf	___ftge@ff2+1
  3643  0CC9  303F               	movlw	63
  3644  0CCA  00F5               	movwf	___ftge@ff2+2
  3645  0CCB  3190  20FD  318B   	fcall	___ftge
  3646  0CCE  1803               	btfsc	3,0
  3647  0CCF  2CD5               	goto	l2910
  3648                           
  3649                           ;doprnt.c: 849: exp--;
  3650  0CD0  30FF               	movlw	255
  3651  0CD1  0021               	movlb	1	; select bank1
  3652  0CD2  07AC               	addwf	sprintf@exp^(0+128),f
  3653  0CD3  30FF               	movlw	255
  3654  0CD4  2CEB               	goto	L6
  3655  0CD5                     l2910:	
  3656                           
  3657                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3658  0CD5  0021               	movlb	1	; select bank1
  3659  0CD6  082E               	movf	sprintf@tmpval^(0+128),w
  3660  0CD7  00F0               	movwf	___ftge@ff1
  3661  0CD8  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  3662  0CD9  00F1               	movwf	___ftge@ff1+1
  3663  0CDA  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  3664  0CDB  00F2               	movwf	___ftge@ff1+2
  3665  0CDC  3000               	movlw	0
  3666  0CDD  00F3               	movwf	___ftge@ff2
  3667  0CDE  3020               	movlw	32
  3668  0CDF  00F4               	movwf	___ftge@ff2+1
  3669  0CE0  3041               	movlw	65
  3670  0CE1  00F5               	movwf	___ftge@ff2+2
  3671  0CE2  3190  20FD  318B   	fcall	___ftge
  3672  0CE5  1C03               	btfss	3,0
  3673  0CE6  2CEC               	goto	l263
  3674                           
  3675                           ;doprnt.c: 851: exp++;
  3676  0CE7  3001               	movlw	1
  3677  0CE8  0021               	movlb	1	; select bank1
  3678  0CE9  07AC               	addwf	sprintf@exp^(0+128),f
  3679  0CEA  3000               	movlw	0
  3680  0CEB                     L6:	
  3681  0CEB  3DAD               	addwfc	(sprintf@exp+1)^(0+128),f
  3682  0CEC                     l263:	
  3683                           
  3684                           ;doprnt.c: 852: }
  3685                           ;doprnt.c: 1112: if(prec <= 12)
  3686  0CEC  0021               	movlb	1	; select bank1
  3687  0CED  0827               	movf	(sprintf@prec+1)^(0+128),w
  3688  0CEE  3A80               	xorlw	128
  3689  0CEF  0020               	movlb	0	; select bank0
  3690  0CF0  00DE               	movwf	??_sprintf
  3691  0CF1  3080               	movlw	128
  3692  0CF2  025E               	subwf	??_sprintf,w
  3693  0CF3  1D03               	skipz
  3694  0CF4  2CF8               	goto	u4345
  3695  0CF5  300D               	movlw	13
  3696  0CF6  0021               	movlb	1	; select bank1
  3697  0CF7  0226               	subwf	sprintf@prec^(0+128),w
  3698  0CF8                     u4345:	
  3699  0CF8  1803               	skipnc
  3700  0CF9  2D21               	goto	l2916
  3701                           
  3702                           ;doprnt.c: 1113: fval += fround(prec);
  3703  0CFA  0021               	movlb	1	; select bank1
  3704  0CFB  0826               	movf	sprintf@prec^(0+128),w
  3705  0CFC  318A  2230  318B   	fcall	_fround
  3706  0CFF  0020               	movlb	0	; select bank0
  3707  0D00  0838               	movf	?_fround,w
  3708  0D01  00C6               	movwf	___ftadd@f1
  3709  0D02  0839               	movf	?_fround+1,w
  3710  0D03  00C7               	movwf	___ftadd@f1+1
  3711  0D04  083A               	movf	?_fround+2,w
  3712  0D05  00C8               	movwf	___ftadd@f1+2
  3713  0D06  0021               	movlb	1	; select bank1
  3714  0D07  0832               	movf	sprintf@fval^(0+128),w
  3715  0D08  0020               	movlb	0	; select bank0
  3716  0D09  00C9               	movwf	___ftadd@f2
  3717  0D0A  0021               	movlb	1	; select bank1
  3718  0D0B  0833               	movf	(sprintf@fval+1)^(0+128),w
  3719  0D0C  0020               	movlb	0	; select bank0
  3720  0D0D  00CA               	movwf	___ftadd@f2+1
  3721  0D0E  0021               	movlb	1	; select bank1
  3722  0D0F  0834               	movf	(sprintf@fval+2)^(0+128),w
  3723  0D10  0020               	movlb	0	; select bank0
  3724  0D11  00CB               	movwf	___ftadd@f2+2
  3725  0D12  3195  25ED  318B   	fcall	___ftadd
  3726  0D15  0020               	movlb	0	; select bank0
  3727  0D16  0846               	movf	?___ftadd,w
  3728  0D17  0021               	movlb	1	; select bank1
  3729  0D18  00B2               	movwf	sprintf@fval^(0+128)
  3730  0D19  0020               	movlb	0	; select bank0
  3731  0D1A  0847               	movf	?___ftadd+1,w
  3732  0D1B  0021               	movlb	1	; select bank1
  3733  0D1C  00B3               	movwf	(sprintf@fval+1)^(0+128)
  3734  0D1D  0020               	movlb	0	; select bank0
  3735  0D1E  0848               	movf	?___ftadd+2,w
  3736  0D1F  0021               	movlb	1	; select bank1
  3737  0D20  00B4               	movwf	(sprintf@fval+2)^(0+128)
  3738  0D21                     l2916:	
  3739                           
  3740                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3741  0D21  0021               	movlb	1	; select bank1
  3742  0D22  082D               	movf	(sprintf@exp+1)^(0+128),w
  3743  0D23  3A80               	xorlw	128
  3744  0D24  0020               	movlb	0	; select bank0
  3745  0D25  00DE               	movwf	??_sprintf
  3746  0D26  3080               	movlw	128
  3747  0D27  025E               	subwf	??_sprintf,w
  3748  0D28  1D03               	skipz
  3749  0D29  2D2D               	goto	u4355
  3750  0D2A  300A               	movlw	10
  3751  0D2B  0021               	movlb	1	; select bank1
  3752  0D2C  022C               	subwf	sprintf@exp^(0+128),w
  3753  0D2D                     u4355:	
  3754  0D2D  1803               	skipnc
  3755  0D2E  2D58               	goto	l2924
  3756  0D2F  0021               	movlb	1	; select bank1
  3757  0D30  0834               	movf	(sprintf@fval+2)^(0+128),w
  3758  0D31  0433               	iorwf	(sprintf@fval+1)^(0+128),w
  3759  0D32  0432               	iorwf	sprintf@fval^(0+128),w
  3760  0D33  1903               	skipnz
  3761  0D34  2DA0               	goto	l2938
  3762  0D35  0832               	movf	sprintf@fval^(0+128),w
  3763  0D36  0020               	movlb	0	; select bank0
  3764  0D37  00C1               	movwf	___fttol@f1
  3765  0D38  0021               	movlb	1	; select bank1
  3766  0D39  0833               	movf	(sprintf@fval+1)^(0+128),w
  3767  0D3A  0020               	movlb	0	; select bank0
  3768  0D3B  00C2               	movwf	___fttol@f1+1
  3769  0D3C  0021               	movlb	1	; select bank1
  3770  0D3D  0834               	movf	(sprintf@fval+2)^(0+128),w
  3771  0D3E  0020               	movlb	0	; select bank0
  3772  0D3F  00C3               	movwf	___fttol@f1+2
  3773  0D40  3192  22C7  318B   	fcall	___fttol
  3774  0D43  0020               	movlb	0	; select bank0
  3775  0D44  0844               	movf	?___fttol+3,w
  3776  0D45  0443               	iorwf	?___fttol+2,w
  3777  0D46  0442               	iorwf	?___fttol+1,w
  3778  0D47  0441               	iorwf	?___fttol,w
  3779  0D48  1D03               	skipz
  3780  0D49  2DA0               	goto	l2938
  3781  0D4A  0021               	movlb	1	; select bank1
  3782  0D4B  082D               	movf	(sprintf@exp+1)^(0+128),w
  3783  0D4C  3A80               	xorlw	128
  3784  0D4D  0020               	movlb	0	; select bank0
  3785  0D4E  00DE               	movwf	??_sprintf
  3786  0D4F  3080               	movlw	128
  3787  0D50  025E               	subwf	??_sprintf,w
  3788  0D51  1D03               	skipz
  3789  0D52  2D56               	goto	u4385
  3790  0D53  3002               	movlw	2
  3791  0D54  0021               	movlb	1	; select bank1
  3792  0D55  022C               	subwf	sprintf@exp^(0+128),w
  3793  0D56                     u4385:	
  3794  0D56  1C03               	skipc
  3795  0D57  2DA0               	goto	l2938
  3796  0D58                     l2924:	
  3797                           
  3798                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3799  0D58  0021               	movlb	1	; select bank1
  3800  0D59  082E               	movf	sprintf@tmpval^(0+128),w
  3801  0D5A  00F0               	movwf	___ftge@ff1
  3802  0D5B  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  3803  0D5C  00F1               	movwf	___ftge@ff1+1
  3804  0D5D  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  3805  0D5E  00F2               	movwf	___ftge@ff1+2
  3806  0D5F  3070               	movlw	112
  3807  0D60  00F3               	movwf	___ftge@ff2
  3808  0D61  3089               	movlw	137
  3809  0D62  00F4               	movwf	___ftge@ff2+1
  3810  0D63  3040               	movlw	64
  3811  0D64  00F5               	movwf	___ftge@ff2+2
  3812  0D65  3190  20FD  318B   	fcall	___ftge
  3813  0D68  1803               	btfsc	3,0
  3814  0D69  2D6C               	goto	l2928
  3815                           
  3816                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3817  0D6A  30F7               	movlw	247
  3818  0D6B  2D6D               	goto	L7
  3819  0D6C                     l2928:	
  3820                           ;doprnt.c: 1122: }else{
  3821                           
  3822                           
  3823                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3824  0D6C  30F8               	movlw	248
  3825  0D6D                     L7:	
  3826  0D6D  0021               	movlb	1	; select bank1
  3827  0D6E  07AC               	addwf	sprintf@exp^(0+128),f
  3828  0D6F  30FF               	movlw	255
  3829  0D70  3DAD               	addwfc	(sprintf@exp+1)^(0+128),f
  3830                           
  3831                           ;doprnt.c: 1124: }
  3832                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3833  0D71  082C               	movf	sprintf@exp^(0+128),w
  3834  0D72  3180  20A8  318B   	fcall	_scale
  3835  0D75  0020               	movlb	0	; select bank0
  3836  0D76  0838               	movf	?_scale,w
  3837  0D77  0021               	movlb	1	; select bank1
  3838  0D78  00AE               	movwf	sprintf@tmpval^(0+128)
  3839  0D79  0020               	movlb	0	; select bank0
  3840  0D7A  0839               	movf	?_scale+1,w
  3841  0D7B  0021               	movlb	1	; select bank1
  3842  0D7C  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  3843  0D7D  0020               	movlb	0	; select bank0
  3844  0D7E  083A               	movf	?_scale+2,w
  3845  0D7F  0021               	movlb	1	; select bank1
  3846  0D80  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  3847                           
  3848                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3849  0D81  0832               	movf	sprintf@fval^(0+128),w
  3850  0D82  00F0               	movwf	__tdiv_to_l_@f1
  3851  0D83  0833               	movf	(sprintf@fval+1)^(0+128),w
  3852  0D84  00F1               	movwf	__tdiv_to_l_@f1+1
  3853  0D85  0834               	movf	(sprintf@fval+2)^(0+128),w
  3854  0D86  00F2               	movwf	__tdiv_to_l_@f1+2
  3855  0D87  082E               	movf	sprintf@tmpval^(0+128),w
  3856  0D88  00F3               	movwf	__tdiv_to_l_@f2
  3857  0D89  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  3858  0D8A  00F4               	movwf	__tdiv_to_l_@f2+1
  3859  0D8B  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  3860  0D8C  00F5               	movwf	__tdiv_to_l_@f2+2
  3861  0D8D  3188  2037  318B   	fcall	__tdiv_to_l_
  3862  0D90  0873               	movf	?__tdiv_to_l_+3,w
  3863  0D91  0021               	movlb	1	; select bank1
  3864  0D92  00AB               	movwf	(sprintf@val+3)^(0+128)
  3865  0D93  0872               	movf	?__tdiv_to_l_+2,w
  3866  0D94  00AA               	movwf	(sprintf@val+2)^(0+128)
  3867  0D95  0871               	movf	?__tdiv_to_l_+1,w
  3868  0D96  00A9               	movwf	(sprintf@val+1)^(0+128)
  3869  0D97  0870               	movf	?__tdiv_to_l_,w
  3870  0D98  00A8               	movwf	sprintf@val^(0+128)
  3871                           
  3872                           ;doprnt.c: 1129: fval = 0.0;
  3873  0D99  3000               	movlw	0
  3874  0D9A  00B2               	movwf	sprintf@fval^(0+128)
  3875  0D9B  3000               	movlw	0
  3876  0D9C  00B3               	movwf	(sprintf@fval+1)^(0+128)
  3877  0D9D  3000               	movlw	0
  3878  0D9E  00B4               	movwf	(sprintf@fval+2)^(0+128)
  3879                           
  3880                           ;doprnt.c: 1130: } else {
  3881  0D9F  2DEE               	goto	l2942
  3882  0DA0                     l2938:	
  3883                           
  3884                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3885  0DA0  0021               	movlb	1	; select bank1
  3886  0DA1  0832               	movf	sprintf@fval^(0+128),w
  3887  0DA2  0020               	movlb	0	; select bank0
  3888  0DA3  00C1               	movwf	___fttol@f1
  3889  0DA4  0021               	movlb	1	; select bank1
  3890  0DA5  0833               	movf	(sprintf@fval+1)^(0+128),w
  3891  0DA6  0020               	movlb	0	; select bank0
  3892  0DA7  00C2               	movwf	___fttol@f1+1
  3893  0DA8  0021               	movlb	1	; select bank1
  3894  0DA9  0834               	movf	(sprintf@fval+2)^(0+128),w
  3895  0DAA  0020               	movlb	0	; select bank0
  3896  0DAB  00C3               	movwf	___fttol@f1+2
  3897  0DAC  3192  22C7  318B   	fcall	___fttol
  3898  0DAF  0020               	movlb	0	; select bank0
  3899  0DB0  0844               	movf	?___fttol+3,w
  3900  0DB1  0021               	movlb	1	; select bank1
  3901  0DB2  00AB               	movwf	(sprintf@val+3)^(0+128)
  3902  0DB3  0020               	movlb	0	; select bank0
  3903  0DB4  0843               	movf	?___fttol+2,w
  3904  0DB5  0021               	movlb	1	; select bank1
  3905  0DB6  00AA               	movwf	(sprintf@val+2)^(0+128)
  3906  0DB7  0020               	movlb	0	; select bank0
  3907  0DB8  0842               	movf	?___fttol+1,w
  3908  0DB9  0021               	movlb	1	; select bank1
  3909  0DBA  00A9               	movwf	(sprintf@val+1)^(0+128)
  3910  0DBB  0020               	movlb	0	; select bank0
  3911  0DBC  0841               	movf	?___fttol,w
  3912  0DBD  0021               	movlb	1	; select bank1
  3913  0DBE  00A8               	movwf	sprintf@val^(0+128)
  3914                           
  3915                           ;doprnt.c: 1132: fval -= (double)val;
  3916  0DBF  082B               	movf	(sprintf@val+3)^(0+128),w
  3917  0DC0  00FB               	movwf	___lltoft@c+3
  3918  0DC1  082A               	movf	(sprintf@val+2)^(0+128),w
  3919  0DC2  00FA               	movwf	___lltoft@c+2
  3920  0DC3  0829               	movf	(sprintf@val+1)^(0+128),w
  3921  0DC4  00F9               	movwf	___lltoft@c+1
  3922  0DC5  0828               	movf	sprintf@val^(0+128),w
  3923  0DC6  00F8               	movwf	___lltoft@c
  3924  0DC7  3190  20D5  318B   	fcall	___lltoft
  3925  0DCA  0878               	movf	?___lltoft,w
  3926  0DCB  0020               	movlb	0	; select bank0
  3927  0DCC  00D3               	movwf	___ftsub@f2
  3928  0DCD  0879               	movf	?___lltoft+1,w
  3929  0DCE  00D4               	movwf	___ftsub@f2+1
  3930  0DCF  087A               	movf	?___lltoft+2,w
  3931  0DD0  00D5               	movwf	___ftsub@f2+2
  3932  0DD1  0021               	movlb	1	; select bank1
  3933  0DD2  0832               	movf	sprintf@fval^(0+128),w
  3934  0DD3  0020               	movlb	0	; select bank0
  3935  0DD4  00D6               	movwf	___ftsub@f1
  3936  0DD5  0021               	movlb	1	; select bank1
  3937  0DD6  0833               	movf	(sprintf@fval+1)^(0+128),w
  3938  0DD7  0020               	movlb	0	; select bank0
  3939  0DD8  00D7               	movwf	___ftsub@f1+1
  3940  0DD9  0021               	movlb	1	; select bank1
  3941  0DDA  0834               	movf	(sprintf@fval+2)^(0+128),w
  3942  0DDB  0020               	movlb	0	; select bank0
  3943  0DDC  00D8               	movwf	___ftsub@f1+2
  3944  0DDD  3190  2095  318B   	fcall	___ftsub
  3945  0DE0  0020               	movlb	0	; select bank0
  3946  0DE1  0853               	movf	?___ftsub,w
  3947  0DE2  0021               	movlb	1	; select bank1
  3948  0DE3  00B2               	movwf	sprintf@fval^(0+128)
  3949  0DE4  0020               	movlb	0	; select bank0
  3950  0DE5  0854               	movf	?___ftsub+1,w
  3951  0DE6  0021               	movlb	1	; select bank1
  3952  0DE7  00B3               	movwf	(sprintf@fval+1)^(0+128)
  3953  0DE8  0020               	movlb	0	; select bank0
  3954  0DE9  0855               	movf	?___ftsub+2,w
  3955  0DEA  0021               	movlb	1	; select bank1
  3956  0DEB  00B4               	movwf	(sprintf@fval+2)^(0+128)
  3957                           
  3958                           ;doprnt.c: 1133: exp = 0;
  3959  0DEC  01AC               	clrf	sprintf@exp^(0+128)
  3960  0DED  01AD               	clrf	(sprintf@exp+1)^(0+128)
  3961  0DEE                     l2942:	
  3962                           
  3963                           ;doprnt.c: 1134: }
  3964                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3965  0DEE  01B5               	clrf	sprintf@c^(0+128)
  3966  0DEF  0AB5               	incf	sprintf@c^(0+128),f
  3967  0DF0  300A               	movlw	10
  3968  0DF1  0635               	xorwf	sprintf@c^(0+128),w
  3969  0DF2  1903               	btfsc	3,2
  3970  0DF3  2E2B               	goto	l2954
  3971  0DF4                     l2948:	
  3972                           
  3973                           ;doprnt.c: 1137: if(val < dpowers[c])
  3974  0DF4  0835               	movf	sprintf@c^(0+128),w
  3975  0DF5  0020               	movlb	0	; select bank0
  3976  0DF6  00DE               	movwf	??_sprintf
  3977  0DF7  01DF               	clrf	??_sprintf+1
  3978  0DF8  35DE               	lslf	??_sprintf,f
  3979  0DF9  0DDF               	rlf	??_sprintf+1,f
  3980  0DFA  35DE               	lslf	??_sprintf,f
  3981  0DFB  0DDF               	rlf	??_sprintf+1,f
  3982  0DFC  302D               	movlw	low (_dpowers| (0+32768))
  3983  0DFD  075E               	addwf	??_sprintf,w
  3984  0DFE  0084               	movwf	4
  3985  0DFF  3098               	movlw	high (_dpowers| (0+32768))
  3986  0E00  3D5F               	addwfc	??_sprintf+1,w
  3987  0E01  0085               	movwf	5
  3988  0E02  3F00               	moviw [0]fsr0
  3989  0E03  00E0               	movwf	??_sprintf+2
  3990  0E04  3F01               	moviw [1]fsr0
  3991  0E05  00E1               	movwf	??_sprintf+3
  3992  0E06  3F02               	moviw [2]fsr0
  3993  0E07  00E2               	movwf	??_sprintf+4
  3994  0E08  3F03               	moviw [3]fsr0
  3995  0E09  00E3               	movwf	??_sprintf+5
  3996  0E0A  0863               	movf	??_sprintf+5,w
  3997  0E0B  0021               	movlb	1	; select bank1
  3998  0E0C  022B               	subwf	(sprintf@val+3)^(0+128),w
  3999  0E0D  1D03               	skipz
  4000  0E0E  2E1F               	goto	u4415
  4001  0E0F  0020               	movlb	0	; select bank0
  4002  0E10  0862               	movf	??_sprintf+4,w
  4003  0E11  0021               	movlb	1	; select bank1
  4004  0E12  022A               	subwf	(sprintf@val+2)^(0+128),w
  4005  0E13  1D03               	skipz
  4006  0E14  2E1F               	goto	u4415
  4007  0E15  0020               	movlb	0	; select bank0
  4008  0E16  0861               	movf	??_sprintf+3,w
  4009  0E17  0021               	movlb	1	; select bank1
  4010  0E18  0229               	subwf	(sprintf@val+1)^(0+128),w
  4011  0E19  1D03               	skipz
  4012  0E1A  2E1F               	goto	u4415
  4013  0E1B  0020               	movlb	0	; select bank0
  4014  0E1C  0860               	movf	??_sprintf+2,w
  4015  0E1D  0021               	movlb	1	; select bank1
  4016  0E1E  0228               	subwf	sprintf@val^(0+128),w
  4017  0E1F                     u4415:	
  4018  0E1F  1C03               	btfss	3,0
  4019  0E20  2E2B               	goto	l2954
  4020                           
  4021                           ;doprnt.c: 1138: break;
  4022  0E21  3001               	movlw	1
  4023  0E22  0020               	movlb	0	; select bank0
  4024  0E23  00DE               	movwf	??_sprintf
  4025  0E24  085E               	movf	??_sprintf,w
  4026  0E25  0021               	movlb	1	; select bank1
  4027  0E26  07B5               	addwf	sprintf@c^(0+128),f
  4028  0E27  300A               	movlw	10
  4029  0E28  0635               	xorwf	sprintf@c^(0+128),w
  4030  0E29  1D03               	btfss	3,2
  4031  0E2A  2DF4               	goto	l2948
  4032  0E2B                     l2954:	
  4033                           
  4034                           ;doprnt.c: 1175: {
  4035                           ;doprnt.c: 1188: if(flag & 0x03)
  4036  0E2B  3003               	movlw	3
  4037  0E2C  0524               	andwf	sprintf@flag^(0+128),w
  4038  0E2D  0020               	movlb	0	; select bank0
  4039  0E2E  00DE               	movwf	??_sprintf
  4040  0E2F  3000               	movlw	0
  4041  0E30  0021               	movlb	1	; select bank1
  4042  0E31  0525               	andwf	(sprintf@flag+1)^(0+128),w
  4043  0E32  0020               	movlb	0	; select bank0
  4044  0E33  00DF               	movwf	??_sprintf+1
  4045  0E34  085E               	movf	??_sprintf,w
  4046  0E35  045F               	iorwf	??_sprintf+1,w
  4047  0E36  1903               	btfsc	3,2
  4048  0E37  2E47               	goto	l2968
  4049                           
  4050                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  4051  0E38  302D               	movlw	45
  4052  0E39                     L11:	
  4053  0E39  00DE               	movwf	??_sprintf
  4054  0E3A  0021               	movlb	1	; select bank1
  4055  0E3B  0836               	movf	sprintf@sp^(0+128),w
  4056  0E3C  0086               	movwf	6
  4057  0E3D  3001               	movlw	1	; select bank2/3
  4058  0E3E  0087               	movwf	7
  4059  0E3F  0020               	movlb	0	; select bank0
  4060  0E40  085E               	movf	??_sprintf,w
  4061  0E41  0081               	movwf	1
  4062  0E42  3001               	movlw	1
  4063  0E43  00DE               	movwf	??_sprintf
  4064  0E44  085E               	movf	??_sprintf,w
  4065  0E45  0021               	movlb	1	; select bank1
  4066  0E46  07B6               	addwf	sprintf@sp^(0+128),f
  4067  0E47                     l2968:	
  4068  0E47  30FF               	movlw	255
  4069  0E48  0020               	movlb	0	; select bank0
  4070  0E49  00DE               	movwf	??_sprintf
  4071  0E4A  085E               	movf	??_sprintf,w
  4072  0E4B  0021               	movlb	1	; select bank1
  4073  0E4C  07B5               	addwf	sprintf@c^(0+128),f
  4074  0E4D  0A35               	incf	sprintf@c^(0+128),w
  4075  0E4E  1903               	btfsc	3,2
  4076  0E4F  2EAF               	goto	l2976
  4077                           
  4078                           ;doprnt.c: 1200: {
  4079                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  4080                           
  4081                           ;doprnt.c: 1195: }
  4082                           ;doprnt.c: 1196: while(c--) {
  4083  0E50  0835               	movf	sprintf@c^(0+128),w
  4084  0E51  0020               	movlb	0	; select bank0
  4085  0E52  00DE               	movwf	??_sprintf
  4086  0E53  01DF               	clrf	??_sprintf+1
  4087  0E54  35DE               	lslf	??_sprintf,f
  4088  0E55  0DDF               	rlf	??_sprintf+1,f
  4089  0E56  35DE               	lslf	??_sprintf,f
  4090  0E57  0DDF               	rlf	??_sprintf+1,f
  4091  0E58  302D               	movlw	low (_dpowers| (0+32768))
  4092  0E59  075E               	addwf	??_sprintf,w
  4093  0E5A  0084               	movwf	4
  4094  0E5B  3098               	movlw	high (_dpowers| (0+32768))
  4095  0E5C  3D5F               	addwfc	??_sprintf+1,w
  4096  0E5D  0085               	movwf	5
  4097  0E5E  3F00               	moviw [0]fsr0
  4098  0E5F  00F0               	movwf	___lldiv@divisor
  4099  0E60  3F01               	moviw [1]fsr0
  4100  0E61  00F1               	movwf	___lldiv@divisor+1
  4101  0E62  3F02               	moviw [2]fsr0
  4102  0E63  00F2               	movwf	___lldiv@divisor+2
  4103  0E64  3F03               	moviw [3]fsr0
  4104  0E65  00F3               	movwf	___lldiv@divisor+3
  4105  0E66  0021               	movlb	1	; select bank1
  4106  0E67  082B               	movf	(sprintf@val+3)^(0+128),w
  4107  0E68  00F7               	movwf	___lldiv@dividend+3
  4108  0E69  082A               	movf	(sprintf@val+2)^(0+128),w
  4109  0E6A  00F6               	movwf	___lldiv@dividend+2
  4110  0E6B  0829               	movf	(sprintf@val+1)^(0+128),w
  4111  0E6C  00F5               	movwf	___lldiv@dividend+1
  4112  0E6D  0828               	movf	sprintf@val^(0+128),w
  4113  0E6E  00F4               	movwf	___lldiv@dividend
  4114  0E6F  3191  21BF  318B   	fcall	___lldiv
  4115  0E72  0873               	movf	?___lldiv+3,w
  4116  0E73  0021               	movlb	1	; select bank1
  4117  0E74  00B1               	movwf	(sprintf@tmpval+3)^(0+128)
  4118  0E75  0872               	movf	?___lldiv+2,w
  4119  0E76  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  4120  0E77  0871               	movf	?___lldiv+1,w
  4121  0E78  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  4122  0E79  0870               	movf	?___lldiv,w
  4123  0E7A  00AE               	movwf	sprintf@tmpval^(0+128)
  4124                           
  4125                           ;doprnt.c: 1202: tmpval.vd %= 10;
  4126  0E7B  3000               	movlw	0
  4127  0E7C  00F3               	movwf	___llmod@divisor+3
  4128  0E7D  3000               	movlw	0
  4129  0E7E  00F2               	movwf	___llmod@divisor+2
  4130  0E7F  3000               	movlw	0
  4131  0E80  00F1               	movwf	___llmod@divisor+1
  4132  0E81  300A               	movlw	10
  4133  0E82  00F0               	movwf	___llmod@divisor
  4134  0E83  0831               	movf	(sprintf@tmpval+3)^(0+128),w
  4135  0E84  00F7               	movwf	___llmod@dividend+3
  4136  0E85  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  4137  0E86  00F6               	movwf	___llmod@dividend+2
  4138  0E87  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  4139  0E88  00F5               	movwf	___llmod@dividend+1
  4140  0E89  082E               	movf	sprintf@tmpval^(0+128),w
  4141  0E8A  00F4               	movwf	___llmod@dividend
  4142  0E8B  3191  2138  318B   	fcall	___llmod
  4143  0E8E  0873               	movf	?___llmod+3,w
  4144  0E8F  0021               	movlb	1	; select bank1
  4145  0E90  00B1               	movwf	(sprintf@tmpval+3)^(0+128)
  4146  0E91  0872               	movf	?___llmod+2,w
  4147  0E92  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  4148  0E93  0871               	movf	?___llmod+1,w
  4149  0E94  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  4150  0E95  0870               	movf	?___llmod,w
  4151  0E96  00AE               	movwf	sprintf@tmpval^(0+128)
  4152                           
  4153                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  4154  0E97  082E               	movf	sprintf@tmpval^(0+128),w
  4155  0E98  3E30               	addlw	48
  4156  0E99  0020               	movlb	0	; select bank0
  4157  0E9A  2E39               	goto	L11
  4158  0E9B                     l2970:	
  4159                           ;doprnt.c: 1204: }
  4160                           ;doprnt.c: 1206: }
  4161                           ;doprnt.c: 1207: while(exp > 0) {
  4162                           
  4163                           
  4164                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  4165  0E9B  3030               	movlw	48
  4166  0E9C  0020               	movlb	0	; select bank0
  4167  0E9D  00DE               	movwf	??_sprintf
  4168  0E9E  0021               	movlb	1	; select bank1
  4169  0E9F  0836               	movf	sprintf@sp^(0+128),w
  4170  0EA0  0086               	movwf	6
  4171  0EA1  3001               	movlw	1	; select bank2/3
  4172  0EA2  0087               	movwf	7
  4173  0EA3  0020               	movlb	0	; select bank0
  4174  0EA4  085E               	movf	??_sprintf,w
  4175  0EA5  0081               	movwf	1
  4176  0EA6  3001               	movlw	1
  4177  0EA7  00DE               	movwf	??_sprintf
  4178  0EA8  085E               	movf	??_sprintf,w
  4179  0EA9  0021               	movlb	1	; select bank1
  4180  0EAA  07B6               	addwf	sprintf@sp^(0+128),f
  4181                           
  4182                           ;doprnt.c: 1209: exp--;
  4183  0EAB  30FF               	movlw	255
  4184  0EAC  07AC               	addwf	sprintf@exp^(0+128),f
  4185  0EAD  30FF               	movlw	255
  4186  0EAE  3DAD               	addwfc	(sprintf@exp+1)^(0+128),f
  4187  0EAF                     l2976:	
  4188  0EAF  082D               	movf	(sprintf@exp+1)^(0+128),w
  4189  0EB0  3A80               	xorlw	128
  4190  0EB1  0020               	movlb	0	; select bank0
  4191  0EB2  00DE               	movwf	??_sprintf
  4192  0EB3  3080               	movlw	128
  4193  0EB4  025E               	subwf	??_sprintf,w
  4194  0EB5  1D03               	skipz
  4195  0EB6  2EBA               	goto	u4455
  4196  0EB7  3001               	movlw	1
  4197  0EB8  0021               	movlb	1	; select bank1
  4198  0EB9  022C               	subwf	sprintf@exp^(0+128),w
  4199  0EBA                     u4455:	
  4200  0EBA  1803               	skipnc
  4201  0EBB  2E9B               	goto	l2970
  4202                           
  4203                           ;doprnt.c: 1210: }
  4204                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4205  0EBC  0021               	movlb	1	; select bank1
  4206  0EBD  0827               	movf	(sprintf@prec+1)^(0+128),w
  4207  0EBE  3A80               	xorlw	128
  4208  0EBF  0020               	movlb	0	; select bank0
  4209  0EC0  00DE               	movwf	??_sprintf
  4210  0EC1  3080               	movlw	128
  4211  0EC2  025E               	subwf	??_sprintf,w
  4212  0EC3  1D03               	skipz
  4213  0EC4  2EC8               	goto	u4465
  4214  0EC5  3009               	movlw	9
  4215  0EC6  0021               	movlb	1	; select bank1
  4216  0EC7  0226               	subwf	sprintf@prec^(0+128),w
  4217  0EC8                     u4465:	
  4218  0EC8  1C03               	skipc
  4219  0EC9  2ECC               	goto	l2982
  4220                           
  4221                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4222  0ECA  3008               	movlw	8
  4223  0ECB  2ECE               	goto	L8
  4224  0ECC                     l2982:	
  4225                           
  4226                           ;doprnt.c: 1213: else
  4227                           ;doprnt.c: 1214: c = prec;
  4228  0ECC  0021               	movlb	1	; select bank1
  4229  0ECD  0826               	movf	sprintf@prec^(0+128),w
  4230  0ECE                     L8:	
  4231  0ECE  0020               	movlb	0	; select bank0
  4232  0ECF  00DE               	movwf	??_sprintf
  4233  0ED0  085E               	movf	??_sprintf,w
  4234  0ED1  0021               	movlb	1	; select bank1
  4235  0ED2  00B5               	movwf	sprintf@c^(0+128)
  4236                           
  4237                           ;doprnt.c: 1215: prec -= c;
  4238  0ED3  0835               	movf	sprintf@c^(0+128),w
  4239  0ED4  0020               	movlb	0	; select bank0
  4240  0ED5  00DE               	movwf	??_sprintf
  4241  0ED6  01DF               	clrf	??_sprintf+1
  4242  0ED7  1BDE               	btfsc	??_sprintf,7
  4243  0ED8  03DF               	decf	??_sprintf+1,f
  4244  0ED9  085E               	movf	??_sprintf,w
  4245  0EDA  0021               	movlb	1	; select bank1
  4246  0EDB  02A6               	subwf	sprintf@prec^(0+128),f
  4247  0EDC  0020               	movlb	0	; select bank0
  4248  0EDD  085F               	movf	??_sprintf+1,w
  4249  0EDE  0021               	movlb	1	; select bank1
  4250  0EDF  3BA7               	subwfb	(sprintf@prec+1)^(0+128),f
  4251                           
  4252                           ;doprnt.c: 1219: if(c)
  4253  0EE0  0835               	movf	sprintf@c^(0+128),w
  4254  0EE1  1903               	btfsc	3,2
  4255  0EE2  2EF3               	goto	l2990
  4256                           
  4257                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  4258  0EE3  302E               	movlw	46
  4259  0EE4  0020               	movlb	0	; select bank0
  4260  0EE5  00DE               	movwf	??_sprintf
  4261  0EE6  0021               	movlb	1	; select bank1
  4262  0EE7  0836               	movf	sprintf@sp^(0+128),w
  4263  0EE8  0086               	movwf	6
  4264  0EE9  3001               	movlw	1	; select bank2/3
  4265  0EEA  0087               	movwf	7
  4266  0EEB  0020               	movlb	0	; select bank0
  4267  0EEC  085E               	movf	??_sprintf,w
  4268  0EED  0081               	movwf	1
  4269  0EEE  3001               	movlw	1
  4270  0EEF  00DE               	movwf	??_sprintf
  4271  0EF0  085E               	movf	??_sprintf,w
  4272  0EF1  0021               	movlb	1	; select bank1
  4273  0EF2  07B6               	addwf	sprintf@sp^(0+128),f
  4274  0EF3                     l2990:	
  4275                           
  4276                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4277  0EF3  0835               	movf	sprintf@c^(0+128),w
  4278  0EF4  3180  20A8  318B   	fcall	_scale
  4279  0EF7  0020               	movlb	0	; select bank0
  4280  0EF8  0838               	movf	?_scale,w
  4281  0EF9  0021               	movlb	1	; select bank1
  4282  0EFA  00A0               	movwf	_sprintf$677^(0+128)
  4283  0EFB  0020               	movlb	0	; select bank0
  4284  0EFC  0839               	movf	?_scale+1,w
  4285  0EFD  0021               	movlb	1	; select bank1
  4286  0EFE  00A1               	movwf	(_sprintf$677+1)^(0+128)
  4287  0EFF  0020               	movlb	0	; select bank0
  4288  0F00  083A               	movf	?_scale+2,w
  4289  0F01  0021               	movlb	1	; select bank1
  4290  0F02  00A2               	movwf	(_sprintf$677+2)^(0+128)
  4291                           
  4292                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4293  0F03  0820               	movf	_sprintf$677^(0+128),w
  4294  0F04  0020               	movlb	0	; select bank0
  4295  0F05  00AB               	movwf	___ftmul@f2
  4296  0F06  0021               	movlb	1	; select bank1
  4297  0F07  0821               	movf	(_sprintf$677+1)^(0+128),w
  4298  0F08  0020               	movlb	0	; select bank0
  4299  0F09  00AC               	movwf	___ftmul@f2+1
  4300  0F0A  0021               	movlb	1	; select bank1
  4301  0F0B  0822               	movf	(_sprintf$677+2)^(0+128),w
  4302  0F0C  0020               	movlb	0	; select bank0
  4303  0F0D  00AD               	movwf	___ftmul@f2+2
  4304  0F0E  0021               	movlb	1	; select bank1
  4305  0F0F  0832               	movf	sprintf@fval^(0+128),w
  4306  0F10  0020               	movlb	0	; select bank0
  4307  0F11  00A8               	movwf	___ftmul@f1
  4308  0F12  0021               	movlb	1	; select bank1
  4309  0F13  0833               	movf	(sprintf@fval+1)^(0+128),w
  4310  0F14  0020               	movlb	0	; select bank0
  4311  0F15  00A9               	movwf	___ftmul@f1+1
  4312  0F16  0021               	movlb	1	; select bank1
  4313  0F17  0834               	movf	(sprintf@fval+2)^(0+128),w
  4314  0F18  0020               	movlb	0	; select bank0
  4315  0F19  00AA               	movwf	___ftmul@f1+2
  4316  0F1A  3195  2539  318B   	fcall	___ftmul
  4317  0F1D  0020               	movlb	0	; select bank0
  4318  0F1E  0828               	movf	?___ftmul,w
  4319  0F1F  00C1               	movwf	___fttol@f1
  4320  0F20  0829               	movf	?___ftmul+1,w
  4321  0F21  00C2               	movwf	___fttol@f1+1
  4322  0F22  082A               	movf	?___ftmul+2,w
  4323  0F23  00C3               	movwf	___fttol@f1+2
  4324  0F24  3192  22C7  318B   	fcall	___fttol
  4325  0F27  0020               	movlb	0	; select bank0
  4326  0F28  0844               	movf	?___fttol+3,w
  4327  0F29  0021               	movlb	1	; select bank1
  4328  0F2A  00AB               	movwf	(sprintf@val+3)^(0+128)
  4329  0F2B  0020               	movlb	0	; select bank0
  4330  0F2C  0843               	movf	?___fttol+2,w
  4331  0F2D  0021               	movlb	1	; select bank1
  4332  0F2E  00AA               	movwf	(sprintf@val+2)^(0+128)
  4333  0F2F  0020               	movlb	0	; select bank0
  4334  0F30  0842               	movf	?___fttol+1,w
  4335  0F31  0021               	movlb	1	; select bank1
  4336  0F32  00A9               	movwf	(sprintf@val+1)^(0+128)
  4337  0F33  0020               	movlb	0	; select bank0
  4338  0F34  0841               	movf	?___fttol,w
  4339  0F35  0021               	movlb	1	; select bank1
  4340  0F36                     L9:	
  4341  0F36  00A8               	movwf	sprintf@val^(0+128)
  4342  0F37  30FF               	movlw	255
  4343  0F38  0020               	movlb	0	; select bank0
  4344  0F39  00DE               	movwf	??_sprintf
  4345  0F3A  085E               	movf	??_sprintf,w
  4346  0F3B  0021               	movlb	1	; select bank1
  4347  0F3C  07B5               	addwf	sprintf@c^(0+128),f
  4348  0F3D  0A35               	incf	sprintf@c^(0+128),w
  4349  0F3E  1903               	btfsc	3,2
  4350  0F3F  2FD7               	goto	l3012
  4351                           
  4352                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4353                           
  4354                           ;doprnt.c: 1228: while(c--) {
  4355  0F40  0835               	movf	sprintf@c^(0+128),w
  4356  0F41  0020               	movlb	0	; select bank0
  4357  0F42  00DE               	movwf	??_sprintf
  4358  0F43  01DF               	clrf	??_sprintf+1
  4359  0F44  35DE               	lslf	??_sprintf,f
  4360  0F45  0DDF               	rlf	??_sprintf+1,f
  4361  0F46  35DE               	lslf	??_sprintf,f
  4362  0F47  0DDF               	rlf	??_sprintf+1,f
  4363  0F48  302D               	movlw	low (_dpowers| (0+32768))
  4364  0F49  075E               	addwf	??_sprintf,w
  4365  0F4A  0084               	movwf	4
  4366  0F4B  3098               	movlw	high (_dpowers| (0+32768))
  4367  0F4C  3D5F               	addwfc	??_sprintf+1,w
  4368  0F4D  0085               	movwf	5
  4369  0F4E  3F00               	moviw [0]fsr0
  4370  0F4F  00F0               	movwf	___lldiv@divisor
  4371  0F50  3F01               	moviw [1]fsr0
  4372  0F51  00F1               	movwf	___lldiv@divisor+1
  4373  0F52  3F02               	moviw [2]fsr0
  4374  0F53  00F2               	movwf	___lldiv@divisor+2
  4375  0F54  3F03               	moviw [3]fsr0
  4376  0F55  00F3               	movwf	___lldiv@divisor+3
  4377  0F56  0021               	movlb	1	; select bank1
  4378  0F57  082B               	movf	(sprintf@val+3)^(0+128),w
  4379  0F58  00F7               	movwf	___lldiv@dividend+3
  4380  0F59  082A               	movf	(sprintf@val+2)^(0+128),w
  4381  0F5A  00F6               	movwf	___lldiv@dividend+2
  4382  0F5B  0829               	movf	(sprintf@val+1)^(0+128),w
  4383  0F5C  00F5               	movwf	___lldiv@dividend+1
  4384  0F5D  0828               	movf	sprintf@val^(0+128),w
  4385  0F5E  00F4               	movwf	___lldiv@dividend
  4386  0F5F  3191  21BF  318B   	fcall	___lldiv
  4387  0F62  0873               	movf	?___lldiv+3,w
  4388  0F63  0021               	movlb	1	; select bank1
  4389  0F64  00B1               	movwf	(sprintf@tmpval+3)^(0+128)
  4390  0F65  0872               	movf	?___lldiv+2,w
  4391  0F66  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  4392  0F67  0871               	movf	?___lldiv+1,w
  4393  0F68  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  4394  0F69  0870               	movf	?___lldiv,w
  4395  0F6A  00AE               	movwf	sprintf@tmpval^(0+128)
  4396                           
  4397                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4398  0F6B  3000               	movlw	0
  4399  0F6C  00F3               	movwf	___llmod@divisor+3
  4400  0F6D  3000               	movlw	0
  4401  0F6E  00F2               	movwf	___llmod@divisor+2
  4402  0F6F  3000               	movlw	0
  4403  0F70  00F1               	movwf	___llmod@divisor+1
  4404  0F71  300A               	movlw	10
  4405  0F72  00F0               	movwf	___llmod@divisor
  4406  0F73  0831               	movf	(sprintf@tmpval+3)^(0+128),w
  4407  0F74  00F7               	movwf	___llmod@dividend+3
  4408  0F75  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  4409  0F76  00F6               	movwf	___llmod@dividend+2
  4410  0F77  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  4411  0F78  00F5               	movwf	___llmod@dividend+1
  4412  0F79  082E               	movf	sprintf@tmpval^(0+128),w
  4413  0F7A  00F4               	movwf	___llmod@dividend
  4414  0F7B  3191  2138  318B   	fcall	___llmod
  4415  0F7E  0873               	movf	?___llmod+3,w
  4416  0F7F  0021               	movlb	1	; select bank1
  4417  0F80  00B1               	movwf	(sprintf@tmpval+3)^(0+128)
  4418  0F81  0872               	movf	?___llmod+2,w
  4419  0F82  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  4420  0F83  0871               	movf	?___llmod+1,w
  4421  0F84  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  4422  0F85  0870               	movf	?___llmod,w
  4423  0F86  00AE               	movwf	sprintf@tmpval^(0+128)
  4424                           
  4425                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4426  0F87  082E               	movf	sprintf@tmpval^(0+128),w
  4427  0F88  3E30               	addlw	48
  4428  0F89  0020               	movlb	0	; select bank0
  4429  0F8A  00DE               	movwf	??_sprintf
  4430  0F8B  0021               	movlb	1	; select bank1
  4431  0F8C  0836               	movf	sprintf@sp^(0+128),w
  4432  0F8D  0086               	movwf	6
  4433  0F8E  3001               	movlw	1	; select bank2/3
  4434  0F8F  0087               	movwf	7
  4435  0F90  0020               	movlb	0	; select bank0
  4436  0F91  085E               	movf	??_sprintf,w
  4437  0F92  0081               	movwf	1
  4438  0F93  3001               	movlw	1
  4439  0F94  00DE               	movwf	??_sprintf
  4440  0F95  085E               	movf	??_sprintf,w
  4441  0F96  0021               	movlb	1	; select bank1
  4442  0F97  07B6               	addwf	sprintf@sp^(0+128),f
  4443                           
  4444                           ;doprnt.c: 1232: val %= dpowers[c];
  4445  0F98  0835               	movf	sprintf@c^(0+128),w
  4446  0F99  0020               	movlb	0	; select bank0
  4447  0F9A  00DE               	movwf	??_sprintf
  4448  0F9B  01DF               	clrf	??_sprintf+1
  4449  0F9C  35DE               	lslf	??_sprintf,f
  4450  0F9D  0DDF               	rlf	??_sprintf+1,f
  4451  0F9E  35DE               	lslf	??_sprintf,f
  4452  0F9F  0DDF               	rlf	??_sprintf+1,f
  4453  0FA0  302D               	movlw	low (_dpowers| (0+32768))
  4454  0FA1  075E               	addwf	??_sprintf,w
  4455  0FA2  0084               	movwf	4
  4456  0FA3  3098               	movlw	high (_dpowers| (0+32768))
  4457  0FA4  3D5F               	addwfc	??_sprintf+1,w
  4458  0FA5  0085               	movwf	5
  4459  0FA6  3F00               	moviw [0]fsr0
  4460  0FA7  00F0               	movwf	___llmod@divisor
  4461  0FA8  3F01               	moviw [1]fsr0
  4462  0FA9  00F1               	movwf	___llmod@divisor+1
  4463  0FAA  3F02               	moviw [2]fsr0
  4464  0FAB  00F2               	movwf	___llmod@divisor+2
  4465  0FAC  3F03               	moviw [3]fsr0
  4466  0FAD  00F3               	movwf	___llmod@divisor+3
  4467  0FAE  0021               	movlb	1	; select bank1
  4468  0FAF  082B               	movf	(sprintf@val+3)^(0+128),w
  4469  0FB0  00F7               	movwf	___llmod@dividend+3
  4470  0FB1  082A               	movf	(sprintf@val+2)^(0+128),w
  4471  0FB2  00F6               	movwf	___llmod@dividend+2
  4472  0FB3  0829               	movf	(sprintf@val+1)^(0+128),w
  4473  0FB4  00F5               	movwf	___llmod@dividend+1
  4474  0FB5  0828               	movf	sprintf@val^(0+128),w
  4475  0FB6  00F4               	movwf	___llmod@dividend
  4476  0FB7  3191  2138  318B   	fcall	___llmod
  4477  0FBA  0873               	movf	?___llmod+3,w
  4478  0FBB  0021               	movlb	1	; select bank1
  4479  0FBC  00AB               	movwf	(sprintf@val+3)^(0+128)
  4480  0FBD  0872               	movf	?___llmod+2,w
  4481  0FBE  00AA               	movwf	(sprintf@val+2)^(0+128)
  4482  0FBF  0871               	movf	?___llmod+1,w
  4483  0FC0  00A9               	movwf	(sprintf@val+1)^(0+128)
  4484  0FC1  0870               	movf	?___llmod,w
  4485  0FC2  2F36               	goto	L9
  4486  0FC3                     l3006:	
  4487                           ;doprnt.c: 1233: }
  4488                           ;doprnt.c: 1235: while(prec) {
  4489                           
  4490                           
  4491                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4492  0FC3  3030               	movlw	48
  4493  0FC4  0020               	movlb	0	; select bank0
  4494  0FC5  00DE               	movwf	??_sprintf
  4495  0FC6  0021               	movlb	1	; select bank1
  4496  0FC7  0836               	movf	sprintf@sp^(0+128),w
  4497  0FC8  0086               	movwf	6
  4498  0FC9  3001               	movlw	1	; select bank2/3
  4499  0FCA  0087               	movwf	7
  4500  0FCB  0020               	movlb	0	; select bank0
  4501  0FCC  085E               	movf	??_sprintf,w
  4502  0FCD  0081               	movwf	1
  4503  0FCE  3001               	movlw	1
  4504  0FCF  00DE               	movwf	??_sprintf
  4505  0FD0  085E               	movf	??_sprintf,w
  4506  0FD1  0021               	movlb	1	; select bank1
  4507  0FD2  07B6               	addwf	sprintf@sp^(0+128),f
  4508                           
  4509                           ;doprnt.c: 1237: prec--;
  4510  0FD3  30FF               	movlw	255
  4511  0FD4  07A6               	addwf	sprintf@prec^(0+128),f
  4512  0FD5  30FF               	movlw	255
  4513  0FD6  3DA7               	addwfc	(sprintf@prec+1)^(0+128),f
  4514  0FD7                     l3012:	
  4515  0FD7  0826               	movf	sprintf@prec^(0+128),w
  4516  0FD8  0427               	iorwf	(sprintf@prec+1)^(0+128),w
  4517  0FD9  1903               	btfsc	3,2
  4518  0FDA  2B9D               	goto	l3020
  4519  0FDB  2FC3               	goto	l3006
  4520  0FDC                     l3014:	
  4521                           ;doprnt.c: 1238: }
  4522                           ;doprnt.c: 1245: continue;
  4523                           
  4524                           
  4525                           ;doprnt.c: 1246: }
  4526                           ;doprnt.c: 1422: {
  4527                           ;doprnt.c: 1438: if(flag & 0x03)
  4528  0FDC  3003               	movlw	3
  4529  0FDD  0021               	movlb	1	; select bank1
  4530  0FDE  0524               	andwf	sprintf@flag^(0+128),w
  4531  0FDF  0020               	movlb	0	; select bank0
  4532  0FE0  00DE               	movwf	??_sprintf
  4533  0FE1  3000               	movlw	0
  4534  0FE2  0021               	movlb	1	; select bank1
  4535  0FE3  0525               	andwf	(sprintf@flag+1)^(0+128),w
  4536  0FE4  0020               	movlb	0	; select bank0
  4537  0FE5  00DF               	movwf	??_sprintf+1
  4538  0FE6  085E               	movf	??_sprintf,w
  4539  0FE7  045F               	iorwf	??_sprintf+1,w
  4540  0FE8  1903               	btfsc	3,2
  4541  0FE9  2B9D               	goto	l3020
  4542                           
  4543                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4544  0FEA  302D               	movlw	45
  4545  0FEB                     L10:	
  4546  0FEB  00DE               	movwf	??_sprintf
  4547  0FEC  0021               	movlb	1	; select bank1
  4548  0FED  0836               	movf	sprintf@sp^(0+128),w
  4549  0FEE  0086               	movwf	6
  4550  0FEF  3001               	movlw	1	; select bank2/3
  4551  0FF0  0087               	movwf	7
  4552  0FF1  0020               	movlb	0	; select bank0
  4553  0FF2  085E               	movf	??_sprintf,w
  4554  0FF3  0081               	movwf	1
  4555  0FF4  3001               	movlw	1
  4556  0FF5  00DE               	movwf	??_sprintf
  4557  0FF6  085E               	movf	??_sprintf,w
  4558  0FF7  0021               	movlb	1	; select bank1
  4559  0FF8  07B6               	addwf	sprintf@sp^(0+128),f
  4560  0FF9  2B9D               	goto	l3020
  4561  0FFA                     l3022:	
  4562                           ;doprnt.c: 1469: }
  4563                           ;doprnt.c: 1533: }
  4564                           ;doprnt.c: 1535: alldone:
  4565                           
  4566                           
  4567                           ;doprnt.c: 1538: *sp = 0;
  4568  0FFA  0836               	movf	sprintf@sp^(0+128),w
  4569  0FFB  0086               	movwf	6
  4570  0FFC  3001               	movlw	1	; select bank2/3
  4571  0FFD  0087               	movwf	7
  4572  0FFE  0181               	clrf	1
  4573  0FFF  0008               	return
  4574  1000                     __end_of_sprintf:	
  4575                           ;doprnt.c: 1540: return 0;
  4576                           ;	Return value of _sprintf is never used
  4577                           
  4578                           
  4579                           	psect	text4
  4580  00A8                     __ptext4:	
  4581 ;; *************** function _scale *****************
  4582 ;; Defined at:
  4583 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  4584 ;; Parameters:    Size  Location     Type
  4585 ;;  scl             1    wreg     char 
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;  scl             1   32[BANK0 ] char 
  4588 ;; Return value:  Size  Location     Type
  4589 ;;                  3   24[BANK0 ] char 
  4590 ;; Registers used:
  4591 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4592 ;; Tracked objects:
  4593 ;;		On entry : 0/0
  4594 ;;		On exit  : 0/0
  4595 ;;		Unchanged: 0/0
  4596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4597 ;;      Params:         0       3       0       0       0       0       0       0
  4598 ;;      Locals:         0       4       0       0       0       0       0       0
  4599 ;;      Temps:          0       2       0       0       0       0       0       0
  4600 ;;      Totals:         0       9       0       0       0       0       0       0
  4601 ;;Total ram usage:        9 bytes
  4602 ;; Hardware stack levels used:    1
  4603 ;; Hardware stack levels required when called:    2
  4604 ;; This function calls:
  4605 ;;		___awdiv
  4606 ;;		___awmod
  4607 ;;		___ftmul
  4608 ;;		___wmul
  4609 ;; This function is called by:
  4610 ;;		_sprintf
  4611 ;; This function uses a non-reentrant model
  4612 ;;
  4613                           
  4614                           
  4615                           ;psect for function _scale
  4616  00A8                     _scale:	
  4617                           
  4618                           ;incstack = 0
  4619                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4620                           ;scale@scl stored from wreg
  4621  00A8  0020               	movlb	0	; select bank0
  4622  00A9  00C0               	movwf	scale@scl
  4623                           
  4624                           ;doprnt.c: 428: if(scl < 0) {
  4625  00AA  1FC0               	btfss	scale@scl,7
  4626  00AB  29CD               	goto	l2508
  4627                           
  4628                           ;doprnt.c: 429: scl = -scl;
  4629  00AC  09C0               	comf	scale@scl,f
  4630  00AD  0AC0               	incf	scale@scl,f
  4631                           
  4632                           ;doprnt.c: 430: if(scl>=110)
  4633  00AE  0840               	movf	scale@scl,w
  4634  00AF  3A80               	xorlw	128
  4635  00B0  3E12               	addlw	-238
  4636  00B1  1C03               	skipc
  4637  00B2  2951               	goto	l2498
  4638                           
  4639                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4640  00B3  300A               	movlw	10
  4641  00B4  00F7               	movwf	___awdiv@divisor
  4642  00B5  3000               	movlw	0
  4643  00B6  00F8               	movwf	___awdiv@divisor+1
  4644  00B7  0840               	movf	scale@scl,w
  4645  00B8  00F2               	movwf	___awmod@dividend
  4646  00B9  01F3               	clrf	___awmod@dividend+1
  4647  00BA  1BF2               	btfsc	___awmod@dividend,7
  4648  00BB  03F3               	decf	___awmod@dividend+1,f
  4649  00BC  3064               	movlw	100
  4650  00BD  00F0               	movwf	___awmod@divisor
  4651  00BE  3000               	movlw	0
  4652  00BF  00F1               	movwf	___awmod@divisor+1
  4653  00C0  3191  217A  3180   	fcall	___awmod
  4654  00C3  0871               	movf	?___awmod+1,w
  4655  00C4  00FA               	movwf	___awdiv@dividend+1
  4656  00C5  0870               	movf	?___awmod,w
  4657  00C6  00F9               	movwf	___awdiv@dividend
  4658  00C7  3192  2211  3180   	fcall	___awdiv
  4659  00CA  0877               	movf	?___awdiv,w
  4660  00CB  3E09               	addlw	9
  4661  00CC  0020               	movlb	0	; select bank0
  4662  00CD  00A4               	movwf	___wmul@multiplier
  4663  00CE  3000               	movlw	0
  4664  00CF  3D78               	addwfc	?___awdiv+1,w
  4665  00D0  00A5               	movwf	___wmul@multiplier+1
  4666  00D1  3003               	movlw	3
  4667  00D2  00A6               	movwf	___wmul@multiplicand
  4668  00D3  3000               	movlw	0
  4669  00D4  00A7               	movwf	___wmul@multiplicand+1
  4670  00D5  3190  2079  3180   	fcall	___wmul
  4671  00D8  0020               	movlb	0	; select bank0
  4672  00D9  0825               	movf	?___wmul+1,w
  4673  00DA  0085               	movwf	5
  4674  00DB  0824               	movf	?___wmul,w
  4675  00DC  0084               	movwf	4
  4676  00DD  3000               	movlw	low (__npowers_| (0+32768))
  4677  00DE  0784               	addwf	4,f
  4678  00DF  3098               	movlw	high (__npowers_| (0+32768))
  4679  00E0  3D85               	addwfc	5,f
  4680  00E1  3F00               	moviw [0]fsr0
  4681  00E2  00A8               	movwf	___ftmul@f1
  4682  00E3  3F01               	moviw [1]fsr0
  4683  00E4  00A9               	movwf	___ftmul@f1+1
  4684  00E5  3F02               	moviw [2]fsr0
  4685  00E6  00AA               	movwf	___ftmul@f1+2
  4686  00E7  3064               	movlw	100
  4687  00E8  00F7               	movwf	___awdiv@divisor
  4688  00E9  3000               	movlw	0
  4689  00EA  00F8               	movwf	___awdiv@divisor+1
  4690  00EB  0840               	movf	scale@scl,w
  4691  00EC  00F9               	movwf	___awdiv@dividend
  4692  00ED  01FA               	clrf	___awdiv@dividend+1
  4693  00EE  1BF9               	btfsc	___awdiv@dividend,7
  4694  00EF  03FA               	decf	___awdiv@dividend+1,f
  4695  00F0  3192  2211  3180   	fcall	___awdiv
  4696  00F3  0877               	movf	?___awdiv,w
  4697  00F4  3E12               	addlw	18
  4698  00F5  0020               	movlb	0	; select bank0
  4699  00F6  00A4               	movwf	___wmul@multiplier
  4700  00F7  3000               	movlw	0
  4701  00F8  3D78               	addwfc	?___awdiv+1,w
  4702  00F9  00A5               	movwf	___wmul@multiplier+1
  4703  00FA  3003               	movlw	3
  4704  00FB  00A6               	movwf	___wmul@multiplicand
  4705  00FC  3000               	movlw	0
  4706  00FD  00A7               	movwf	___wmul@multiplicand+1
  4707  00FE  3190  2079  3180   	fcall	___wmul
  4708  0101  0020               	movlb	0	; select bank0
  4709  0102  0825               	movf	?___wmul+1,w
  4710  0103  0085               	movwf	5
  4711  0104  0824               	movf	?___wmul,w
  4712  0105  0084               	movwf	4
  4713  0106  3000               	movlw	low (__npowers_| (0+32768))
  4714  0107  0784               	addwf	4,f
  4715  0108  3098               	movlw	high (__npowers_| (0+32768))
  4716  0109  3D85               	addwfc	5,f
  4717  010A  3F00               	moviw [0]fsr0
  4718  010B  00AB               	movwf	___ftmul@f2
  4719  010C  3F01               	moviw [1]fsr0
  4720  010D  00AC               	movwf	___ftmul@f2+1
  4721  010E  3F02               	moviw [2]fsr0
  4722  010F  00AD               	movwf	___ftmul@f2+2
  4723  0110  3195  2539  3180   	fcall	___ftmul
  4724  0113  0020               	movlb	0	; select bank0
  4725  0114  0828               	movf	?___ftmul,w
  4726  0115  00BD               	movwf	_scale$676
  4727  0116  0829               	movf	?___ftmul+1,w
  4728  0117  00BE               	movwf	_scale$676+1
  4729  0118  082A               	movf	?___ftmul+2,w
  4730  0119  00BF               	movwf	_scale$676+2
  4731                           
  4732                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4733  011A  0840               	movf	scale@scl,w
  4734  011B  00F2               	movwf	___awmod@dividend
  4735  011C  01F3               	clrf	___awmod@dividend+1
  4736  011D  1BF2               	btfsc	___awmod@dividend,7
  4737  011E  03F3               	decf	___awmod@dividend+1,f
  4738  011F  300A               	movlw	10
  4739  0120  00F0               	movwf	___awmod@divisor
  4740  0121  3000               	movlw	0
  4741  0122  00F1               	movwf	___awmod@divisor+1
  4742  0123  3191  217A  3180   	fcall	___awmod
  4743  0126  0871               	movf	?___awmod+1,w
  4744  0127  0020               	movlb	0	; select bank0
  4745  0128  00A5               	movwf	___wmul@multiplier+1
  4746  0129  0870               	movf	?___awmod,w
  4747  012A  00A4               	movwf	___wmul@multiplier
  4748  012B  3003               	movlw	3
  4749  012C  00A6               	movwf	___wmul@multiplicand
  4750  012D  3000               	movlw	0
  4751  012E  00A7               	movwf	___wmul@multiplicand+1
  4752  012F  3190  2079  3180   	fcall	___wmul
  4753  0132  0020               	movlb	0	; select bank0
  4754  0133  0825               	movf	?___wmul+1,w
  4755  0134  0085               	movwf	5
  4756  0135  0824               	movf	?___wmul,w
  4757  0136  0084               	movwf	4
  4758  0137  3000               	movlw	low (__npowers_| (0+32768))
  4759  0138  0784               	addwf	4,f
  4760  0139  3098               	movlw	high (__npowers_| (0+32768))
  4761  013A  3D85               	addwfc	5,f
  4762  013B  3F00               	moviw [0]fsr0
  4763  013C  00A8               	movwf	___ftmul@f1
  4764  013D  3F01               	moviw [1]fsr0
  4765  013E  00A9               	movwf	___ftmul@f1+1
  4766  013F  3F02               	moviw [2]fsr0
  4767  0140  00AA               	movwf	___ftmul@f1+2
  4768  0141  083D               	movf	_scale$676,w
  4769  0142  00AB               	movwf	___ftmul@f2
  4770  0143  083E               	movf	_scale$676+1,w
  4771  0144  00AC               	movwf	___ftmul@f2+1
  4772  0145  083F               	movf	_scale$676+2,w
  4773  0146  00AD               	movwf	___ftmul@f2+2
  4774  0147  3195  2539         	fcall	___ftmul
  4775  0149  0020               	movlb	0	; select bank0
  4776  014A  0828               	movf	?___ftmul,w
  4777  014B  00B8               	movwf	?_scale
  4778  014C  0829               	movf	?___ftmul+1,w
  4779  014D  00B9               	movwf	?_scale+1
  4780  014E  082A               	movf	?___ftmul+2,w
  4781  014F  00BA               	movwf	?_scale+2
  4782  0150  0008               	return
  4783  0151                     l2498:	
  4784                           
  4785                           ;doprnt.c: 432: else if(scl > 10)
  4786  0151  0840               	movf	scale@scl,w
  4787  0152  3A80               	xorlw	128
  4788  0153  3E75               	addlw	-139
  4789  0154  1C03               	skipc
  4790  0155  29B0               	goto	l2504
  4791                           
  4792                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4793  0156  0840               	movf	scale@scl,w
  4794  0157  00F2               	movwf	___awmod@dividend
  4795  0158  01F3               	clrf	___awmod@dividend+1
  4796  0159  1BF2               	btfsc	___awmod@dividend,7
  4797  015A  03F3               	decf	___awmod@dividend+1,f
  4798  015B  300A               	movlw	10
  4799  015C  00F0               	movwf	___awmod@divisor
  4800  015D  3000               	movlw	0
  4801  015E  00F1               	movwf	___awmod@divisor+1
  4802  015F  3191  217A  3180   	fcall	___awmod
  4803  0162  0871               	movf	?___awmod+1,w
  4804  0163  0020               	movlb	0	; select bank0
  4805  0164  00A5               	movwf	___wmul@multiplier+1
  4806  0165  0870               	movf	?___awmod,w
  4807  0166  00A4               	movwf	___wmul@multiplier
  4808  0167  3003               	movlw	3
  4809  0168  00A6               	movwf	___wmul@multiplicand
  4810  0169  3000               	movlw	0
  4811  016A  00A7               	movwf	___wmul@multiplicand+1
  4812  016B  3190  2079  3180   	fcall	___wmul
  4813  016E  0020               	movlb	0	; select bank0
  4814  016F  0825               	movf	?___wmul+1,w
  4815  0170  0085               	movwf	5
  4816  0171  0824               	movf	?___wmul,w
  4817  0172  0084               	movwf	4
  4818  0173  3000               	movlw	low (__npowers_| (0+32768))
  4819  0174  0784               	addwf	4,f
  4820  0175  3098               	movlw	high (__npowers_| (0+32768))
  4821  0176  3D85               	addwfc	5,f
  4822  0177  3F00               	moviw [0]fsr0
  4823  0178  00A8               	movwf	___ftmul@f1
  4824  0179  3F01               	moviw [1]fsr0
  4825  017A  00A9               	movwf	___ftmul@f1+1
  4826  017B  3F02               	moviw [2]fsr0
  4827  017C  00AA               	movwf	___ftmul@f1+2
  4828  017D  300A               	movlw	10
  4829  017E  00F7               	movwf	___awdiv@divisor
  4830  017F  3000               	movlw	0
  4831  0180  00F8               	movwf	___awdiv@divisor+1
  4832  0181  0840               	movf	scale@scl,w
  4833  0182  00F9               	movwf	___awdiv@dividend
  4834  0183  01FA               	clrf	___awdiv@dividend+1
  4835  0184  1BF9               	btfsc	___awdiv@dividend,7
  4836  0185  03FA               	decf	___awdiv@dividend+1,f
  4837  0186  3192  2211  3180   	fcall	___awdiv
  4838  0189  0877               	movf	?___awdiv,w
  4839  018A  3E09               	addlw	9
  4840  018B  0020               	movlb	0	; select bank0
  4841  018C  00A4               	movwf	___wmul@multiplier
  4842  018D  3000               	movlw	0
  4843  018E  3D78               	addwfc	?___awdiv+1,w
  4844  018F  00A5               	movwf	___wmul@multiplier+1
  4845  0190  3003               	movlw	3
  4846  0191  00A6               	movwf	___wmul@multiplicand
  4847  0192  3000               	movlw	0
  4848  0193  00A7               	movwf	___wmul@multiplicand+1
  4849  0194  3190  2079  3180   	fcall	___wmul
  4850  0197  0020               	movlb	0	; select bank0
  4851  0198  0825               	movf	?___wmul+1,w
  4852  0199  0085               	movwf	5
  4853  019A  0824               	movf	?___wmul,w
  4854  019B  0084               	movwf	4
  4855  019C  3000               	movlw	low (__npowers_| (0+32768))
  4856  019D  0784               	addwf	4,f
  4857  019E  3098               	movlw	high (__npowers_| (0+32768))
  4858  019F  3D85               	addwfc	5,f
  4859  01A0  3F00               	moviw [0]fsr0
  4860  01A1  00AB               	movwf	___ftmul@f2
  4861  01A2  3F01               	moviw [1]fsr0
  4862  01A3  00AC               	movwf	___ftmul@f2+1
  4863  01A4  3F02               	moviw [2]fsr0
  4864  01A5  00AD               	movwf	___ftmul@f2+2
  4865  01A6  3195  2539         	fcall	___ftmul
  4866  01A8  0020               	movlb	0	; select bank0
  4867  01A9  0828               	movf	?___ftmul,w
  4868  01AA  00B8               	movwf	?_scale
  4869  01AB  0829               	movf	?___ftmul+1,w
  4870  01AC  00B9               	movwf	?_scale+1
  4871  01AD  082A               	movf	?___ftmul+2,w
  4872  01AE  00BA               	movwf	?_scale+2
  4873  01AF  0008               	return
  4874  01B0                     l2504:	
  4875                           
  4876                           ;doprnt.c: 434: return _npowers_[scl];
  4877  01B0  0840               	movf	scale@scl,w
  4878  01B1  00BB               	movwf	??_scale
  4879  01B2  01BC               	clrf	??_scale+1
  4880  01B3  083B               	movf	??_scale,w
  4881  01B4  00A4               	movwf	___wmul@multiplier
  4882  01B5  083C               	movf	??_scale+1,w
  4883  01B6  00A5               	movwf	___wmul@multiplier+1
  4884  01B7  3003               	movlw	3
  4885  01B8  00A6               	movwf	___wmul@multiplicand
  4886  01B9  3000               	movlw	0
  4887  01BA  00A7               	movwf	___wmul@multiplicand+1
  4888  01BB  3190  2079         	fcall	___wmul
  4889  01BD  0020               	movlb	0	; select bank0
  4890  01BE  0825               	movf	?___wmul+1,w
  4891  01BF  0085               	movwf	5
  4892  01C0  0824               	movf	?___wmul,w
  4893  01C1  0084               	movwf	4
  4894  01C2  3000               	movlw	low (__npowers_| (0+32768))
  4895  01C3  0784               	addwf	4,f
  4896  01C4  3098               	movlw	high (__npowers_| (0+32768))
  4897  01C5  3D85               	addwfc	5,f
  4898  01C6  3F00               	moviw [0]fsr0
  4899  01C7  00B8               	movwf	?_scale
  4900  01C8  3F01               	moviw [1]fsr0
  4901  01C9  00B9               	movwf	?_scale+1
  4902  01CA  3F02               	moviw [2]fsr0
  4903  01CB  00BA               	movwf	?_scale+2
  4904  01CC  0008               	return
  4905  01CD                     l2508:	
  4906                           
  4907                           ;doprnt.c: 435: }
  4908                           ;doprnt.c: 436: if(scl>=110)
  4909  01CD  0840               	movf	scale@scl,w
  4910  01CE  3A80               	xorlw	128
  4911  01CF  3E12               	addlw	-238
  4912  01D0  1C03               	skipc
  4913  01D1  2A70               	goto	l2516
  4914                           
  4915                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4916  01D2  300A               	movlw	10
  4917  01D3  00F7               	movwf	___awdiv@divisor
  4918  01D4  3000               	movlw	0
  4919  01D5  00F8               	movwf	___awdiv@divisor+1
  4920  01D6  0840               	movf	scale@scl,w
  4921  01D7  00F2               	movwf	___awmod@dividend
  4922  01D8  01F3               	clrf	___awmod@dividend+1
  4923  01D9  1BF2               	btfsc	___awmod@dividend,7
  4924  01DA  03F3               	decf	___awmod@dividend+1,f
  4925  01DB  3064               	movlw	100
  4926  01DC  00F0               	movwf	___awmod@divisor
  4927  01DD  3000               	movlw	0
  4928  01DE  00F1               	movwf	___awmod@divisor+1
  4929  01DF  3191  217A  3180   	fcall	___awmod
  4930  01E2  0871               	movf	?___awmod+1,w
  4931  01E3  00FA               	movwf	___awdiv@dividend+1
  4932  01E4  0870               	movf	?___awmod,w
  4933  01E5  00F9               	movwf	___awdiv@dividend
  4934  01E6  3192  2211  3180   	fcall	___awdiv
  4935  01E9  0877               	movf	?___awdiv,w
  4936  01EA  3E09               	addlw	9
  4937  01EB  0020               	movlb	0	; select bank0
  4938  01EC  00A4               	movwf	___wmul@multiplier
  4939  01ED  3000               	movlw	0
  4940  01EE  3D78               	addwfc	?___awdiv+1,w
  4941  01EF  00A5               	movwf	___wmul@multiplier+1
  4942  01F0  3003               	movlw	3
  4943  01F1  00A6               	movwf	___wmul@multiplicand
  4944  01F2  3000               	movlw	0
  4945  01F3  00A7               	movwf	___wmul@multiplicand+1
  4946  01F4  3190  2079  3180   	fcall	___wmul
  4947  01F7  0020               	movlb	0	; select bank0
  4948  01F8  0825               	movf	?___wmul+1,w
  4949  01F9  0085               	movwf	5
  4950  01FA  0824               	movf	?___wmul,w
  4951  01FB  0084               	movwf	4
  4952  01FC  3055               	movlw	low (__powers_| (0+32768))
  4953  01FD  0784               	addwf	4,f
  4954  01FE  3098               	movlw	high (__powers_| (0+32768))
  4955  01FF  3D85               	addwfc	5,f
  4956  0200  3F00               	moviw [0]fsr0
  4957  0201  00A8               	movwf	___ftmul@f1
  4958  0202  3F01               	moviw [1]fsr0
  4959  0203  00A9               	movwf	___ftmul@f1+1
  4960  0204  3F02               	moviw [2]fsr0
  4961  0205  00AA               	movwf	___ftmul@f1+2
  4962  0206  3064               	movlw	100
  4963  0207  00F7               	movwf	___awdiv@divisor
  4964  0208  3000               	movlw	0
  4965  0209  00F8               	movwf	___awdiv@divisor+1
  4966  020A  0840               	movf	scale@scl,w
  4967  020B  00F9               	movwf	___awdiv@dividend
  4968  020C  01FA               	clrf	___awdiv@dividend+1
  4969  020D  1BF9               	btfsc	___awdiv@dividend,7
  4970  020E  03FA               	decf	___awdiv@dividend+1,f
  4971  020F  3192  2211  3180   	fcall	___awdiv
  4972  0212  0877               	movf	?___awdiv,w
  4973  0213  3E12               	addlw	18
  4974  0214  0020               	movlb	0	; select bank0
  4975  0215  00A4               	movwf	___wmul@multiplier
  4976  0216  3000               	movlw	0
  4977  0217  3D78               	addwfc	?___awdiv+1,w
  4978  0218  00A5               	movwf	___wmul@multiplier+1
  4979  0219  3003               	movlw	3
  4980  021A  00A6               	movwf	___wmul@multiplicand
  4981  021B  3000               	movlw	0
  4982  021C  00A7               	movwf	___wmul@multiplicand+1
  4983  021D  3190  2079  3180   	fcall	___wmul
  4984  0220  0020               	movlb	0	; select bank0
  4985  0221  0825               	movf	?___wmul+1,w
  4986  0222  0085               	movwf	5
  4987  0223  0824               	movf	?___wmul,w
  4988  0224  0084               	movwf	4
  4989  0225  3055               	movlw	low (__powers_| (0+32768))
  4990  0226  0784               	addwf	4,f
  4991  0227  3098               	movlw	high (__powers_| (0+32768))
  4992  0228  3D85               	addwfc	5,f
  4993  0229  3F00               	moviw [0]fsr0
  4994  022A  00AB               	movwf	___ftmul@f2
  4995  022B  3F01               	moviw [1]fsr0
  4996  022C  00AC               	movwf	___ftmul@f2+1
  4997  022D  3F02               	moviw [2]fsr0
  4998  022E  00AD               	movwf	___ftmul@f2+2
  4999  022F  3195  2539  3180   	fcall	___ftmul
  5000  0232  0020               	movlb	0	; select bank0
  5001  0233  0828               	movf	?___ftmul,w
  5002  0234  00BD               	movwf	_scale$676
  5003  0235  0829               	movf	?___ftmul+1,w
  5004  0236  00BE               	movwf	_scale$676+1
  5005  0237  082A               	movf	?___ftmul+2,w
  5006  0238  00BF               	movwf	_scale$676+2
  5007                           
  5008                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5009  0239  0840               	movf	scale@scl,w
  5010  023A  00F2               	movwf	___awmod@dividend
  5011  023B  01F3               	clrf	___awmod@dividend+1
  5012  023C  1BF2               	btfsc	___awmod@dividend,7
  5013  023D  03F3               	decf	___awmod@dividend+1,f
  5014  023E  300A               	movlw	10
  5015  023F  00F0               	movwf	___awmod@divisor
  5016  0240  3000               	movlw	0
  5017  0241  00F1               	movwf	___awmod@divisor+1
  5018  0242  3191  217A  3180   	fcall	___awmod
  5019  0245  0871               	movf	?___awmod+1,w
  5020  0246  0020               	movlb	0	; select bank0
  5021  0247  00A5               	movwf	___wmul@multiplier+1
  5022  0248  0870               	movf	?___awmod,w
  5023  0249  00A4               	movwf	___wmul@multiplier
  5024  024A  3003               	movlw	3
  5025  024B  00A6               	movwf	___wmul@multiplicand
  5026  024C  3000               	movlw	0
  5027  024D  00A7               	movwf	___wmul@multiplicand+1
  5028  024E  3190  2079  3180   	fcall	___wmul
  5029  0251  0020               	movlb	0	; select bank0
  5030  0252  0825               	movf	?___wmul+1,w
  5031  0253  0085               	movwf	5
  5032  0254  0824               	movf	?___wmul,w
  5033  0255  0084               	movwf	4
  5034  0256  3055               	movlw	low (__powers_| (0+32768))
  5035  0257  0784               	addwf	4,f
  5036  0258  3098               	movlw	high (__powers_| (0+32768))
  5037  0259  3D85               	addwfc	5,f
  5038  025A  3F00               	moviw [0]fsr0
  5039  025B  00A8               	movwf	___ftmul@f1
  5040  025C  3F01               	moviw [1]fsr0
  5041  025D  00A9               	movwf	___ftmul@f1+1
  5042  025E  3F02               	moviw [2]fsr0
  5043  025F  00AA               	movwf	___ftmul@f1+2
  5044  0260  083D               	movf	_scale$676,w
  5045  0261  00AB               	movwf	___ftmul@f2
  5046  0262  083E               	movf	_scale$676+1,w
  5047  0263  00AC               	movwf	___ftmul@f2+1
  5048  0264  083F               	movf	_scale$676+2,w
  5049  0265  00AD               	movwf	___ftmul@f2+2
  5050  0266  3195  2539         	fcall	___ftmul
  5051  0268  0020               	movlb	0	; select bank0
  5052  0269  0828               	movf	?___ftmul,w
  5053  026A  00B8               	movwf	?_scale
  5054  026B  0829               	movf	?___ftmul+1,w
  5055  026C  00B9               	movwf	?_scale+1
  5056  026D  082A               	movf	?___ftmul+2,w
  5057  026E  00BA               	movwf	?_scale+2
  5058  026F  0008               	return
  5059  0270                     l2516:	
  5060                           
  5061                           ;doprnt.c: 438: else if(scl > 10)
  5062  0270  0840               	movf	scale@scl,w
  5063  0271  3A80               	xorlw	128
  5064  0272  3E75               	addlw	-139
  5065  0273  1C03               	skipc
  5066  0274  2ACF               	goto	l2522
  5067                           
  5068                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5069  0275  0840               	movf	scale@scl,w
  5070  0276  00F2               	movwf	___awmod@dividend
  5071  0277  01F3               	clrf	___awmod@dividend+1
  5072  0278  1BF2               	btfsc	___awmod@dividend,7
  5073  0279  03F3               	decf	___awmod@dividend+1,f
  5074  027A  300A               	movlw	10
  5075  027B  00F0               	movwf	___awmod@divisor
  5076  027C  3000               	movlw	0
  5077  027D  00F1               	movwf	___awmod@divisor+1
  5078  027E  3191  217A  3180   	fcall	___awmod
  5079  0281  0871               	movf	?___awmod+1,w
  5080  0282  0020               	movlb	0	; select bank0
  5081  0283  00A5               	movwf	___wmul@multiplier+1
  5082  0284  0870               	movf	?___awmod,w
  5083  0285  00A4               	movwf	___wmul@multiplier
  5084  0286  3003               	movlw	3
  5085  0287  00A6               	movwf	___wmul@multiplicand
  5086  0288  3000               	movlw	0
  5087  0289  00A7               	movwf	___wmul@multiplicand+1
  5088  028A  3190  2079  3180   	fcall	___wmul
  5089  028D  0020               	movlb	0	; select bank0
  5090  028E  0825               	movf	?___wmul+1,w
  5091  028F  0085               	movwf	5
  5092  0290  0824               	movf	?___wmul,w
  5093  0291  0084               	movwf	4
  5094  0292  3055               	movlw	low (__powers_| (0+32768))
  5095  0293  0784               	addwf	4,f
  5096  0294  3098               	movlw	high (__powers_| (0+32768))
  5097  0295  3D85               	addwfc	5,f
  5098  0296  3F00               	moviw [0]fsr0
  5099  0297  00A8               	movwf	___ftmul@f1
  5100  0298  3F01               	moviw [1]fsr0
  5101  0299  00A9               	movwf	___ftmul@f1+1
  5102  029A  3F02               	moviw [2]fsr0
  5103  029B  00AA               	movwf	___ftmul@f1+2
  5104  029C  300A               	movlw	10
  5105  029D  00F7               	movwf	___awdiv@divisor
  5106  029E  3000               	movlw	0
  5107  029F  00F8               	movwf	___awdiv@divisor+1
  5108  02A0  0840               	movf	scale@scl,w
  5109  02A1  00F9               	movwf	___awdiv@dividend
  5110  02A2  01FA               	clrf	___awdiv@dividend+1
  5111  02A3  1BF9               	btfsc	___awdiv@dividend,7
  5112  02A4  03FA               	decf	___awdiv@dividend+1,f
  5113  02A5  3192  2211  3180   	fcall	___awdiv
  5114  02A8  0877               	movf	?___awdiv,w
  5115  02A9  3E09               	addlw	9
  5116  02AA  0020               	movlb	0	; select bank0
  5117  02AB  00A4               	movwf	___wmul@multiplier
  5118  02AC  3000               	movlw	0
  5119  02AD  3D78               	addwfc	?___awdiv+1,w
  5120  02AE  00A5               	movwf	___wmul@multiplier+1
  5121  02AF  3003               	movlw	3
  5122  02B0  00A6               	movwf	___wmul@multiplicand
  5123  02B1  3000               	movlw	0
  5124  02B2  00A7               	movwf	___wmul@multiplicand+1
  5125  02B3  3190  2079  3180   	fcall	___wmul
  5126  02B6  0020               	movlb	0	; select bank0
  5127  02B7  0825               	movf	?___wmul+1,w
  5128  02B8  0085               	movwf	5
  5129  02B9  0824               	movf	?___wmul,w
  5130  02BA  0084               	movwf	4
  5131  02BB  3055               	movlw	low (__powers_| (0+32768))
  5132  02BC  0784               	addwf	4,f
  5133  02BD  3098               	movlw	high (__powers_| (0+32768))
  5134  02BE  3D85               	addwfc	5,f
  5135  02BF  3F00               	moviw [0]fsr0
  5136  02C0  00AB               	movwf	___ftmul@f2
  5137  02C1  3F01               	moviw [1]fsr0
  5138  02C2  00AC               	movwf	___ftmul@f2+1
  5139  02C3  3F02               	moviw [2]fsr0
  5140  02C4  00AD               	movwf	___ftmul@f2+2
  5141  02C5  3195  2539         	fcall	___ftmul
  5142  02C7  0020               	movlb	0	; select bank0
  5143  02C8  0828               	movf	?___ftmul,w
  5144  02C9  00B8               	movwf	?_scale
  5145  02CA  0829               	movf	?___ftmul+1,w
  5146  02CB  00B9               	movwf	?_scale+1
  5147  02CC  082A               	movf	?___ftmul+2,w
  5148  02CD  00BA               	movwf	?_scale+2
  5149  02CE  0008               	return
  5150  02CF                     l2522:	
  5151                           
  5152                           ;doprnt.c: 440: return _powers_[scl];
  5153  02CF  0840               	movf	scale@scl,w
  5154  02D0  00BB               	movwf	??_scale
  5155  02D1  01BC               	clrf	??_scale+1
  5156  02D2  083B               	movf	??_scale,w
  5157  02D3  00A4               	movwf	___wmul@multiplier
  5158  02D4  083C               	movf	??_scale+1,w
  5159  02D5  00A5               	movwf	___wmul@multiplier+1
  5160  02D6  3003               	movlw	3
  5161  02D7  00A6               	movwf	___wmul@multiplicand
  5162  02D8  3000               	movlw	0
  5163  02D9  00A7               	movwf	___wmul@multiplicand+1
  5164  02DA  3190  2079         	fcall	___wmul
  5165  02DC  0020               	movlb	0	; select bank0
  5166  02DD  0825               	movf	?___wmul+1,w
  5167  02DE  0085               	movwf	5
  5168  02DF  0824               	movf	?___wmul,w
  5169  02E0  0084               	movwf	4
  5170  02E1  3055               	movlw	low (__powers_| (0+32768))
  5171  02E2  0784               	addwf	4,f
  5172  02E3  3098               	movlw	high (__powers_| (0+32768))
  5173  02E4  3D85               	addwfc	5,f
  5174  02E5  3F00               	moviw [0]fsr0
  5175  02E6  00B8               	movwf	?_scale
  5176  02E7  3F01               	moviw [1]fsr0
  5177  02E8  00B9               	movwf	?_scale+1
  5178  02E9  3F02               	moviw [2]fsr0
  5179  02EA  00BA               	movwf	?_scale+2
  5180  02EB  0008               	return
  5181  02EC                     __end_of_scale:	
  5182                           
  5183                           	psect	text5
  5184  0A30                     __ptext5:	
  5185 ;; *************** function _fround *****************
  5186 ;; Defined at:
  5187 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;  prec            1    wreg     unsigned char 
  5190 ;; Auto vars:     Size  Location     Type
  5191 ;;  prec            1   37[BANK0 ] unsigned char 
  5192 ;; Return value:  Size  Location     Type
  5193 ;;                  3   24[BANK0 ] unsigned char 
  5194 ;; Registers used:
  5195 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5196 ;; Tracked objects:
  5197 ;;		On entry : 0/0
  5198 ;;		On exit  : 0/0
  5199 ;;		Unchanged: 0/0
  5200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5201 ;;      Params:         0       3       0       0       0       0       0       0
  5202 ;;      Locals:         0       7       0       0       0       0       0       0
  5203 ;;      Temps:          0       4       0       0       0       0       0       0
  5204 ;;      Totals:         0      14       0       0       0       0       0       0
  5205 ;;Total ram usage:       14 bytes
  5206 ;; Hardware stack levels used:    1
  5207 ;; Hardware stack levels required when called:    2
  5208 ;; This function calls:
  5209 ;;		___awdiv
  5210 ;;		___awmod
  5211 ;;		___ftmul
  5212 ;;		___wmul
  5213 ;; This function is called by:
  5214 ;;		_sprintf
  5215 ;; This function uses a non-reentrant model
  5216 ;;
  5217                           
  5218                           
  5219                           ;psect for function _fround
  5220  0A30                     _fround:	
  5221                           
  5222                           ;incstack = 0
  5223                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5224                           ;fround@prec stored from wreg
  5225  0A30  0020               	movlb	0	; select bank0
  5226  0A31  00C5               	movwf	fround@prec
  5227                           
  5228                           ;doprnt.c: 413: if(prec>=110)
  5229  0A32  306E               	movlw	110
  5230  0A33  0245               	subwf	fround@prec,w
  5231  0A34  1C03               	skipc
  5232  0A35  2AF0               	goto	l2474
  5233                           
  5234                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5235  0A36  300A               	movlw	10
  5236  0A37  00F7               	movwf	___awdiv@divisor
  5237  0A38  3000               	movlw	0
  5238  0A39  00F8               	movwf	___awdiv@divisor+1
  5239  0A3A  0845               	movf	fround@prec,w
  5240  0A3B  00BB               	movwf	??_fround
  5241  0A3C  01BC               	clrf	??_fround+1
  5242  0A3D  083B               	movf	??_fround,w
  5243  0A3E  00F2               	movwf	___awmod@dividend
  5244  0A3F  083C               	movf	??_fround+1,w
  5245  0A40  00F3               	movwf	___awmod@dividend+1
  5246  0A41  3064               	movlw	100
  5247  0A42  00F0               	movwf	___awmod@divisor
  5248  0A43  3000               	movlw	0
  5249  0A44  00F1               	movwf	___awmod@divisor+1
  5250  0A45  3191  217A  318A   	fcall	___awmod
  5251  0A48  0871               	movf	?___awmod+1,w
  5252  0A49  00FA               	movwf	___awdiv@dividend+1
  5253  0A4A  0870               	movf	?___awmod,w
  5254  0A4B  00F9               	movwf	___awdiv@dividend
  5255  0A4C  3192  2211  318A   	fcall	___awdiv
  5256  0A4F  0877               	movf	?___awdiv,w
  5257  0A50  3E09               	addlw	9
  5258  0A51  0020               	movlb	0	; select bank0
  5259  0A52  00A4               	movwf	___wmul@multiplier
  5260  0A53  3000               	movlw	0
  5261  0A54  3D78               	addwfc	?___awdiv+1,w
  5262  0A55  00A5               	movwf	___wmul@multiplier+1
  5263  0A56  3003               	movlw	3
  5264  0A57  00A6               	movwf	___wmul@multiplicand
  5265  0A58  3000               	movlw	0
  5266  0A59  00A7               	movwf	___wmul@multiplicand+1
  5267  0A5A  3190  2079  318A   	fcall	___wmul
  5268  0A5D  0020               	movlb	0	; select bank0
  5269  0A5E  0825               	movf	?___wmul+1,w
  5270  0A5F  0085               	movwf	5
  5271  0A60  0824               	movf	?___wmul,w
  5272  0A61  0084               	movwf	4
  5273  0A62  3000               	movlw	low (__npowers_| (0+32768))
  5274  0A63  0784               	addwf	4,f
  5275  0A64  3098               	movlw	high (__npowers_| (0+32768))
  5276  0A65  3D85               	addwfc	5,f
  5277  0A66  3F00               	moviw [0]fsr0
  5278  0A67  00A8               	movwf	___ftmul@f1
  5279  0A68  3F01               	moviw [1]fsr0
  5280  0A69  00A9               	movwf	___ftmul@f1+1
  5281  0A6A  3F02               	moviw [2]fsr0
  5282  0A6B  00AA               	movwf	___ftmul@f1+2
  5283  0A6C  3064               	movlw	100
  5284  0A6D  00F7               	movwf	___awdiv@divisor
  5285  0A6E  3000               	movlw	0
  5286  0A6F  00F8               	movwf	___awdiv@divisor+1
  5287  0A70  0845               	movf	fround@prec,w
  5288  0A71  00BD               	movwf	??_fround+2
  5289  0A72  01BE               	clrf	??_fround+3
  5290  0A73  083D               	movf	??_fround+2,w
  5291  0A74  00F9               	movwf	___awdiv@dividend
  5292  0A75  083E               	movf	??_fround+3,w
  5293  0A76  00FA               	movwf	___awdiv@dividend+1
  5294  0A77  3192  2211  318A   	fcall	___awdiv
  5295  0A7A  0877               	movf	?___awdiv,w
  5296  0A7B  3E12               	addlw	18
  5297  0A7C  0020               	movlb	0	; select bank0
  5298  0A7D  00A4               	movwf	___wmul@multiplier
  5299  0A7E  3000               	movlw	0
  5300  0A7F  3D78               	addwfc	?___awdiv+1,w
  5301  0A80  00A5               	movwf	___wmul@multiplier+1
  5302  0A81  3003               	movlw	3
  5303  0A82  00A6               	movwf	___wmul@multiplicand
  5304  0A83  3000               	movlw	0
  5305  0A84  00A7               	movwf	___wmul@multiplicand+1
  5306  0A85  3190  2079  318A   	fcall	___wmul
  5307  0A88  0020               	movlb	0	; select bank0
  5308  0A89  0825               	movf	?___wmul+1,w
  5309  0A8A  0085               	movwf	5
  5310  0A8B  0824               	movf	?___wmul,w
  5311  0A8C  0084               	movwf	4
  5312  0A8D  3000               	movlw	low (__npowers_| (0+32768))
  5313  0A8E  0784               	addwf	4,f
  5314  0A8F  3098               	movlw	high (__npowers_| (0+32768))
  5315  0A90  3D85               	addwfc	5,f
  5316  0A91  3F00               	moviw [0]fsr0
  5317  0A92  00AB               	movwf	___ftmul@f2
  5318  0A93  3F01               	moviw [1]fsr0
  5319  0A94  00AC               	movwf	___ftmul@f2+1
  5320  0A95  3F02               	moviw [2]fsr0
  5321  0A96  00AD               	movwf	___ftmul@f2+2
  5322  0A97  3195  2539  318A   	fcall	___ftmul
  5323  0A9A  0020               	movlb	0	; select bank0
  5324  0A9B  0828               	movf	?___ftmul,w
  5325  0A9C  00C2               	movwf	_fround$674
  5326  0A9D  0829               	movf	?___ftmul+1,w
  5327  0A9E  00C3               	movwf	_fround$674+1
  5328  0A9F  082A               	movf	?___ftmul+2,w
  5329  0AA0  00C4               	movwf	_fround$674+2
  5330                           
  5331                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5332  0AA1  0845               	movf	fround@prec,w
  5333  0AA2  00BB               	movwf	??_fround
  5334  0AA3  01BC               	clrf	??_fround+1
  5335  0AA4  083B               	movf	??_fround,w
  5336  0AA5  00F2               	movwf	___awmod@dividend
  5337  0AA6  083C               	movf	??_fround+1,w
  5338  0AA7  00F3               	movwf	___awmod@dividend+1
  5339  0AA8  300A               	movlw	10
  5340  0AA9  00F0               	movwf	___awmod@divisor
  5341  0AAA  3000               	movlw	0
  5342  0AAB  00F1               	movwf	___awmod@divisor+1
  5343  0AAC  3191  217A  318A   	fcall	___awmod
  5344  0AAF  0871               	movf	?___awmod+1,w
  5345  0AB0  0020               	movlb	0	; select bank0
  5346  0AB1  00A5               	movwf	___wmul@multiplier+1
  5347  0AB2  0870               	movf	?___awmod,w
  5348  0AB3  00A4               	movwf	___wmul@multiplier
  5349  0AB4  3003               	movlw	3
  5350  0AB5  00A6               	movwf	___wmul@multiplicand
  5351  0AB6  3000               	movlw	0
  5352  0AB7  00A7               	movwf	___wmul@multiplicand+1
  5353  0AB8  3190  2079  318A   	fcall	___wmul
  5354  0ABB  0020               	movlb	0	; select bank0
  5355  0ABC  0825               	movf	?___wmul+1,w
  5356  0ABD  0085               	movwf	5
  5357  0ABE  0824               	movf	?___wmul,w
  5358  0ABF  0084               	movwf	4
  5359  0AC0  3000               	movlw	low (__npowers_| (0+32768))
  5360  0AC1  0784               	addwf	4,f
  5361  0AC2  3098               	movlw	high (__npowers_| (0+32768))
  5362  0AC3  3D85               	addwfc	5,f
  5363  0AC4  3F00               	moviw [0]fsr0
  5364  0AC5  00A8               	movwf	___ftmul@f1
  5365  0AC6  3F01               	moviw [1]fsr0
  5366  0AC7  00A9               	movwf	___ftmul@f1+1
  5367  0AC8  3F02               	moviw [2]fsr0
  5368  0AC9  00AA               	movwf	___ftmul@f1+2
  5369  0ACA  0842               	movf	_fround$674,w
  5370  0ACB  00AB               	movwf	___ftmul@f2
  5371  0ACC  0843               	movf	_fround$674+1,w
  5372  0ACD  00AC               	movwf	___ftmul@f2+1
  5373  0ACE  0844               	movf	_fround$674+2,w
  5374  0ACF  00AD               	movwf	___ftmul@f2+2
  5375  0AD0  3195  2539  318A   	fcall	___ftmul
  5376  0AD3  0020               	movlb	0	; select bank0
  5377  0AD4  0828               	movf	?___ftmul,w
  5378  0AD5  00BF               	movwf	_fround$675
  5379  0AD6  0829               	movf	?___ftmul+1,w
  5380  0AD7  00C0               	movwf	_fround$675+1
  5381  0AD8  082A               	movf	?___ftmul+2,w
  5382  0AD9  00C1               	movwf	_fround$675+2
  5383                           
  5384                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5385  0ADA  3000               	movlw	0
  5386  0ADB  00A8               	movwf	___ftmul@f1
  5387  0ADC  3000               	movlw	0
  5388  0ADD  00A9               	movwf	___ftmul@f1+1
  5389  0ADE  303F               	movlw	63
  5390  0ADF  00AA               	movwf	___ftmul@f1+2
  5391  0AE0  083F               	movf	_fround$675,w
  5392  0AE1  00AB               	movwf	___ftmul@f2
  5393  0AE2  0840               	movf	_fround$675+1,w
  5394  0AE3  00AC               	movwf	___ftmul@f2+1
  5395  0AE4  0841               	movf	_fround$675+2,w
  5396  0AE5  00AD               	movwf	___ftmul@f2+2
  5397  0AE6  3195  2539         	fcall	___ftmul
  5398  0AE8  0020               	movlb	0	; select bank0
  5399  0AE9  0828               	movf	?___ftmul,w
  5400  0AEA  00B8               	movwf	?_fround
  5401  0AEB  0829               	movf	?___ftmul+1,w
  5402  0AEC  00B9               	movwf	?_fround+1
  5403  0AED  082A               	movf	?___ftmul+2,w
  5404  0AEE  00BA               	movwf	?_fround+2
  5405  0AEF  0008               	return
  5406  0AF0                     l2474:	
  5407                           
  5408                           ;doprnt.c: 415: else if(prec > 10)
  5409  0AF0  300B               	movlw	11
  5410  0AF1  0245               	subwf	fround@prec,w
  5411  0AF2  1C03               	skipc
  5412  0AF3  2B68               	goto	l2482
  5413                           
  5414                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5415  0AF4  0845               	movf	fround@prec,w
  5416  0AF5  00BB               	movwf	??_fround
  5417  0AF6  01BC               	clrf	??_fround+1
  5418  0AF7  083B               	movf	??_fround,w
  5419  0AF8  00F2               	movwf	___awmod@dividend
  5420  0AF9  083C               	movf	??_fround+1,w
  5421  0AFA  00F3               	movwf	___awmod@dividend+1
  5422  0AFB  300A               	movlw	10
  5423  0AFC  00F0               	movwf	___awmod@divisor
  5424  0AFD  3000               	movlw	0
  5425  0AFE  00F1               	movwf	___awmod@divisor+1
  5426  0AFF  3191  217A  318A   	fcall	___awmod
  5427  0B02  0871               	movf	?___awmod+1,w
  5428  0B03  0020               	movlb	0	; select bank0
  5429  0B04  00A5               	movwf	___wmul@multiplier+1
  5430  0B05  0870               	movf	?___awmod,w
  5431  0B06  00A4               	movwf	___wmul@multiplier
  5432  0B07  3003               	movlw	3
  5433  0B08  00A6               	movwf	___wmul@multiplicand
  5434  0B09  3000               	movlw	0
  5435  0B0A  00A7               	movwf	___wmul@multiplicand+1
  5436  0B0B  3190  2079  318A   	fcall	___wmul
  5437  0B0E  0020               	movlb	0	; select bank0
  5438  0B0F  0825               	movf	?___wmul+1,w
  5439  0B10  0085               	movwf	5
  5440  0B11  0824               	movf	?___wmul,w
  5441  0B12  0084               	movwf	4
  5442  0B13  3000               	movlw	low (__npowers_| (0+32768))
  5443  0B14  0784               	addwf	4,f
  5444  0B15  3098               	movlw	high (__npowers_| (0+32768))
  5445  0B16  3D85               	addwfc	5,f
  5446  0B17  3F00               	moviw [0]fsr0
  5447  0B18  00A8               	movwf	___ftmul@f1
  5448  0B19  3F01               	moviw [1]fsr0
  5449  0B1A  00A9               	movwf	___ftmul@f1+1
  5450  0B1B  3F02               	moviw [2]fsr0
  5451  0B1C  00AA               	movwf	___ftmul@f1+2
  5452  0B1D  300A               	movlw	10
  5453  0B1E  00F7               	movwf	___awdiv@divisor
  5454  0B1F  3000               	movlw	0
  5455  0B20  00F8               	movwf	___awdiv@divisor+1
  5456  0B21  0845               	movf	fround@prec,w
  5457  0B22  00BD               	movwf	??_fround+2
  5458  0B23  01BE               	clrf	??_fround+3
  5459  0B24  083D               	movf	??_fround+2,w
  5460  0B25  00F9               	movwf	___awdiv@dividend
  5461  0B26  083E               	movf	??_fround+3,w
  5462  0B27  00FA               	movwf	___awdiv@dividend+1
  5463  0B28  3192  2211  318A   	fcall	___awdiv
  5464  0B2B  0877               	movf	?___awdiv,w
  5465  0B2C  3E09               	addlw	9
  5466  0B2D  0020               	movlb	0	; select bank0
  5467  0B2E  00A4               	movwf	___wmul@multiplier
  5468  0B2F  3000               	movlw	0
  5469  0B30  3D78               	addwfc	?___awdiv+1,w
  5470  0B31  00A5               	movwf	___wmul@multiplier+1
  5471  0B32  3003               	movlw	3
  5472  0B33  00A6               	movwf	___wmul@multiplicand
  5473  0B34  3000               	movlw	0
  5474  0B35  00A7               	movwf	___wmul@multiplicand+1
  5475  0B36  3190  2079  318A   	fcall	___wmul
  5476  0B39  0020               	movlb	0	; select bank0
  5477  0B3A  0825               	movf	?___wmul+1,w
  5478  0B3B  0085               	movwf	5
  5479  0B3C  0824               	movf	?___wmul,w
  5480  0B3D  0084               	movwf	4
  5481  0B3E  3000               	movlw	low (__npowers_| (0+32768))
  5482  0B3F  0784               	addwf	4,f
  5483  0B40  3098               	movlw	high (__npowers_| (0+32768))
  5484  0B41  3D85               	addwfc	5,f
  5485  0B42  3F00               	moviw [0]fsr0
  5486  0B43  00AB               	movwf	___ftmul@f2
  5487  0B44  3F01               	moviw [1]fsr0
  5488  0B45  00AC               	movwf	___ftmul@f2+1
  5489  0B46  3F02               	moviw [2]fsr0
  5490  0B47  00AD               	movwf	___ftmul@f2+2
  5491  0B48  3195  2539  318A   	fcall	___ftmul
  5492  0B4B  0020               	movlb	0	; select bank0
  5493  0B4C  0828               	movf	?___ftmul,w
  5494  0B4D  00C2               	movwf	_fround$674
  5495  0B4E  0829               	movf	?___ftmul+1,w
  5496  0B4F  00C3               	movwf	_fround$674+1
  5497  0B50  082A               	movf	?___ftmul+2,w
  5498  0B51  00C4               	movwf	_fround$674+2
  5499                           
  5500                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5501  0B52  3000               	movlw	0
  5502  0B53  00A8               	movwf	___ftmul@f1
  5503  0B54  3000               	movlw	0
  5504  0B55  00A9               	movwf	___ftmul@f1+1
  5505  0B56  303F               	movlw	63
  5506  0B57  00AA               	movwf	___ftmul@f1+2
  5507  0B58  0842               	movf	_fround$674,w
  5508  0B59  00AB               	movwf	___ftmul@f2
  5509  0B5A  0843               	movf	_fround$674+1,w
  5510  0B5B  00AC               	movwf	___ftmul@f2+1
  5511  0B5C  0844               	movf	_fround$674+2,w
  5512  0B5D  00AD               	movwf	___ftmul@f2+2
  5513  0B5E  3195  2539         	fcall	___ftmul
  5514  0B60  0020               	movlb	0	; select bank0
  5515  0B61  0828               	movf	?___ftmul,w
  5516  0B62  00B8               	movwf	?_fround
  5517  0B63  0829               	movf	?___ftmul+1,w
  5518  0B64  00B9               	movwf	?_fround+1
  5519  0B65  082A               	movf	?___ftmul+2,w
  5520  0B66  00BA               	movwf	?_fround+2
  5521  0B67  0008               	return
  5522  0B68                     l2482:	
  5523                           
  5524                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5525  0B68  3000               	movlw	0
  5526  0B69  00A8               	movwf	___ftmul@f1
  5527  0B6A  3000               	movlw	0
  5528  0B6B  00A9               	movwf	___ftmul@f1+1
  5529  0B6C  303F               	movlw	63
  5530  0B6D  00AA               	movwf	___ftmul@f1+2
  5531  0B6E  0845               	movf	fround@prec,w
  5532  0B6F  00BB               	movwf	??_fround
  5533  0B70  01BC               	clrf	??_fround+1
  5534  0B71  083B               	movf	??_fround,w
  5535  0B72  00A4               	movwf	___wmul@multiplier
  5536  0B73  083C               	movf	??_fround+1,w
  5537  0B74  00A5               	movwf	___wmul@multiplier+1
  5538  0B75  3003               	movlw	3
  5539  0B76  00A6               	movwf	___wmul@multiplicand
  5540  0B77  3000               	movlw	0
  5541  0B78  00A7               	movwf	___wmul@multiplicand+1
  5542  0B79  3190  2079  318A   	fcall	___wmul
  5543  0B7C  0020               	movlb	0	; select bank0
  5544  0B7D  0825               	movf	?___wmul+1,w
  5545  0B7E  0085               	movwf	5
  5546  0B7F  0824               	movf	?___wmul,w
  5547  0B80  0084               	movwf	4
  5548  0B81  3000               	movlw	low (__npowers_| (0+32768))
  5549  0B82  0784               	addwf	4,f
  5550  0B83  3098               	movlw	high (__npowers_| (0+32768))
  5551  0B84  3D85               	addwfc	5,f
  5552  0B85  3F00               	moviw [0]fsr0
  5553  0B86  00AB               	movwf	___ftmul@f2
  5554  0B87  3F01               	moviw [1]fsr0
  5555  0B88  00AC               	movwf	___ftmul@f2+1
  5556  0B89  3F02               	moviw [2]fsr0
  5557  0B8A  00AD               	movwf	___ftmul@f2+2
  5558  0B8B  3195  2539         	fcall	___ftmul
  5559  0B8D  0020               	movlb	0	; select bank0
  5560  0B8E  0828               	movf	?___ftmul,w
  5561  0B8F  00B8               	movwf	?_fround
  5562  0B90  0829               	movf	?___ftmul+1,w
  5563  0B91  00B9               	movwf	?_fround+1
  5564  0B92  082A               	movf	?___ftmul+2,w
  5565  0B93  00BA               	movwf	?_fround+2
  5566  0B94  0008               	return
  5567  0B95                     __end_of_fround:	
  5568                           
  5569                           	psect	text6
  5570  1079                     __ptext6:	
  5571 ;; *************** function ___wmul *****************
  5572 ;; Defined at:
  5573 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;  multiplier      2    4[BANK0 ] unsigned int 
  5576 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  5577 ;; Auto vars:     Size  Location     Type
  5578 ;;  product         2   12[COMMON] unsigned int 
  5579 ;; Return value:  Size  Location     Type
  5580 ;;                  2    4[BANK0 ] unsigned int 
  5581 ;; Registers used:
  5582 ;;		wreg, status,2, status,0
  5583 ;; Tracked objects:
  5584 ;;		On entry : 0/0
  5585 ;;		On exit  : 0/0
  5586 ;;		Unchanged: 0/0
  5587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5588 ;;      Params:         0       4       0       0       0       0       0       0
  5589 ;;      Locals:         2       0       0       0       0       0       0       0
  5590 ;;      Temps:          0       0       0       0       0       0       0       0
  5591 ;;      Totals:         2       4       0       0       0       0       0       0
  5592 ;;Total ram usage:        6 bytes
  5593 ;; Hardware stack levels used:    1
  5594 ;; This function calls:
  5595 ;;		Nothing
  5596 ;; This function is called by:
  5597 ;;		_main
  5598 ;;		_fround
  5599 ;;		_scale
  5600 ;;		_sprintf
  5601 ;; This function uses a non-reentrant model
  5602 ;;
  5603                           
  5604                           
  5605                           ;psect for function ___wmul
  5606  1079                     ___wmul:	
  5607                           
  5608                           ;incstack = 0
  5609                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5610  1079  01FC               	clrf	___wmul@product
  5611  107A  01FD               	clrf	___wmul@product+1
  5612  107B                     l2102:	
  5613  107B  0020               	movlb	0	; select bank0
  5614  107C  1C24               	btfss	___wmul@multiplier,0
  5615  107D  2882               	goto	l384
  5616  107E  0826               	movf	___wmul@multiplicand,w
  5617  107F  07FC               	addwf	___wmul@product,f
  5618  1080  0827               	movf	___wmul@multiplicand+1,w
  5619  1081  3DFD               	addwfc	___wmul@product+1,f
  5620  1082                     l384:	
  5621  1082  3001               	movlw	1
  5622  1083                     u2595:	
  5623  1083  35A6               	lslf	___wmul@multiplicand,f
  5624  1084  0DA7               	rlf	___wmul@multiplicand+1,f
  5625  1085  0B89               	decfsz	9,f
  5626  1086  2883               	goto	u2595
  5627  1087  3001               	movlw	1
  5628  1088                     u2605:	
  5629  1088  36A5               	lsrf	___wmul@multiplier+1,f
  5630  1089  0CA4               	rrf	___wmul@multiplier,f
  5631  108A  0B89               	decfsz	9,f
  5632  108B  2888               	goto	u2605
  5633  108C  0824               	movf	___wmul@multiplier,w
  5634  108D  0425               	iorwf	___wmul@multiplier+1,w
  5635  108E  1D03               	btfss	3,2
  5636  108F  287B               	goto	l2102
  5637  1090  087D               	movf	___wmul@product+1,w
  5638  1091  00A5               	movwf	?___wmul+1
  5639  1092  087C               	movf	___wmul@product,w
  5640  1093  00A4               	movwf	?___wmul
  5641  1094  0008               	return
  5642  1095                     __end_of___wmul:	
  5643                           
  5644                           	psect	text7
  5645  1539                     __ptext7:	
  5646 ;; *************** function ___ftmul *****************
  5647 ;; Defined at:
  5648 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  5649 ;; Parameters:    Size  Location     Type
  5650 ;;  f1              3    8[BANK0 ] float 
  5651 ;;  f2              3   11[BANK0 ] float 
  5652 ;; Auto vars:     Size  Location     Type
  5653 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  5654 ;;  sign            1   23[BANK0 ] unsigned char 
  5655 ;;  cntr            1   22[BANK0 ] unsigned char 
  5656 ;;  exp             1   18[BANK0 ] unsigned char 
  5657 ;; Return value:  Size  Location     Type
  5658 ;;                  3    8[BANK0 ] float 
  5659 ;; Registers used:
  5660 ;;		wreg, status,2, status,0, pclath, cstack
  5661 ;; Tracked objects:
  5662 ;;		On entry : 0/0
  5663 ;;		On exit  : 0/0
  5664 ;;		Unchanged: 0/0
  5665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5666 ;;      Params:         0       6       0       0       0       0       0       0
  5667 ;;      Locals:         0       6       0       0       0       0       0       0
  5668 ;;      Temps:          0       4       0       0       0       0       0       0
  5669 ;;      Totals:         0      16       0       0       0       0       0       0
  5670 ;;Total ram usage:       16 bytes
  5671 ;; Hardware stack levels used:    1
  5672 ;; Hardware stack levels required when called:    1
  5673 ;; This function calls:
  5674 ;;		___ftpack
  5675 ;; This function is called by:
  5676 ;;		_main
  5677 ;;		_fround
  5678 ;;		_scale
  5679 ;;		_sprintf
  5680 ;; This function uses a non-reentrant model
  5681 ;;
  5682                           
  5683                           
  5684                           ;psect for function ___ftmul
  5685  1539                     ___ftmul:	
  5686                           
  5687                           ;incstack = 0
  5688                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5689  1539  0020               	movlb	0	; select bank0
  5690  153A  0828               	movf	___ftmul@f1,w
  5691  153B  00AE               	movwf	??___ftmul
  5692  153C  0829               	movf	___ftmul@f1+1,w
  5693  153D  00AF               	movwf	??___ftmul+1
  5694  153E  082A               	movf	___ftmul@f1+2,w
  5695  153F  00B0               	movwf	??___ftmul+2
  5696  1540  1003               	clrc
  5697  1541  0D2F               	rlf	??___ftmul+1,w
  5698  1542  0D30               	rlf	??___ftmul+2,w
  5699  1543  00B1               	movwf	??___ftmul+3
  5700  1544  0831               	movf	??___ftmul+3,w
  5701  1545  00B2               	movwf	___ftmul@exp
  5702  1546  0832               	movf	___ftmul@exp,w
  5703  1547  1D03               	btfss	3,2
  5704  1548  2D50               	goto	l2272
  5705  1549  3000               	movlw	0
  5706  154A  00A8               	movwf	?___ftmul
  5707  154B  3000               	movlw	0
  5708  154C  00A9               	movwf	?___ftmul+1
  5709  154D  3000               	movlw	0
  5710  154E  00AA               	movwf	?___ftmul+2
  5711  154F  0008               	return
  5712  1550                     l2272:	
  5713  1550  082B               	movf	___ftmul@f2,w
  5714  1551  00AE               	movwf	??___ftmul
  5715  1552  082C               	movf	___ftmul@f2+1,w
  5716  1553  00AF               	movwf	??___ftmul+1
  5717  1554  082D               	movf	___ftmul@f2+2,w
  5718  1555  00B0               	movwf	??___ftmul+2
  5719  1556  1003               	clrc
  5720  1557  0D2F               	rlf	??___ftmul+1,w
  5721  1558  0D30               	rlf	??___ftmul+2,w
  5722  1559  00B1               	movwf	??___ftmul+3
  5723  155A  0831               	movf	??___ftmul+3,w
  5724  155B  00B7               	movwf	___ftmul@sign
  5725  155C  0837               	movf	___ftmul@sign,w
  5726  155D  1D03               	btfss	3,2
  5727  155E  2D66               	goto	l2278
  5728  155F  3000               	movlw	0
  5729  1560  00A8               	movwf	?___ftmul
  5730  1561  3000               	movlw	0
  5731  1562  00A9               	movwf	?___ftmul+1
  5732  1563  3000               	movlw	0
  5733  1564  00AA               	movwf	?___ftmul+2
  5734  1565  0008               	return
  5735  1566                     l2278:	
  5736  1566  0837               	movf	___ftmul@sign,w
  5737  1567  3E7B               	addlw	123
  5738  1568  00AE               	movwf	??___ftmul
  5739  1569  082E               	movf	??___ftmul,w
  5740  156A  07B2               	addwf	___ftmul@exp,f
  5741  156B  0828               	movf	___ftmul@f1,w
  5742  156C  00AE               	movwf	??___ftmul
  5743  156D  0829               	movf	___ftmul@f1+1,w
  5744  156E  00AF               	movwf	??___ftmul+1
  5745  156F  082A               	movf	___ftmul@f1+2,w
  5746  1570  00B0               	movwf	??___ftmul+2
  5747  1571  3010               	movlw	16
  5748  1572                     u3065:	
  5749  1572  36B0               	lsrf	??___ftmul+2,f
  5750  1573  0CAF               	rrf	??___ftmul+1,f
  5751  1574  0CAE               	rrf	??___ftmul,f
  5752  1575  0B89               	decfsz	9,f
  5753  1576  2D72               	goto	u3065
  5754  1577  082E               	movf	??___ftmul,w
  5755  1578  00B1               	movwf	??___ftmul+3
  5756  1579  0831               	movf	??___ftmul+3,w
  5757  157A  00B7               	movwf	___ftmul@sign
  5758  157B  082B               	movf	___ftmul@f2,w
  5759  157C  00AE               	movwf	??___ftmul
  5760  157D  082C               	movf	___ftmul@f2+1,w
  5761  157E  00AF               	movwf	??___ftmul+1
  5762  157F  082D               	movf	___ftmul@f2+2,w
  5763  1580  00B0               	movwf	??___ftmul+2
  5764  1581  3010               	movlw	16
  5765  1582                     u3075:	
  5766  1582  36B0               	lsrf	??___ftmul+2,f
  5767  1583  0CAF               	rrf	??___ftmul+1,f
  5768  1584  0CAE               	rrf	??___ftmul,f
  5769  1585  0B89               	decfsz	9,f
  5770  1586  2D82               	goto	u3075
  5771  1587  082E               	movf	??___ftmul,w
  5772  1588  00B1               	movwf	??___ftmul+3
  5773  1589  0831               	movf	??___ftmul+3,w
  5774  158A  06B7               	xorwf	___ftmul@sign,f
  5775  158B  3080               	movlw	128
  5776  158C  00AE               	movwf	??___ftmul
  5777  158D  082E               	movf	??___ftmul,w
  5778  158E  05B7               	andwf	___ftmul@sign,f
  5779  158F  17A9               	bsf	___ftmul@f1+1,7
  5780  1590  17AC               	bsf	___ftmul@f2+1,7
  5781  1591  30FF               	movlw	255
  5782  1592  05AB               	andwf	___ftmul@f2,f
  5783  1593  30FF               	movlw	255
  5784  1594  05AC               	andwf	___ftmul@f2+1,f
  5785  1595  3000               	movlw	0
  5786  1596  05AD               	andwf	___ftmul@f2+2,f
  5787  1597  3000               	movlw	0
  5788  1598  00B3               	movwf	___ftmul@f3_as_product
  5789  1599  3000               	movlw	0
  5790  159A  00B4               	movwf	___ftmul@f3_as_product+1
  5791  159B  3000               	movlw	0
  5792  159C  00B5               	movwf	___ftmul@f3_as_product+2
  5793  159D  3007               	movlw	7
  5794  159E  00AE               	movwf	??___ftmul
  5795  159F  082E               	movf	??___ftmul,w
  5796  15A0  00B6               	movwf	___ftmul@cntr
  5797  15A1                     l2290:	
  5798  15A1  1C28               	btfss	___ftmul@f1,0
  5799  15A2  2DA9               	goto	l2294
  5800  15A3  082B               	movf	___ftmul@f2,w
  5801  15A4  07B3               	addwf	___ftmul@f3_as_product,f
  5802  15A5  082C               	movf	___ftmul@f2+1,w
  5803  15A6  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  5804  15A7  082D               	movf	___ftmul@f2+2,w
  5805  15A8  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  5806  15A9                     l2294:	
  5807  15A9  3001               	movlw	1
  5808  15AA                     u3095:	
  5809  15AA  36AA               	lsrf	___ftmul@f1+2,f
  5810  15AB  0CA9               	rrf	___ftmul@f1+1,f
  5811  15AC  0CA8               	rrf	___ftmul@f1,f
  5812  15AD  0B89               	decfsz	9,f
  5813  15AE  2DAA               	goto	u3095
  5814  15AF  3001               	movlw	1
  5815  15B0                     u3105:	
  5816  15B0  35AB               	lslf	___ftmul@f2,f
  5817  15B1  0DAC               	rlf	___ftmul@f2+1,f
  5818  15B2  0DAD               	rlf	___ftmul@f2+2,f
  5819  15B3  0B89               	decfsz	9,f
  5820  15B4  2DB0               	goto	u3105
  5821  15B5  3001               	movlw	1
  5822  15B6  02B6               	subwf	___ftmul@cntr,f
  5823  15B7  1D03               	btfss	3,2
  5824  15B8  2DA1               	goto	l2290
  5825  15B9  3009               	movlw	9
  5826  15BA  00AE               	movwf	??___ftmul
  5827  15BB  082E               	movf	??___ftmul,w
  5828  15BC  00B6               	movwf	___ftmul@cntr
  5829  15BD                     l2302:	
  5830  15BD  1C28               	btfss	___ftmul@f1,0
  5831  15BE  2DC5               	goto	l2306
  5832  15BF  082B               	movf	___ftmul@f2,w
  5833  15C0  07B3               	addwf	___ftmul@f3_as_product,f
  5834  15C1  082C               	movf	___ftmul@f2+1,w
  5835  15C2  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  5836  15C3  082D               	movf	___ftmul@f2+2,w
  5837  15C4  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  5838  15C5                     l2306:	
  5839  15C5  3001               	movlw	1
  5840  15C6                     u3135:	
  5841  15C6  36AA               	lsrf	___ftmul@f1+2,f
  5842  15C7  0CA9               	rrf	___ftmul@f1+1,f
  5843  15C8  0CA8               	rrf	___ftmul@f1,f
  5844  15C9  0B89               	decfsz	9,f
  5845  15CA  2DC6               	goto	u3135
  5846  15CB  3001               	movlw	1
  5847  15CC                     u3145:	
  5848  15CC  36B5               	lsrf	___ftmul@f3_as_product+2,f
  5849  15CD  0CB4               	rrf	___ftmul@f3_as_product+1,f
  5850  15CE  0CB3               	rrf	___ftmul@f3_as_product,f
  5851  15CF  0B89               	decfsz	9,f
  5852  15D0  2DCC               	goto	u3145
  5853  15D1  3001               	movlw	1
  5854  15D2  02B6               	subwf	___ftmul@cntr,f
  5855  15D3  1D03               	btfss	3,2
  5856  15D4  2DBD               	goto	l2302
  5857  15D5  0833               	movf	___ftmul@f3_as_product,w
  5858  15D6  00F0               	movwf	___ftpack@arg
  5859  15D7  0834               	movf	___ftmul@f3_as_product+1,w
  5860  15D8  00F1               	movwf	___ftpack@arg+1
  5861  15D9  0835               	movf	___ftmul@f3_as_product+2,w
  5862  15DA  00F2               	movwf	___ftpack@arg+2
  5863  15DB  0832               	movf	___ftmul@exp,w
  5864  15DC  00AE               	movwf	??___ftmul
  5865  15DD  082E               	movf	??___ftmul,w
  5866  15DE  00F3               	movwf	___ftpack@exp
  5867  15DF  0837               	movf	___ftmul@sign,w
  5868  15E0  00AF               	movwf	??___ftmul+1
  5869  15E1  082F               	movf	??___ftmul+1,w
  5870  15E2  00F4               	movwf	___ftpack@sign
  5871  15E3  3192  2263         	fcall	___ftpack
  5872  15E5  0870               	movf	?___ftpack,w
  5873  15E6  0020               	movlb	0	; select bank0
  5874  15E7  00A8               	movwf	?___ftmul
  5875  15E8  0871               	movf	?___ftpack+1,w
  5876  15E9  00A9               	movwf	?___ftmul+1
  5877  15EA  0872               	movf	?___ftpack+2,w
  5878  15EB  00AA               	movwf	?___ftmul+2
  5879  15EC  0008               	return
  5880  15ED                     __end_of___ftmul:	
  5881                           
  5882                           	psect	text8
  5883  117A                     __ptext8:	
  5884 ;; *************** function ___awmod *****************
  5885 ;; Defined at:
  5886 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awmod.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;  divisor         2    0[COMMON] int 
  5889 ;;  dividend        2    2[COMMON] int 
  5890 ;; Auto vars:     Size  Location     Type
  5891 ;;  sign            1    6[COMMON] unsigned char 
  5892 ;;  counter         1    5[COMMON] unsigned char 
  5893 ;; Return value:  Size  Location     Type
  5894 ;;                  2    0[COMMON] int 
  5895 ;; Registers used:
  5896 ;;		wreg, status,2, status,0
  5897 ;; Tracked objects:
  5898 ;;		On entry : 0/0
  5899 ;;		On exit  : 0/0
  5900 ;;		Unchanged: 0/0
  5901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5902 ;;      Params:         4       0       0       0       0       0       0       0
  5903 ;;      Locals:         2       0       0       0       0       0       0       0
  5904 ;;      Temps:          1       0       0       0       0       0       0       0
  5905 ;;      Totals:         7       0       0       0       0       0       0       0
  5906 ;;Total ram usage:        7 bytes
  5907 ;; Hardware stack levels used:    1
  5908 ;; This function calls:
  5909 ;;		Nothing
  5910 ;; This function is called by:
  5911 ;;		_fround
  5912 ;;		_scale
  5913 ;; This function uses a non-reentrant model
  5914 ;;
  5915                           
  5916                           
  5917                           ;psect for function ___awmod
  5918  117A                     ___awmod:	
  5919                           
  5920                           ;incstack = 0
  5921                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5922  117A  01F6               	clrf	___awmod@sign
  5923  117B  1FF3               	btfss	___awmod@dividend+1,7
  5924  117C  2984               	goto	l2166
  5925  117D  09F2               	comf	___awmod@dividend,f
  5926  117E  09F3               	comf	___awmod@dividend+1,f
  5927  117F  0AF2               	incf	___awmod@dividend,f
  5928  1180  1903               	skipnz
  5929  1181  0AF3               	incf	___awmod@dividend+1,f
  5930  1182  01F6               	clrf	___awmod@sign
  5931  1183  0AF6               	incf	___awmod@sign,f
  5932  1184                     l2166:	
  5933  1184  1FF1               	btfss	___awmod@divisor+1,7
  5934  1185  298B               	goto	l2170
  5935  1186  09F0               	comf	___awmod@divisor,f
  5936  1187  09F1               	comf	___awmod@divisor+1,f
  5937  1188  0AF0               	incf	___awmod@divisor,f
  5938  1189  1903               	skipnz
  5939  118A  0AF1               	incf	___awmod@divisor+1,f
  5940  118B                     l2170:	
  5941  118B  0870               	movf	___awmod@divisor,w
  5942  118C  0471               	iorwf	___awmod@divisor+1,w
  5943  118D  1903               	btfsc	3,2
  5944  118E  29B2               	goto	l2188
  5945  118F  01F5               	clrf	___awmod@counter
  5946  1190  0AF5               	incf	___awmod@counter,f
  5947  1191                     l2178:	
  5948  1191  1BF1               	btfsc	___awmod@divisor+1,7
  5949  1192  299D               	goto	l2180
  5950  1193  3001               	movlw	1
  5951  1194                     u2755:	
  5952  1194  35F0               	lslf	___awmod@divisor,f
  5953  1195  0DF1               	rlf	___awmod@divisor+1,f
  5954  1196  0B89               	decfsz	9,f
  5955  1197  2994               	goto	u2755
  5956  1198  3001               	movlw	1
  5957  1199  00F4               	movwf	??___awmod
  5958  119A  0874               	movf	??___awmod,w
  5959  119B  07F5               	addwf	___awmod@counter,f
  5960  119C  2991               	goto	l2178
  5961  119D                     l2180:	
  5962  119D  0871               	movf	___awmod@divisor+1,w
  5963  119E  0273               	subwf	___awmod@dividend+1,w
  5964  119F  1D03               	skipz
  5965  11A0  29A3               	goto	u2775
  5966  11A1  0870               	movf	___awmod@divisor,w
  5967  11A2  0272               	subwf	___awmod@dividend,w
  5968  11A3                     u2775:	
  5969  11A3  1C03               	skipc
  5970  11A4  29A9               	goto	l2184
  5971  11A5  0870               	movf	___awmod@divisor,w
  5972  11A6  02F2               	subwf	___awmod@dividend,f
  5973  11A7  0871               	movf	___awmod@divisor+1,w
  5974  11A8  3BF3               	subwfb	___awmod@dividend+1,f
  5975  11A9                     l2184:	
  5976  11A9  3001               	movlw	1
  5977  11AA                     u2785:	
  5978  11AA  36F1               	lsrf	___awmod@divisor+1,f
  5979  11AB  0CF0               	rrf	___awmod@divisor,f
  5980  11AC  0B89               	decfsz	9,f
  5981  11AD  29AA               	goto	u2785
  5982  11AE  3001               	movlw	1
  5983  11AF  02F5               	subwf	___awmod@counter,f
  5984  11B0  1D03               	btfss	3,2
  5985  11B1  299D               	goto	l2180
  5986  11B2                     l2188:	
  5987  11B2  0876               	movf	___awmod@sign,w
  5988  11B3  1903               	btfsc	3,2
  5989  11B4  29BA               	goto	l2192
  5990  11B5  09F2               	comf	___awmod@dividend,f
  5991  11B6  09F3               	comf	___awmod@dividend+1,f
  5992  11B7  0AF2               	incf	___awmod@dividend,f
  5993  11B8  1903               	skipnz
  5994  11B9  0AF3               	incf	___awmod@dividend+1,f
  5995  11BA                     l2192:	
  5996  11BA  0873               	movf	___awmod@dividend+1,w
  5997  11BB  00F1               	movwf	?___awmod+1
  5998  11BC  0872               	movf	___awmod@dividend,w
  5999  11BD  00F0               	movwf	?___awmod
  6000  11BE  0008               	return
  6001  11BF                     __end_of___awmod:	
  6002                           
  6003                           	psect	text9
  6004  1211                     __ptext9:	
  6005 ;; *************** function ___awdiv *****************
  6006 ;; Defined at:
  6007 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  6008 ;; Parameters:    Size  Location     Type
  6009 ;;  divisor         2    7[COMMON] int 
  6010 ;;  dividend        2    9[COMMON] int 
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;  quotient        2    2[BANK0 ] int 
  6013 ;;  sign            1    1[BANK0 ] unsigned char 
  6014 ;;  counter         1    0[BANK0 ] unsigned char 
  6015 ;; Return value:  Size  Location     Type
  6016 ;;                  2    7[COMMON] int 
  6017 ;; Registers used:
  6018 ;;		wreg, status,2, status,0
  6019 ;; Tracked objects:
  6020 ;;		On entry : 0/0
  6021 ;;		On exit  : 0/0
  6022 ;;		Unchanged: 0/0
  6023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6024 ;;      Params:         4       0       0       0       0       0       0       0
  6025 ;;      Locals:         0       4       0       0       0       0       0       0
  6026 ;;      Temps:          1       0       0       0       0       0       0       0
  6027 ;;      Totals:         5       4       0       0       0       0       0       0
  6028 ;;Total ram usage:        9 bytes
  6029 ;; Hardware stack levels used:    1
  6030 ;; This function calls:
  6031 ;;		Nothing
  6032 ;; This function is called by:
  6033 ;;		_fround
  6034 ;;		_scale
  6035 ;;		_sprintf
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           
  6040                           ;psect for function ___awdiv
  6041  1211                     ___awdiv:	
  6042                           
  6043                           ;incstack = 0
  6044                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6045  1211  0020               	movlb	0	; select bank0
  6046  1212  01A1               	clrf	___awdiv@sign
  6047  1213  1FF8               	btfss	___awdiv@divisor+1,7
  6048  1214  2A1C               	goto	l2122
  6049  1215  09F7               	comf	___awdiv@divisor,f
  6050  1216  09F8               	comf	___awdiv@divisor+1,f
  6051  1217  0AF7               	incf	___awdiv@divisor,f
  6052  1218  1903               	skipnz
  6053  1219  0AF8               	incf	___awdiv@divisor+1,f
  6054  121A  01A1               	clrf	___awdiv@sign
  6055  121B  0AA1               	incf	___awdiv@sign,f
  6056  121C                     l2122:	
  6057  121C  1FFA               	btfss	___awdiv@dividend+1,7
  6058  121D  2A27               	goto	l2128
  6059  121E  09F9               	comf	___awdiv@dividend,f
  6060  121F  09FA               	comf	___awdiv@dividend+1,f
  6061  1220  0AF9               	incf	___awdiv@dividend,f
  6062  1221  1903               	skipnz
  6063  1222  0AFA               	incf	___awdiv@dividend+1,f
  6064  1223  3001               	movlw	1
  6065  1224  00FB               	movwf	??___awdiv
  6066  1225  087B               	movf	??___awdiv,w
  6067  1226  06A1               	xorwf	___awdiv@sign,f
  6068  1227                     l2128:	
  6069  1227  01A2               	clrf	___awdiv@quotient
  6070  1228  01A3               	clrf	___awdiv@quotient+1
  6071  1229  0877               	movf	___awdiv@divisor,w
  6072  122A  0478               	iorwf	___awdiv@divisor+1,w
  6073  122B  1903               	btfsc	3,2
  6074  122C  2A56               	goto	l2150
  6075  122D  01A0               	clrf	___awdiv@counter
  6076  122E  0AA0               	incf	___awdiv@counter,f
  6077  122F                     l2138:	
  6078  122F  1BF8               	btfsc	___awdiv@divisor+1,7
  6079  1230  2A3B               	goto	l2140
  6080  1231  3001               	movlw	1
  6081  1232                     u2655:	
  6082  1232  35F7               	lslf	___awdiv@divisor,f
  6083  1233  0DF8               	rlf	___awdiv@divisor+1,f
  6084  1234  0B89               	decfsz	9,f
  6085  1235  2A32               	goto	u2655
  6086  1236  3001               	movlw	1
  6087  1237  00FB               	movwf	??___awdiv
  6088  1238  087B               	movf	??___awdiv,w
  6089  1239  07A0               	addwf	___awdiv@counter,f
  6090  123A  2A2F               	goto	l2138
  6091  123B                     l2140:	
  6092  123B  3001               	movlw	1
  6093  123C                     u2675:	
  6094  123C  35A2               	lslf	___awdiv@quotient,f
  6095  123D  0DA3               	rlf	___awdiv@quotient+1,f
  6096  123E  0B89               	decfsz	9,f
  6097  123F  2A3C               	goto	u2675
  6098  1240  0878               	movf	___awdiv@divisor+1,w
  6099  1241  027A               	subwf	___awdiv@dividend+1,w
  6100  1242  1D03               	skipz
  6101  1243  2A46               	goto	u2685
  6102  1244  0877               	movf	___awdiv@divisor,w
  6103  1245  0279               	subwf	___awdiv@dividend,w
  6104  1246                     u2685:	
  6105  1246  1C03               	skipc
  6106  1247  2A4D               	goto	l2146
  6107  1248  0877               	movf	___awdiv@divisor,w
  6108  1249  02F9               	subwf	___awdiv@dividend,f
  6109  124A  0878               	movf	___awdiv@divisor+1,w
  6110  124B  3BFA               	subwfb	___awdiv@dividend+1,f
  6111  124C  1422               	bsf	___awdiv@quotient,0
  6112  124D                     l2146:	
  6113  124D  3001               	movlw	1
  6114  124E                     u2695:	
  6115  124E  36F8               	lsrf	___awdiv@divisor+1,f
  6116  124F  0CF7               	rrf	___awdiv@divisor,f
  6117  1250  0B89               	decfsz	9,f
  6118  1251  2A4E               	goto	u2695
  6119  1252  3001               	movlw	1
  6120  1253  02A0               	subwf	___awdiv@counter,f
  6121  1254  1D03               	btfss	3,2
  6122  1255  2A3B               	goto	l2140
  6123  1256                     l2150:	
  6124  1256  0821               	movf	___awdiv@sign,w
  6125  1257  1903               	btfsc	3,2
  6126  1258  2A5E               	goto	l2154
  6127  1259  09A2               	comf	___awdiv@quotient,f
  6128  125A  09A3               	comf	___awdiv@quotient+1,f
  6129  125B  0AA2               	incf	___awdiv@quotient,f
  6130  125C  1903               	skipnz
  6131  125D  0AA3               	incf	___awdiv@quotient+1,f
  6132  125E                     l2154:	
  6133  125E  0823               	movf	___awdiv@quotient+1,w
  6134  125F  00F8               	movwf	?___awdiv+1
  6135  1260  0822               	movf	___awdiv@quotient,w
  6136  1261  00F7               	movwf	?___awdiv
  6137  1262  0008               	return
  6138  1263                     __end_of___awdiv:	
  6139                           
  6140                           	psect	text10
  6141  0837                     __ptext10:	
  6142 ;; *************** function __tdiv_to_l_ *****************
  6143 ;; Defined at:
  6144 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdivl.c"
  6145 ;; Parameters:    Size  Location     Type
  6146 ;;  f1              3    0[COMMON] float 
  6147 ;;  f2              3    3[COMMON] float 
  6148 ;; Auto vars:     Size  Location     Type
  6149 ;;  quot            4    0[BANK0 ] unsigned long 
  6150 ;;  exp1            1    5[BANK0 ] unsigned char 
  6151 ;;  cntr            1    4[BANK0 ] unsigned char 
  6152 ;; Return value:  Size  Location     Type
  6153 ;;                  4    0[COMMON] unsigned long 
  6154 ;; Registers used:
  6155 ;;		wreg, status,2, status,0
  6156 ;; Tracked objects:
  6157 ;;		On entry : 0/0
  6158 ;;		On exit  : 0/0
  6159 ;;		Unchanged: 0/0
  6160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6161 ;;      Params:         6       0       0       0       0       0       0       0
  6162 ;;      Locals:         0       6       0       0       0       0       0       0
  6163 ;;      Temps:          4       0       0       0       0       0       0       0
  6164 ;;      Totals:        10       6       0       0       0       0       0       0
  6165 ;;Total ram usage:       16 bytes
  6166 ;; Hardware stack levels used:    1
  6167 ;; This function calls:
  6168 ;;		Nothing
  6169 ;; This function is called by:
  6170 ;;		_sprintf
  6171 ;; This function uses a non-reentrant model
  6172 ;;
  6173                           
  6174                           
  6175                           ;psect for function __tdiv_to_l_
  6176  0837                     __tdiv_to_l_:	
  6177                           
  6178                           ;incstack = 0
  6179                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  6180  0837  0870               	movf	__tdiv_to_l_@f1,w
  6181  0838  00F6               	movwf	??__tdiv_to_l_
  6182  0839  0871               	movf	__tdiv_to_l_@f1+1,w
  6183  083A  00F7               	movwf	??__tdiv_to_l_+1
  6184  083B  0872               	movf	__tdiv_to_l_@f1+2,w
  6185  083C  00F8               	movwf	??__tdiv_to_l_+2
  6186  083D  1003               	clrc
  6187  083E  0D77               	rlf	??__tdiv_to_l_+1,w
  6188  083F  0D78               	rlf	??__tdiv_to_l_+2,w
  6189  0840  00F9               	movwf	??__tdiv_to_l_+3
  6190  0841  0879               	movf	??__tdiv_to_l_+3,w
  6191  0842  0020               	movlb	0	; select bank0
  6192  0843  00A5               	movwf	__tdiv_to_l_@exp1
  6193  0844  0825               	movf	__tdiv_to_l_@exp1,w
  6194  0845  1D03               	btfss	3,2
  6195  0846  2850               	goto	l2532
  6196  0847  3000               	movlw	0
  6197  0848  00F3               	movwf	?__tdiv_to_l_+3
  6198  0849  3000               	movlw	0
  6199  084A  00F2               	movwf	?__tdiv_to_l_+2
  6200  084B  3000               	movlw	0
  6201  084C  00F1               	movwf	?__tdiv_to_l_+1
  6202  084D  3000               	movlw	0
  6203  084E  00F0               	movwf	?__tdiv_to_l_
  6204  084F  0008               	return
  6205  0850                     l2532:	
  6206  0850  0873               	movf	__tdiv_to_l_@f2,w
  6207  0851  00F6               	movwf	??__tdiv_to_l_
  6208  0852  0874               	movf	__tdiv_to_l_@f2+1,w
  6209  0853  00F7               	movwf	??__tdiv_to_l_+1
  6210  0854  0875               	movf	__tdiv_to_l_@f2+2,w
  6211  0855  00F8               	movwf	??__tdiv_to_l_+2
  6212  0856  1003               	clrc
  6213  0857  0D77               	rlf	??__tdiv_to_l_+1,w
  6214  0858  0D78               	rlf	??__tdiv_to_l_+2,w
  6215  0859  00F9               	movwf	??__tdiv_to_l_+3
  6216  085A  0879               	movf	??__tdiv_to_l_+3,w
  6217  085B  00A4               	movwf	__tdiv_to_l_@cntr
  6218  085C  0824               	movf	__tdiv_to_l_@cntr,w
  6219  085D  1D03               	btfss	3,2
  6220  085E  2868               	goto	l619
  6221  085F  3000               	movlw	0
  6222  0860  00F3               	movwf	?__tdiv_to_l_+3
  6223  0861  3000               	movlw	0
  6224  0862  00F2               	movwf	?__tdiv_to_l_+2
  6225  0863  3000               	movlw	0
  6226  0864  00F1               	movwf	?__tdiv_to_l_+1
  6227  0865  3000               	movlw	0
  6228  0866  00F0               	movwf	?__tdiv_to_l_
  6229  0867  0008               	return
  6230  0868                     l619:	
  6231  0868  17F1               	bsf	__tdiv_to_l_@f1+1,7
  6232  0869  30FF               	movlw	255
  6233  086A  05F0               	andwf	__tdiv_to_l_@f1,f
  6234  086B  30FF               	movlw	255
  6235  086C  05F1               	andwf	__tdiv_to_l_@f1+1,f
  6236  086D  3000               	movlw	0
  6237  086E  05F2               	andwf	__tdiv_to_l_@f1+2,f
  6238  086F  17F4               	bsf	__tdiv_to_l_@f2+1,7
  6239  0870  30FF               	movlw	255
  6240  0871  05F3               	andwf	__tdiv_to_l_@f2,f
  6241  0872  30FF               	movlw	255
  6242  0873  05F4               	andwf	__tdiv_to_l_@f2+1,f
  6243  0874  3000               	movlw	0
  6244  0875  05F5               	andwf	__tdiv_to_l_@f2+2,f
  6245  0876  3000               	movlw	0
  6246  0877  00A3               	movwf	__tdiv_to_l_@quot+3
  6247  0878  3000               	movlw	0
  6248  0879  00A2               	movwf	__tdiv_to_l_@quot+2
  6249  087A  3000               	movlw	0
  6250  087B  00A1               	movwf	__tdiv_to_l_@quot+1
  6251  087C  3000               	movlw	0
  6252  087D  00A0               	movwf	__tdiv_to_l_@quot
  6253  087E  307F               	movlw	127
  6254  087F  02A5               	subwf	__tdiv_to_l_@exp1,f
  6255  0880  3098               	movlw	152
  6256  0881  0724               	addwf	__tdiv_to_l_@cntr,w
  6257  0882  00F6               	movwf	??__tdiv_to_l_
  6258  0883  0876               	movf	??__tdiv_to_l_,w
  6259  0884  02A5               	subwf	__tdiv_to_l_@exp1,f
  6260  0885  3018               	movlw	24
  6261  0886  00F6               	movwf	??__tdiv_to_l_
  6262  0887  0876               	movf	??__tdiv_to_l_,w
  6263  0888  00A4               	movwf	__tdiv_to_l_@cntr
  6264  0889                     l2546:	
  6265  0889  3001               	movlw	1
  6266  088A                     u3695:	
  6267  088A  35A0               	lslf	__tdiv_to_l_@quot,f
  6268  088B  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  6269  088C  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  6270  088D  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  6271  088E  0B89               	decfsz	9,f
  6272  088F  288A               	goto	u3695
  6273  0890  0875               	movf	__tdiv_to_l_@f2+2,w
  6274  0891  0272               	subwf	__tdiv_to_l_@f1+2,w
  6275  0892  1D03               	skipz
  6276  0893  289A               	goto	u3705
  6277  0894  0874               	movf	__tdiv_to_l_@f2+1,w
  6278  0895  0271               	subwf	__tdiv_to_l_@f1+1,w
  6279  0896  1D03               	skipz
  6280  0897  289A               	goto	u3705
  6281  0898  0873               	movf	__tdiv_to_l_@f2,w
  6282  0899  0270               	subwf	__tdiv_to_l_@f1,w
  6283  089A                     u3705:	
  6284  089A  1C03               	skipc
  6285  089B  28A3               	goto	l2554
  6286  089C  0873               	movf	__tdiv_to_l_@f2,w
  6287  089D  02F0               	subwf	__tdiv_to_l_@f1,f
  6288  089E  0874               	movf	__tdiv_to_l_@f2+1,w
  6289  089F  3BF1               	subwfb	__tdiv_to_l_@f1+1,f
  6290  08A0  0875               	movf	__tdiv_to_l_@f2+2,w
  6291  08A1  3BF2               	subwfb	__tdiv_to_l_@f1+2,f
  6292  08A2  1420               	bsf	__tdiv_to_l_@quot,0
  6293  08A3                     l2554:	
  6294  08A3  3001               	movlw	1
  6295  08A4                     u3715:	
  6296  08A4  35F0               	lslf	__tdiv_to_l_@f1,f
  6297  08A5  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  6298  08A6  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  6299  08A7  0B89               	decfsz	9,f
  6300  08A8  28A4               	goto	u3715
  6301  08A9  3001               	movlw	1
  6302  08AA  02A4               	subwf	__tdiv_to_l_@cntr,f
  6303  08AB  1D03               	btfss	3,2
  6304  08AC  2889               	goto	l2546
  6305  08AD  1FA5               	btfss	__tdiv_to_l_@exp1,7
  6306  08AE  28CB               	goto	l2566
  6307  08AF  0825               	movf	__tdiv_to_l_@exp1,w
  6308  08B0  3A80               	xorlw	128
  6309  08B1  3E97               	addlw	151
  6310  08B2  1803               	skipnc
  6311  08B3  28BD               	goto	l2564
  6312  08B4  3000               	movlw	0
  6313  08B5  00F3               	movwf	?__tdiv_to_l_+3
  6314  08B6  3000               	movlw	0
  6315  08B7  00F2               	movwf	?__tdiv_to_l_+2
  6316  08B8  3000               	movlw	0
  6317  08B9  00F1               	movwf	?__tdiv_to_l_+1
  6318  08BA  3000               	movlw	0
  6319  08BB  00F0               	movwf	?__tdiv_to_l_
  6320  08BC  0008               	return
  6321  08BD                     l2564:	
  6322  08BD  3001               	movlw	1
  6323  08BE                     u3755:	
  6324  08BE  36A3               	lsrf	__tdiv_to_l_@quot+3,f
  6325  08BF  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  6326  08C0  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  6327  08C1  0CA0               	rrf	__tdiv_to_l_@quot,f
  6328  08C2  0B89               	decfsz	9,f
  6329  08C3  28BE               	goto	u3755
  6330  08C4  3001               	movlw	1
  6331  08C5  00F6               	movwf	??__tdiv_to_l_
  6332  08C6  0876               	movf	??__tdiv_to_l_,w
  6333  08C7  07A5               	addwf	__tdiv_to_l_@exp1,f
  6334  08C8  1903               	btfsc	3,2
  6335  08C9  28E4               	goto	l2574
  6336  08CA  28BD               	goto	l2564
  6337  08CB                     l2566:	
  6338  08CB  3018               	movlw	24
  6339  08CC  0225               	subwf	__tdiv_to_l_@exp1,w
  6340  08CD  1C03               	skipc
  6341  08CE  28E1               	goto	l629
  6342  08CF  3000               	movlw	0
  6343  08D0  00F3               	movwf	?__tdiv_to_l_+3
  6344  08D1  3000               	movlw	0
  6345  08D2  00F2               	movwf	?__tdiv_to_l_+2
  6346  08D3  3000               	movlw	0
  6347  08D4  00F1               	movwf	?__tdiv_to_l_+1
  6348  08D5  3000               	movlw	0
  6349  08D6  00F0               	movwf	?__tdiv_to_l_
  6350  08D7  0008               	return
  6351  08D8                     l2572:	
  6352  08D8  3001               	movlw	1
  6353  08D9                     u3785:	
  6354  08D9  35A0               	lslf	__tdiv_to_l_@quot,f
  6355  08DA  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  6356  08DB  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  6357  08DC  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  6358  08DD  0B89               	decfsz	9,f
  6359  08DE  28D9               	goto	u3785
  6360  08DF  3001               	movlw	1
  6361  08E0  02A5               	subwf	__tdiv_to_l_@exp1,f
  6362  08E1                     l629:	
  6363  08E1  0825               	movf	__tdiv_to_l_@exp1,w
  6364  08E2  1D03               	btfss	3,2
  6365  08E3  28D8               	goto	l2572
  6366  08E4                     l2574:	
  6367  08E4  0823               	movf	__tdiv_to_l_@quot+3,w
  6368  08E5  00F3               	movwf	?__tdiv_to_l_+3
  6369  08E6  0822               	movf	__tdiv_to_l_@quot+2,w
  6370  08E7  00F2               	movwf	?__tdiv_to_l_+2
  6371  08E8  0821               	movf	__tdiv_to_l_@quot+1,w
  6372  08E9  00F1               	movwf	?__tdiv_to_l_+1
  6373  08EA  0820               	movf	__tdiv_to_l_@quot,w
  6374  08EB  00F0               	movwf	?__tdiv_to_l_
  6375  08EC  0008               	return
  6376  08ED                     __end_of__tdiv_to_l_:	
  6377                           
  6378                           	psect	text11
  6379  16E3                     __ptext11:	
  6380 ;; *************** function __div_to_l_ *****************
  6381 ;; Defined at:
  6382 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fldivl.c"
  6383 ;; Parameters:    Size  Location     Type
  6384 ;;  f1              3    0[COMMON] unsigned long 
  6385 ;;  f2              3    3[COMMON] unsigned long 
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;  quot            4    0[BANK0 ] unsigned long 
  6388 ;;  exp1            1    5[BANK0 ] unsigned char 
  6389 ;;  cntr            1    4[BANK0 ] unsigned char 
  6390 ;; Return value:  Size  Location     Type
  6391 ;;                  4    0[COMMON] unsigned long 
  6392 ;; Registers used:
  6393 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6394 ;; Tracked objects:
  6395 ;;		On entry : 0/0
  6396 ;;		On exit  : 0/0
  6397 ;;		Unchanged: 0/0
  6398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6399 ;;      Params:         6       0       0       0       0       0       0       0
  6400 ;;      Locals:         0       6       0       0       0       0       0       0
  6401 ;;      Temps:          8       0       0       0       0       0       0       0
  6402 ;;      Totals:        14       6       0       0       0       0       0       0
  6403 ;;Total ram usage:       20 bytes
  6404 ;; Hardware stack levels used:    1
  6405 ;; This function calls:
  6406 ;;		Nothing
  6407 ;; This function is called by:
  6408 ;;		_sprintf
  6409 ;; This function uses a non-reentrant model
  6410 ;;
  6411                           
  6412                           
  6413                           ;psect for function __div_to_l_
  6414  16E3                     __div_to_l_:	
  6415                           
  6416                           ;incstack = 0
  6417                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
  6418  16E3  3070               	movlw	low (__div_to_l_@f1| 0)
  6419  16E4  0086               	movwf	6
  6420  16E5  0187               	clrf	7
  6421  16E6  3F40               	moviw [0]fsr1
  6422  16E7  00F6               	movwf	??__div_to_l_
  6423  16E8  3F41               	moviw [1]fsr1
  6424  16E9  00F7               	movwf	??__div_to_l_+1
  6425  16EA  3F42               	moviw [2]fsr1
  6426  16EB  00F8               	movwf	??__div_to_l_+2
  6427  16EC  3F43               	moviw [3]fsr1
  6428  16ED  00F9               	movwf	??__div_to_l_+3
  6429  16EE  1003               	clrc
  6430  16EF  0D78               	rlf	??__div_to_l_+2,w
  6431  16F0  0D79               	rlf	??__div_to_l_+3,w
  6432  16F1  00FA               	movwf	??__div_to_l_+4
  6433  16F2  087A               	movf	??__div_to_l_+4,w
  6434  16F3  0020               	movlb	0	; select bank0
  6435  16F4  00A5               	movwf	__div_to_l_@exp1
  6436  16F5  0825               	movf	__div_to_l_@exp1,w
  6437  16F6  1D03               	btfss	3,2
  6438  16F7  2F01               	goto	l2584
  6439  16F8  3000               	movlw	0
  6440  16F9  00F3               	movwf	?__div_to_l_+3
  6441  16FA  3000               	movlw	0
  6442  16FB  00F2               	movwf	?__div_to_l_+2
  6443  16FC  3000               	movlw	0
  6444  16FD  00F1               	movwf	?__div_to_l_+1
  6445  16FE  3000               	movlw	0
  6446  16FF  00F0               	movwf	?__div_to_l_
  6447  1700  0008               	return
  6448  1701                     l2584:	
  6449  1701  3073               	movlw	low (__div_to_l_@f2| 0)
  6450  1702  0086               	movwf	6
  6451  1703  0187               	clrf	7
  6452  1704  3F40               	moviw [0]fsr1
  6453  1705  00F6               	movwf	??__div_to_l_
  6454  1706  3F41               	moviw [1]fsr1
  6455  1707  00F7               	movwf	??__div_to_l_+1
  6456  1708  3F42               	moviw [2]fsr1
  6457  1709  00F8               	movwf	??__div_to_l_+2
  6458  170A  3F43               	moviw [3]fsr1
  6459  170B  00F9               	movwf	??__div_to_l_+3
  6460  170C  1003               	clrc
  6461  170D  0D78               	rlf	??__div_to_l_+2,w
  6462  170E  0D79               	rlf	??__div_to_l_+3,w
  6463  170F  00FA               	movwf	??__div_to_l_+4
  6464  1710  087A               	movf	??__div_to_l_+4,w
  6465  1711  00A4               	movwf	__div_to_l_@cntr
  6466  1712  0824               	movf	__div_to_l_@cntr,w
  6467  1713  1D03               	btfss	3,2
  6468  1714  2F1E               	goto	l2590
  6469  1715  3000               	movlw	0
  6470  1716  00F3               	movwf	?__div_to_l_+3
  6471  1717  3000               	movlw	0
  6472  1718  00F2               	movwf	?__div_to_l_+2
  6473  1719  3000               	movlw	0
  6474  171A  00F1               	movwf	?__div_to_l_+1
  6475  171B  3000               	movlw	0
  6476  171C  00F0               	movwf	?__div_to_l_
  6477  171D  0008               	return
  6478  171E                     l2590:	
  6479  171E  3070               	movlw	low (__div_to_l_@f1| 0)
  6480  171F  0086               	movwf	6
  6481  1720  0187               	clrf	7
  6482  1721  3000               	movlw	0
  6483  1722  0481               	iorwf	1,f
  6484  1723  3141               	addfsr 1,1
  6485  1724  3000               	movlw	0
  6486  1725  0481               	iorwf	1,f
  6487  1726  3141               	addfsr 1,1
  6488  1727  3080               	movlw	128
  6489  1728  0481               	iorwf	1,f
  6490  1729  3141               	addfsr 1,1
  6491  172A  3000               	movlw	0
  6492  172B  0481               	iorwf	1,f
  6493  172C  3070               	movlw	low (__div_to_l_@f1| 0)
  6494  172D  0086               	movwf	6
  6495  172E  0187               	clrf	7
  6496  172F  30FF               	movlw	255
  6497  1730  0581               	andwf	1,f
  6498  1731  3141               	addfsr 1,1
  6499  1732  30FF               	movlw	255
  6500  1733  0581               	andwf	1,f
  6501  1734  3141               	addfsr 1,1
  6502  1735  30FF               	movlw	255
  6503  1736  0581               	andwf	1,f
  6504  1737  3141               	addfsr 1,1
  6505  1738  3000               	movlw	0
  6506  1739  0581               	andwf	1,f
  6507  173A  3073               	movlw	low (__div_to_l_@f2| 0)
  6508  173B  0086               	movwf	6
  6509  173C  0187               	clrf	7
  6510  173D  3000               	movlw	0
  6511  173E  0481               	iorwf	1,f
  6512  173F  3141               	addfsr 1,1
  6513  1740  3000               	movlw	0
  6514  1741  0481               	iorwf	1,f
  6515  1742  3141               	addfsr 1,1
  6516  1743  3080               	movlw	128
  6517  1744  0481               	iorwf	1,f
  6518  1745  3141               	addfsr 1,1
  6519  1746  3000               	movlw	0
  6520  1747  0481               	iorwf	1,f
  6521  1748  3073               	movlw	low (__div_to_l_@f2| 0)
  6522  1749  0086               	movwf	6
  6523  174A  0187               	clrf	7
  6524  174B  30FF               	movlw	255
  6525  174C  0581               	andwf	1,f
  6526  174D  3141               	addfsr 1,1
  6527  174E  30FF               	movlw	255
  6528  174F  0581               	andwf	1,f
  6529  1750  3141               	addfsr 1,1
  6530  1751  30FF               	movlw	255
  6531  1752  0581               	andwf	1,f
  6532  1753  3141               	addfsr 1,1
  6533  1754  3000               	movlw	0
  6534  1755  0581               	andwf	1,f
  6535  1756  3000               	movlw	0
  6536  1757  00A3               	movwf	__div_to_l_@quot+3
  6537  1758  3000               	movlw	0
  6538  1759  00A2               	movwf	__div_to_l_@quot+2
  6539  175A  3000               	movlw	0
  6540  175B  00A1               	movwf	__div_to_l_@quot+1
  6541  175C  3000               	movlw	0
  6542  175D  00A0               	movwf	__div_to_l_@quot
  6543  175E  307F               	movlw	127
  6544  175F  02A5               	subwf	__div_to_l_@exp1,f
  6545  1760  30A0               	movlw	160
  6546  1761  0724               	addwf	__div_to_l_@cntr,w
  6547  1762  00F6               	movwf	??__div_to_l_
  6548  1763  0876               	movf	??__div_to_l_,w
  6549  1764  02A5               	subwf	__div_to_l_@exp1,f
  6550  1765  3020               	movlw	32
  6551  1766  00F6               	movwf	??__div_to_l_
  6552  1767  0876               	movf	??__div_to_l_,w
  6553  1768  00A4               	movwf	__div_to_l_@cntr
  6554  1769                     l2600:	
  6555  1769  3001               	movlw	1
  6556  176A                     u3825:	
  6557  176A  35A0               	lslf	__div_to_l_@quot,f
  6558  176B  0DA1               	rlf	__div_to_l_@quot+1,f
  6559  176C  0DA2               	rlf	__div_to_l_@quot+2,f
  6560  176D  0DA3               	rlf	__div_to_l_@quot+3,f
  6561  176E  0B89               	decfsz	9,f
  6562  176F  2F6A               	goto	u3825
  6563  1770  3073               	movlw	low (__div_to_l_@f2| 0)
  6564  1771  0086               	movwf	6
  6565  1772  0187               	clrf	7
  6566  1773  3F40               	moviw [0]fsr1
  6567  1774  00F6               	movwf	??__div_to_l_
  6568  1775  3F41               	moviw [1]fsr1
  6569  1776  00F7               	movwf	??__div_to_l_+1
  6570  1777  3F42               	moviw [2]fsr1
  6571  1778  00F8               	movwf	??__div_to_l_+2
  6572  1779  3F43               	moviw [3]fsr1
  6573  177A  00F9               	movwf	??__div_to_l_+3
  6574  177B  3070               	movlw	low (__div_to_l_@f1| 0)
  6575  177C  0086               	movwf	6
  6576  177D  0187               	clrf	7
  6577  177E  3F40               	moviw [0]fsr1
  6578  177F  00FA               	movwf	??__div_to_l_+4
  6579  1780  3F41               	moviw [1]fsr1
  6580  1781  00FB               	movwf	??__div_to_l_+5
  6581  1782  3F42               	moviw [2]fsr1
  6582  1783  00FC               	movwf	??__div_to_l_+6
  6583  1784  3F43               	moviw [3]fsr1
  6584  1785  00FD               	movwf	??__div_to_l_+7
  6585  1786  0879               	movf	??__div_to_l_+3,w
  6586  1787  027D               	subwf	??__div_to_l_+7,w
  6587  1788  1D03               	skipz
  6588  1789  2F94               	goto	u3835
  6589  178A  0878               	movf	??__div_to_l_+2,w
  6590  178B  027C               	subwf	??__div_to_l_+6,w
  6591  178C  1D03               	skipz
  6592  178D  2F94               	goto	u3835
  6593  178E  0877               	movf	??__div_to_l_+1,w
  6594  178F  027B               	subwf	??__div_to_l_+5,w
  6595  1790  1D03               	skipz
  6596  1791  2F94               	goto	u3835
  6597  1792  0876               	movf	??__div_to_l_,w
  6598  1793  027A               	subwf	??__div_to_l_+4,w
  6599  1794                     u3835:	
  6600  1794  1C03               	skipc
  6601  1795  2FB1               	goto	l2608
  6602  1796  3073               	movlw	low (__div_to_l_@f2| 0)
  6603  1797  0086               	movwf	6
  6604  1798  0187               	clrf	7
  6605  1799  3F40               	moviw [0]fsr1
  6606  179A  00F6               	movwf	??__div_to_l_
  6607  179B  3F41               	moviw [1]fsr1
  6608  179C  00F7               	movwf	??__div_to_l_+1
  6609  179D  3F42               	moviw [2]fsr1
  6610  179E  00F8               	movwf	??__div_to_l_+2
  6611  179F  3F43               	moviw [3]fsr1
  6612  17A0  00F9               	movwf	??__div_to_l_+3
  6613  17A1  3070               	movlw	low (__div_to_l_@f1| 0)
  6614  17A2  0086               	movwf	6
  6615  17A3  0187               	clrf	7
  6616  17A4  0876               	movf	??__div_to_l_,w
  6617  17A5  0281               	subwf	1,f
  6618  17A6  3141               	addfsr 1,1
  6619  17A7  0877               	movf	??__div_to_l_+1,w
  6620  17A8  3B81               	subwfb	1,f
  6621  17A9  3141               	addfsr 1,1
  6622  17AA  0878               	movf	??__div_to_l_+2,w
  6623  17AB  3B81               	subwfb	1,f
  6624  17AC  3141               	addfsr 1,1
  6625  17AD  0879               	movf	??__div_to_l_+3,w
  6626  17AE  3B81               	subwfb	1,f
  6627  17AF  317D               	addfsr 1,-3
  6628  17B0  1420               	bsf	__div_to_l_@quot,0
  6629  17B1                     l2608:	
  6630  17B1  3070               	movlw	low (__div_to_l_@f1| 0)
  6631  17B2  0086               	movwf	6
  6632  17B3  0187               	clrf	7
  6633  17B4  3581               	lslf	1,f
  6634  17B5  3141               	addfsr 1,1
  6635  17B6  0D81               	rlf	1,f
  6636  17B7  3141               	addfsr 1,1
  6637  17B8  0D81               	rlf	1,f
  6638  17B9  3141               	addfsr 1,1
  6639  17BA  0D81               	rlf	1,f
  6640  17BB  317D               	addfsr 1,-3
  6641  17BC  3001               	movlw	1
  6642  17BD  02A4               	subwf	__div_to_l_@cntr,f
  6643  17BE  1D03               	btfss	3,2
  6644  17BF  2F69               	goto	l2600
  6645  17C0  1FA5               	btfss	__div_to_l_@exp1,7
  6646  17C1  2FDE               	goto	l2620
  6647  17C2  0825               	movf	__div_to_l_@exp1,w
  6648  17C3  3A80               	xorlw	128
  6649  17C4  3E9F               	addlw	159
  6650  17C5  1803               	skipnc
  6651  17C6  2FD0               	goto	l2618
  6652  17C7  3000               	movlw	0
  6653  17C8  00F3               	movwf	?__div_to_l_+3
  6654  17C9  3000               	movlw	0
  6655  17CA  00F2               	movwf	?__div_to_l_+2
  6656  17CB  3000               	movlw	0
  6657  17CC  00F1               	movwf	?__div_to_l_+1
  6658  17CD  3000               	movlw	0
  6659  17CE  00F0               	movwf	?__div_to_l_
  6660  17CF  0008               	return
  6661  17D0                     l2618:	
  6662  17D0  3001               	movlw	1
  6663  17D1                     u3875:	
  6664  17D1  36A3               	lsrf	__div_to_l_@quot+3,f
  6665  17D2  0CA2               	rrf	__div_to_l_@quot+2,f
  6666  17D3  0CA1               	rrf	__div_to_l_@quot+1,f
  6667  17D4  0CA0               	rrf	__div_to_l_@quot,f
  6668  17D5  0B89               	decfsz	9,f
  6669  17D6  2FD1               	goto	u3875
  6670  17D7  3001               	movlw	1
  6671  17D8  00F6               	movwf	??__div_to_l_
  6672  17D9  0876               	movf	??__div_to_l_,w
  6673  17DA  07A5               	addwf	__div_to_l_@exp1,f
  6674  17DB  1903               	btfsc	3,2
  6675  17DC  2FF7               	goto	l2628
  6676  17DD  2FD0               	goto	l2618
  6677  17DE                     l2620:	
  6678  17DE  3020               	movlw	32
  6679  17DF  0225               	subwf	__div_to_l_@exp1,w
  6680  17E0  1C03               	skipc
  6681  17E1  2FF4               	goto	l550
  6682  17E2  3000               	movlw	0
  6683  17E3  00F3               	movwf	?__div_to_l_+3
  6684  17E4  3000               	movlw	0
  6685  17E5  00F2               	movwf	?__div_to_l_+2
  6686  17E6  3000               	movlw	0
  6687  17E7  00F1               	movwf	?__div_to_l_+1
  6688  17E8  3000               	movlw	0
  6689  17E9  00F0               	movwf	?__div_to_l_
  6690  17EA  0008               	return
  6691  17EB                     l2626:	
  6692  17EB  3001               	movlw	1
  6693  17EC                     u3905:	
  6694  17EC  35A0               	lslf	__div_to_l_@quot,f
  6695  17ED  0DA1               	rlf	__div_to_l_@quot+1,f
  6696  17EE  0DA2               	rlf	__div_to_l_@quot+2,f
  6697  17EF  0DA3               	rlf	__div_to_l_@quot+3,f
  6698  17F0  0B89               	decfsz	9,f
  6699  17F1  2FEC               	goto	u3905
  6700  17F2  3001               	movlw	1
  6701  17F3  02A5               	subwf	__div_to_l_@exp1,f
  6702  17F4                     l550:	
  6703  17F4  0825               	movf	__div_to_l_@exp1,w
  6704  17F5  1D03               	btfss	3,2
  6705  17F6  2FEB               	goto	l2626
  6706  17F7                     l2628:	
  6707  17F7  0823               	movf	__div_to_l_@quot+3,w
  6708  17F8  00F3               	movwf	?__div_to_l_+3
  6709  17F9  0822               	movf	__div_to_l_@quot+2,w
  6710  17FA  00F2               	movwf	?__div_to_l_+2
  6711  17FB  0821               	movf	__div_to_l_@quot+1,w
  6712  17FC  00F1               	movwf	?__div_to_l_+1
  6713  17FD  0820               	movf	__div_to_l_@quot,w
  6714  17FE  00F0               	movwf	?__div_to_l_
  6715  17FF  0008               	return
  6716  1800                     __end_of__div_to_l_:	
  6717                           
  6718                           	psect	text12
  6719  10D5                     __ptext12:	
  6720 ;; *************** function ___lltoft *****************
  6721 ;; Defined at:
  6722 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lltoft.c"
  6723 ;; Parameters:    Size  Location     Type
  6724 ;;  c               4    8[COMMON] unsigned long 
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;  exp             1   13[COMMON] unsigned char 
  6727 ;; Return value:  Size  Location     Type
  6728 ;;                  3    8[COMMON] float 
  6729 ;; Registers used:
  6730 ;;		wreg, status,2, status,0, pclath, cstack
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6736 ;;      Params:         4       0       0       0       0       0       0       0
  6737 ;;      Locals:         1       0       0       0       0       0       0       0
  6738 ;;      Temps:          1       0       0       0       0       0       0       0
  6739 ;;      Totals:         6       0       0       0       0       0       0       0
  6740 ;;Total ram usage:        6 bytes
  6741 ;; Hardware stack levels used:    1
  6742 ;; Hardware stack levels required when called:    1
  6743 ;; This function calls:
  6744 ;;		___ftpack
  6745 ;; This function is called by:
  6746 ;;		_sprintf
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           
  6751                           ;psect for function ___lltoft
  6752  10D5                     ___lltoft:	
  6753                           
  6754                           ;incstack = 0
  6755                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6756  10D5  308E               	movlw	142
  6757  10D6  00FC               	movwf	??___lltoft
  6758  10D7  087C               	movf	??___lltoft,w
  6759  10D8  00FD               	movwf	___lltoft@exp
  6760  10D9                     l2758:	
  6761  10D9  30FF               	movlw	255
  6762  10DA  057B               	andwf	___lltoft@c+3,w
  6763  10DB  1903               	btfsc	3,2
  6764  10DC  28E9               	goto	l2760
  6765  10DD  3001               	movlw	1
  6766  10DE                     u4205:	
  6767  10DE  36FB               	lsrf	___lltoft@c+3,f
  6768  10DF  0CFA               	rrf	___lltoft@c+2,f
  6769  10E0  0CF9               	rrf	___lltoft@c+1,f
  6770  10E1  0CF8               	rrf	___lltoft@c,f
  6771  10E2  0B89               	decfsz	9,f
  6772  10E3  28DE               	goto	u4205
  6773  10E4  3001               	movlw	1
  6774  10E5  00FC               	movwf	??___lltoft
  6775  10E6  087C               	movf	??___lltoft,w
  6776  10E7  07FD               	addwf	___lltoft@exp,f
  6777  10E8  28D9               	goto	l2758
  6778  10E9                     l2760:	
  6779  10E9  0878               	movf	___lltoft@c,w
  6780  10EA  00F0               	movwf	___ftpack@arg
  6781  10EB  0879               	movf	___lltoft@c+1,w
  6782  10EC  00F1               	movwf	___ftpack@arg+1
  6783  10ED  087A               	movf	___lltoft@c+2,w
  6784  10EE  00F2               	movwf	___ftpack@arg+2
  6785  10EF  087D               	movf	___lltoft@exp,w
  6786  10F0  00FC               	movwf	??___lltoft
  6787  10F1  087C               	movf	??___lltoft,w
  6788  10F2  00F3               	movwf	___ftpack@exp
  6789  10F3  01F4               	clrf	___ftpack@sign
  6790  10F4  3192  2263         	fcall	___ftpack
  6791  10F6  0870               	movf	?___ftpack,w
  6792  10F7  00F8               	movwf	?___lltoft
  6793  10F8  0871               	movf	?___ftpack+1,w
  6794  10F9  00F9               	movwf	?___lltoft+1
  6795  10FA  0872               	movf	?___ftpack+2,w
  6796  10FB  00FA               	movwf	?___lltoft+2
  6797  10FC  0008               	return
  6798  10FD                     __end_of___lltoft:	
  6799                           
  6800                           	psect	text13
  6801  1138                     __ptext13:	
  6802 ;; *************** function ___llmod *****************
  6803 ;; Defined at:
  6804 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\llmod.c"
  6805 ;; Parameters:    Size  Location     Type
  6806 ;;  divisor         4    0[COMMON] unsigned long 
  6807 ;;  dividend        4    4[COMMON] unsigned long 
  6808 ;; Auto vars:     Size  Location     Type
  6809 ;;  counter         1    9[COMMON] unsigned char 
  6810 ;; Return value:  Size  Location     Type
  6811 ;;                  4    0[COMMON] unsigned long 
  6812 ;; Registers used:
  6813 ;;		wreg, status,2, status,0
  6814 ;; Tracked objects:
  6815 ;;		On entry : 0/0
  6816 ;;		On exit  : 0/0
  6817 ;;		Unchanged: 0/0
  6818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6819 ;;      Params:         8       0       0       0       0       0       0       0
  6820 ;;      Locals:         1       0       0       0       0       0       0       0
  6821 ;;      Temps:          1       0       0       0       0       0       0       0
  6822 ;;      Totals:        10       0       0       0       0       0       0       0
  6823 ;;Total ram usage:       10 bytes
  6824 ;; Hardware stack levels used:    1
  6825 ;; This function calls:
  6826 ;;		Nothing
  6827 ;; This function is called by:
  6828 ;;		_sprintf
  6829 ;; This function uses a non-reentrant model
  6830 ;;
  6831                           
  6832                           
  6833                           ;psect for function ___llmod
  6834  1138                     ___llmod:	
  6835                           
  6836                           ;incstack = 0
  6837                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  6838  1138  0873               	movf	___llmod@divisor+3,w
  6839  1139  0472               	iorwf	___llmod@divisor+2,w
  6840  113A  0471               	iorwf	___llmod@divisor+1,w
  6841  113B  0470               	iorwf	___llmod@divisor,w
  6842  113C  1903               	skipnz
  6843  113D  2971               	goto	l2750
  6844  113E  01F9               	clrf	___llmod@counter
  6845  113F  0AF9               	incf	___llmod@counter,f
  6846  1140                     l2740:	
  6847  1140  1BF3               	btfsc	___llmod@divisor+3,7
  6848  1141  294E               	goto	l2742
  6849  1142  3001               	movlw	1
  6850  1143                     u4155:	
  6851  1143  35F0               	lslf	___llmod@divisor,f
  6852  1144  0DF1               	rlf	___llmod@divisor+1,f
  6853  1145  0DF2               	rlf	___llmod@divisor+2,f
  6854  1146  0DF3               	rlf	___llmod@divisor+3,f
  6855  1147  0B89               	decfsz	9,f
  6856  1148  2943               	goto	u4155
  6857  1149  3001               	movlw	1
  6858  114A  00F8               	movwf	??___llmod
  6859  114B  0878               	movf	??___llmod,w
  6860  114C  07F9               	addwf	___llmod@counter,f
  6861  114D  2940               	goto	l2740
  6862  114E                     l2742:	
  6863  114E  0873               	movf	___llmod@divisor+3,w
  6864  114F  0277               	subwf	___llmod@dividend+3,w
  6865  1150  1D03               	skipz
  6866  1151  295C               	goto	u4175
  6867  1152  0872               	movf	___llmod@divisor+2,w
  6868  1153  0276               	subwf	___llmod@dividend+2,w
  6869  1154  1D03               	skipz
  6870  1155  295C               	goto	u4175
  6871  1156  0871               	movf	___llmod@divisor+1,w
  6872  1157  0275               	subwf	___llmod@dividend+1,w
  6873  1158  1D03               	skipz
  6874  1159  295C               	goto	u4175
  6875  115A  0870               	movf	___llmod@divisor,w
  6876  115B  0274               	subwf	___llmod@dividend,w
  6877  115C                     u4175:	
  6878  115C  1C03               	skipc
  6879  115D  2966               	goto	l2746
  6880  115E  0870               	movf	___llmod@divisor,w
  6881  115F  02F4               	subwf	___llmod@dividend,f
  6882  1160  0871               	movf	___llmod@divisor+1,w
  6883  1161  3BF5               	subwfb	___llmod@dividend+1,f
  6884  1162  0872               	movf	___llmod@divisor+2,w
  6885  1163  3BF6               	subwfb	___llmod@dividend+2,f
  6886  1164  0873               	movf	___llmod@divisor+3,w
  6887  1165  3BF7               	subwfb	___llmod@dividend+3,f
  6888  1166                     l2746:	
  6889  1166  3001               	movlw	1
  6890  1167                     u4185:	
  6891  1167  36F3               	lsrf	___llmod@divisor+3,f
  6892  1168  0CF2               	rrf	___llmod@divisor+2,f
  6893  1169  0CF1               	rrf	___llmod@divisor+1,f
  6894  116A  0CF0               	rrf	___llmod@divisor,f
  6895  116B  0B89               	decfsz	9,f
  6896  116C  2967               	goto	u4185
  6897  116D  3001               	movlw	1
  6898  116E  02F9               	subwf	___llmod@counter,f
  6899  116F  1D03               	btfss	3,2
  6900  1170  294E               	goto	l2742
  6901  1171                     l2750:	
  6902  1171  0877               	movf	___llmod@dividend+3,w
  6903  1172  00F3               	movwf	?___llmod+3
  6904  1173  0876               	movf	___llmod@dividend+2,w
  6905  1174  00F2               	movwf	?___llmod+2
  6906  1175  0875               	movf	___llmod@dividend+1,w
  6907  1176  00F1               	movwf	?___llmod+1
  6908  1177  0874               	movf	___llmod@dividend,w
  6909  1178  00F0               	movwf	?___llmod
  6910  1179  0008               	return
  6911  117A                     __end_of___llmod:	
  6912                           
  6913                           	psect	text14
  6914  11BF                     __ptext14:	
  6915 ;; *************** function ___lldiv *****************
  6916 ;; Defined at:
  6917 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  6918 ;; Parameters:    Size  Location     Type
  6919 ;;  divisor         4    0[COMMON] unsigned long 
  6920 ;;  dividend        4    4[COMMON] unsigned long 
  6921 ;; Auto vars:     Size  Location     Type
  6922 ;;  quotient        4    9[COMMON] unsigned long 
  6923 ;;  counter         1   13[COMMON] unsigned char 
  6924 ;; Return value:  Size  Location     Type
  6925 ;;                  4    0[COMMON] unsigned long 
  6926 ;; Registers used:
  6927 ;;		wreg, status,2, status,0
  6928 ;; Tracked objects:
  6929 ;;		On entry : 0/0
  6930 ;;		On exit  : 0/0
  6931 ;;		Unchanged: 0/0
  6932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6933 ;;      Params:         8       0       0       0       0       0       0       0
  6934 ;;      Locals:         5       0       0       0       0       0       0       0
  6935 ;;      Temps:          1       0       0       0       0       0       0       0
  6936 ;;      Totals:        14       0       0       0       0       0       0       0
  6937 ;;Total ram usage:       14 bytes
  6938 ;; Hardware stack levels used:    1
  6939 ;; This function calls:
  6940 ;;		Nothing
  6941 ;; This function is called by:
  6942 ;;		_sprintf
  6943 ;; This function uses a non-reentrant model
  6944 ;;
  6945                           
  6946                           
  6947                           ;psect for function ___lldiv
  6948  11BF                     ___lldiv:	
  6949                           
  6950                           ;incstack = 0
  6951                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6952  11BF  3000               	movlw	0
  6953  11C0  00FC               	movwf	___lldiv@quotient+3
  6954  11C1  3000               	movlw	0
  6955  11C2  00FB               	movwf	___lldiv@quotient+2
  6956  11C3  3000               	movlw	0
  6957  11C4  00FA               	movwf	___lldiv@quotient+1
  6958  11C5  3000               	movlw	0
  6959  11C6  00F9               	movwf	___lldiv@quotient
  6960  11C7  0873               	movf	___lldiv@divisor+3,w
  6961  11C8  0472               	iorwf	___lldiv@divisor+2,w
  6962  11C9  0471               	iorwf	___lldiv@divisor+1,w
  6963  11CA  0470               	iorwf	___lldiv@divisor,w
  6964  11CB  1903               	skipnz
  6965  11CC  2A08               	goto	l2730
  6966  11CD  01FD               	clrf	___lldiv@counter
  6967  11CE  0AFD               	incf	___lldiv@counter,f
  6968  11CF                     l2716:	
  6969  11CF  1BF3               	btfsc	___lldiv@divisor+3,7
  6970  11D0  29DD               	goto	l2718
  6971  11D1  3001               	movlw	1
  6972  11D2                     u4085:	
  6973  11D2  35F0               	lslf	___lldiv@divisor,f
  6974  11D3  0DF1               	rlf	___lldiv@divisor+1,f
  6975  11D4  0DF2               	rlf	___lldiv@divisor+2,f
  6976  11D5  0DF3               	rlf	___lldiv@divisor+3,f
  6977  11D6  0B89               	decfsz	9,f
  6978  11D7  29D2               	goto	u4085
  6979  11D8  3001               	movlw	1
  6980  11D9  00F8               	movwf	??___lldiv
  6981  11DA  0878               	movf	??___lldiv,w
  6982  11DB  07FD               	addwf	___lldiv@counter,f
  6983  11DC  29CF               	goto	l2716
  6984  11DD                     l2718:	
  6985  11DD  3001               	movlw	1
  6986  11DE                     u4105:	
  6987  11DE  35F9               	lslf	___lldiv@quotient,f
  6988  11DF  0DFA               	rlf	___lldiv@quotient+1,f
  6989  11E0  0DFB               	rlf	___lldiv@quotient+2,f
  6990  11E1  0DFC               	rlf	___lldiv@quotient+3,f
  6991  11E2  0B89               	decfsz	9,f
  6992  11E3  29DE               	goto	u4105
  6993  11E4  0873               	movf	___lldiv@divisor+3,w
  6994  11E5  0277               	subwf	___lldiv@dividend+3,w
  6995  11E6  1D03               	skipz
  6996  11E7  29F2               	goto	u4115
  6997  11E8  0872               	movf	___lldiv@divisor+2,w
  6998  11E9  0276               	subwf	___lldiv@dividend+2,w
  6999  11EA  1D03               	skipz
  7000  11EB  29F2               	goto	u4115
  7001  11EC  0871               	movf	___lldiv@divisor+1,w
  7002  11ED  0275               	subwf	___lldiv@dividend+1,w
  7003  11EE  1D03               	skipz
  7004  11EF  29F2               	goto	u4115
  7005  11F0  0870               	movf	___lldiv@divisor,w
  7006  11F1  0274               	subwf	___lldiv@dividend,w
  7007  11F2                     u4115:	
  7008  11F2  1C03               	skipc
  7009  11F3  29FD               	goto	l2726
  7010  11F4  0870               	movf	___lldiv@divisor,w
  7011  11F5  02F4               	subwf	___lldiv@dividend,f
  7012  11F6  0871               	movf	___lldiv@divisor+1,w
  7013  11F7  3BF5               	subwfb	___lldiv@dividend+1,f
  7014  11F8  0872               	movf	___lldiv@divisor+2,w
  7015  11F9  3BF6               	subwfb	___lldiv@dividend+2,f
  7016  11FA  0873               	movf	___lldiv@divisor+3,w
  7017  11FB  3BF7               	subwfb	___lldiv@dividend+3,f
  7018  11FC  1479               	bsf	___lldiv@quotient,0
  7019  11FD                     l2726:	
  7020  11FD  3001               	movlw	1
  7021  11FE                     u4125:	
  7022  11FE  36F3               	lsrf	___lldiv@divisor+3,f
  7023  11FF  0CF2               	rrf	___lldiv@divisor+2,f
  7024  1200  0CF1               	rrf	___lldiv@divisor+1,f
  7025  1201  0CF0               	rrf	___lldiv@divisor,f
  7026  1202  0B89               	decfsz	9,f
  7027  1203  29FE               	goto	u4125
  7028  1204  3001               	movlw	1
  7029  1205  02FD               	subwf	___lldiv@counter,f
  7030  1206  1D03               	btfss	3,2
  7031  1207  29DD               	goto	l2718
  7032  1208                     l2730:	
  7033  1208  087C               	movf	___lldiv@quotient+3,w
  7034  1209  00F3               	movwf	?___lldiv+3
  7035  120A  087B               	movf	___lldiv@quotient+2,w
  7036  120B  00F2               	movwf	?___lldiv+2
  7037  120C  087A               	movf	___lldiv@quotient+1,w
  7038  120D  00F1               	movwf	?___lldiv+1
  7039  120E  0879               	movf	___lldiv@quotient,w
  7040  120F  00F0               	movwf	?___lldiv
  7041  1210  0008               	return
  7042  1211                     __end_of___lldiv:	
  7043                           
  7044                           	psect	text15
  7045  12C7                     __ptext15:	
  7046 ;; *************** function ___fttol *****************
  7047 ;; Defined at:
  7048 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;  f1              3   33[BANK0 ] float 
  7051 ;; Auto vars:     Size  Location     Type
  7052 ;;  lval            4   42[BANK0 ] unsigned long 
  7053 ;;  exp1            1   46[BANK0 ] unsigned char 
  7054 ;;  sign1           1   41[BANK0 ] unsigned char 
  7055 ;; Return value:  Size  Location     Type
  7056 ;;                  4   33[BANK0 ] long 
  7057 ;; Registers used:
  7058 ;;		wreg, status,2, status,0
  7059 ;; Tracked objects:
  7060 ;;		On entry : 0/0
  7061 ;;		On exit  : 0/0
  7062 ;;		Unchanged: 0/0
  7063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7064 ;;      Params:         0       4       0       0       0       0       0       0
  7065 ;;      Locals:         0       6       0       0       0       0       0       0
  7066 ;;      Temps:          0       4       0       0       0       0       0       0
  7067 ;;      Totals:         0      14       0       0       0       0       0       0
  7068 ;;Total ram usage:       14 bytes
  7069 ;; Hardware stack levels used:    1
  7070 ;; This function calls:
  7071 ;;		Nothing
  7072 ;; This function is called by:
  7073 ;;		_sprintf
  7074 ;; This function uses a non-reentrant model
  7075 ;;
  7076                           
  7077                           
  7078                           ;psect for function ___fttol
  7079  12C7                     ___fttol:	
  7080                           
  7081                           ;incstack = 0
  7082                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7083  12C7  0020               	movlb	0	; select bank0
  7084  12C8  0841               	movf	___fttol@f1,w
  7085  12C9  00C5               	movwf	??___fttol
  7086  12CA  0842               	movf	___fttol@f1+1,w
  7087  12CB  00C6               	movwf	??___fttol+1
  7088  12CC  0843               	movf	___fttol@f1+2,w
  7089  12CD  00C7               	movwf	??___fttol+2
  7090  12CE  1003               	clrc
  7091  12CF  0D46               	rlf	??___fttol+1,w
  7092  12D0  0D47               	rlf	??___fttol+2,w
  7093  12D1  00C8               	movwf	??___fttol+3
  7094  12D2  0848               	movf	??___fttol+3,w
  7095  12D3  00CE               	movwf	___fttol@exp1
  7096  12D4  084E               	movf	___fttol@exp1,w
  7097  12D5  1D03               	btfss	3,2
  7098  12D6  2AE0               	goto	l2674
  7099  12D7  3000               	movlw	0
  7100  12D8  00C4               	movwf	?___fttol+3
  7101  12D9  3000               	movlw	0
  7102  12DA  00C3               	movwf	?___fttol+2
  7103  12DB  3000               	movlw	0
  7104  12DC  00C2               	movwf	?___fttol+1
  7105  12DD  3000               	movlw	0
  7106  12DE  00C1               	movwf	?___fttol
  7107  12DF  0008               	return
  7108  12E0                     l2674:	
  7109  12E0  0841               	movf	___fttol@f1,w
  7110  12E1  00C5               	movwf	??___fttol
  7111  12E2  0842               	movf	___fttol@f1+1,w
  7112  12E3  00C6               	movwf	??___fttol+1
  7113  12E4  0843               	movf	___fttol@f1+2,w
  7114  12E5  00C7               	movwf	??___fttol+2
  7115  12E6  3017               	movlw	23
  7116  12E7                     u3985:	
  7117  12E7  36C7               	lsrf	??___fttol+2,f
  7118  12E8  0CC6               	rrf	??___fttol+1,f
  7119  12E9  0CC5               	rrf	??___fttol,f
  7120  12EA  0B89               	decfsz	9,f
  7121  12EB  2AE7               	goto	u3985
  7122  12EC  0845               	movf	??___fttol,w
  7123  12ED  00C8               	movwf	??___fttol+3
  7124  12EE  0848               	movf	??___fttol+3,w
  7125  12EF  00C9               	movwf	___fttol@sign1
  7126  12F0  17C2               	bsf	___fttol@f1+1,7
  7127  12F1  30FF               	movlw	255
  7128  12F2  05C1               	andwf	___fttol@f1,f
  7129  12F3  30FF               	movlw	255
  7130  12F4  05C2               	andwf	___fttol@f1+1,f
  7131  12F5  3000               	movlw	0
  7132  12F6  05C3               	andwf	___fttol@f1+2,f
  7133  12F7  0841               	movf	___fttol@f1,w
  7134  12F8  00CA               	movwf	___fttol@lval
  7135  12F9  0842               	movf	___fttol@f1+1,w
  7136  12FA  00CB               	movwf	___fttol@lval+1
  7137  12FB  0843               	movf	___fttol@f1+2,w
  7138  12FC  00CC               	movwf	___fttol@lval+2
  7139  12FD  01CD               	clrf	___fttol@lval+3
  7140  12FE  308E               	movlw	142
  7141  12FF  02CE               	subwf	___fttol@exp1,f
  7142  1300  1FCE               	btfss	___fttol@exp1,7
  7143  1301  2B1E               	goto	l2694
  7144  1302  084E               	movf	___fttol@exp1,w
  7145  1303  3A80               	xorlw	128
  7146  1304  3E8F               	addlw	143
  7147  1305  1803               	skipnc
  7148  1306  2B10               	goto	l2692
  7149  1307  3000               	movlw	0
  7150  1308  00C4               	movwf	?___fttol+3
  7151  1309  3000               	movlw	0
  7152  130A  00C3               	movwf	?___fttol+2
  7153  130B  3000               	movlw	0
  7154  130C  00C2               	movwf	?___fttol+1
  7155  130D  3000               	movlw	0
  7156  130E  00C1               	movwf	?___fttol
  7157  130F  0008               	return
  7158  1310                     l2692:	
  7159  1310  3001               	movlw	1
  7160  1311                     u4015:	
  7161  1311  36CD               	lsrf	___fttol@lval+3,f
  7162  1312  0CCC               	rrf	___fttol@lval+2,f
  7163  1313  0CCB               	rrf	___fttol@lval+1,f
  7164  1314  0CCA               	rrf	___fttol@lval,f
  7165  1315  0B89               	decfsz	9,f
  7166  1316  2B11               	goto	u4015
  7167  1317  3001               	movlw	1
  7168  1318  00C5               	movwf	??___fttol
  7169  1319  0845               	movf	??___fttol,w
  7170  131A  07CE               	addwf	___fttol@exp1,f
  7171  131B  1903               	btfsc	3,2
  7172  131C  2B37               	goto	l2702
  7173  131D  2B10               	goto	l2692
  7174  131E                     l2694:	
  7175  131E  3018               	movlw	24
  7176  131F  024E               	subwf	___fttol@exp1,w
  7177  1320  1C03               	skipc
  7178  1321  2B34               	goto	l670
  7179  1322  3000               	movlw	0
  7180  1323  00C4               	movwf	?___fttol+3
  7181  1324  3000               	movlw	0
  7182  1325  00C3               	movwf	?___fttol+2
  7183  1326  3000               	movlw	0
  7184  1327  00C2               	movwf	?___fttol+1
  7185  1328  3000               	movlw	0
  7186  1329  00C1               	movwf	?___fttol
  7187  132A  0008               	return
  7188  132B                     l2700:	
  7189  132B  3001               	movlw	1
  7190  132C                     u4045:	
  7191  132C  35CA               	lslf	___fttol@lval,f
  7192  132D  0DCB               	rlf	___fttol@lval+1,f
  7193  132E  0DCC               	rlf	___fttol@lval+2,f
  7194  132F  0DCD               	rlf	___fttol@lval+3,f
  7195  1330  0B89               	decfsz	9,f
  7196  1331  2B2C               	goto	u4045
  7197  1332  3001               	movlw	1
  7198  1333  02CE               	subwf	___fttol@exp1,f
  7199  1334                     l670:	
  7200  1334  084E               	movf	___fttol@exp1,w
  7201  1335  1D03               	btfss	3,2
  7202  1336  2B2B               	goto	l2700
  7203  1337                     l2702:	
  7204  1337  0849               	movf	___fttol@sign1,w
  7205  1338  1903               	btfsc	3,2
  7206  1339  2B45               	goto	l2706
  7207  133A  09CA               	comf	___fttol@lval,f
  7208  133B  09CB               	comf	___fttol@lval+1,f
  7209  133C  09CC               	comf	___fttol@lval+2,f
  7210  133D  09CD               	comf	___fttol@lval+3,f
  7211  133E  0ACA               	incf	___fttol@lval,f
  7212  133F  1903               	skipnz
  7213  1340  0ACB               	incf	___fttol@lval+1,f
  7214  1341  1903               	skipnz
  7215  1342  0ACC               	incf	___fttol@lval+2,f
  7216  1343  1903               	skipnz
  7217  1344  0ACD               	incf	___fttol@lval+3,f
  7218  1345                     l2706:	
  7219  1345  084D               	movf	___fttol@lval+3,w
  7220  1346  00C4               	movwf	?___fttol+3
  7221  1347  084C               	movf	___fttol@lval+2,w
  7222  1348  00C3               	movwf	?___fttol+2
  7223  1349  084B               	movf	___fttol@lval+1,w
  7224  134A  00C2               	movwf	?___fttol+1
  7225  134B  084A               	movf	___fttol@lval,w
  7226  134C  00C1               	movwf	?___fttol
  7227  134D  0008               	return
  7228  134E                     __end_of___fttol:	
  7229                           
  7230                           	psect	text16
  7231  1095                     __ptext16:	
  7232 ;; *************** function ___ftsub *****************
  7233 ;; Defined at:
  7234 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  7235 ;; Parameters:    Size  Location     Type
  7236 ;;  f2              3   51[BANK0 ] float 
  7237 ;;  f1              3   54[BANK0 ] float 
  7238 ;; Auto vars:     Size  Location     Type
  7239 ;;		None
  7240 ;; Return value:  Size  Location     Type
  7241 ;;                  3   51[BANK0 ] float 
  7242 ;; Registers used:
  7243 ;;		wreg, status,2, status,0, pclath, cstack
  7244 ;; Tracked objects:
  7245 ;;		On entry : 0/0
  7246 ;;		On exit  : 0/0
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7249 ;;      Params:         0       6       0       0       0       0       0       0
  7250 ;;      Locals:         0       0       0       0       0       0       0       0
  7251 ;;      Temps:          0       0       0       0       0       0       0       0
  7252 ;;      Totals:         0       6       0       0       0       0       0       0
  7253 ;;Total ram usage:        6 bytes
  7254 ;; Hardware stack levels used:    1
  7255 ;; Hardware stack levels required when called:    2
  7256 ;; This function calls:
  7257 ;;		___ftadd
  7258 ;; This function is called by:
  7259 ;;		_sprintf
  7260 ;; This function uses a non-reentrant model
  7261 ;;
  7262                           
  7263                           
  7264                           ;psect for function ___ftsub
  7265  1095                     ___ftsub:	
  7266                           
  7267                           ;incstack = 0
  7268                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  7269  1095  0020               	movlb	0	; select bank0
  7270  1096  0855               	movf	___ftsub@f2+2,w
  7271  1097  0454               	iorwf	___ftsub@f2+1,w
  7272  1098  0453               	iorwf	___ftsub@f2,w
  7273  1099  1903               	skipnz
  7274  109A  289D               	goto	l2664
  7275  109B  3080               	movlw	128
  7276  109C  06D5               	xorwf	___ftsub@f2+2,f
  7277  109D                     l2664:	
  7278  109D  0856               	movf	___ftsub@f1,w
  7279  109E  00C6               	movwf	___ftadd@f1
  7280  109F  0857               	movf	___ftsub@f1+1,w
  7281  10A0  00C7               	movwf	___ftadd@f1+1
  7282  10A1  0858               	movf	___ftsub@f1+2,w
  7283  10A2  00C8               	movwf	___ftadd@f1+2
  7284  10A3  0853               	movf	___ftsub@f2,w
  7285  10A4  00C9               	movwf	___ftadd@f2
  7286  10A5  0854               	movf	___ftsub@f2+1,w
  7287  10A6  00CA               	movwf	___ftadd@f2+1
  7288  10A7  0855               	movf	___ftsub@f2+2,w
  7289  10A8  00CB               	movwf	___ftadd@f2+2
  7290  10A9  3195  25ED         	fcall	___ftadd
  7291  10AB  0020               	movlb	0	; select bank0
  7292  10AC  0846               	movf	?___ftadd,w
  7293  10AD  00D3               	movwf	?___ftsub
  7294  10AE  0847               	movf	?___ftadd+1,w
  7295  10AF  00D4               	movwf	?___ftsub+1
  7296  10B0  0848               	movf	?___ftadd+2,w
  7297  10B1  00D5               	movwf	?___ftsub+2
  7298  10B2  0008               	return
  7299  10B3                     __end_of___ftsub:	
  7300                           
  7301                           	psect	text17
  7302  15ED                     __ptext17:	
  7303 ;; *************** function ___ftadd *****************
  7304 ;; Defined at:
  7305 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  7306 ;; Parameters:    Size  Location     Type
  7307 ;;  f1              3   38[BANK0 ] float 
  7308 ;;  f2              3   41[BANK0 ] float 
  7309 ;; Auto vars:     Size  Location     Type
  7310 ;;  exp1            1   50[BANK0 ] unsigned char 
  7311 ;;  exp2            1   49[BANK0 ] unsigned char 
  7312 ;;  sign            1   48[BANK0 ] unsigned char 
  7313 ;; Return value:  Size  Location     Type
  7314 ;;                  3   38[BANK0 ] float 
  7315 ;; Registers used:
  7316 ;;		wreg, status,2, status,0, pclath, cstack
  7317 ;; Tracked objects:
  7318 ;;		On entry : 0/0
  7319 ;;		On exit  : 0/0
  7320 ;;		Unchanged: 0/0
  7321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7322 ;;      Params:         0       6       0       0       0       0       0       0
  7323 ;;      Locals:         0       3       0       0       0       0       0       0
  7324 ;;      Temps:          0       4       0       0       0       0       0       0
  7325 ;;      Totals:         0      13       0       0       0       0       0       0
  7326 ;;Total ram usage:       13 bytes
  7327 ;; Hardware stack levels used:    1
  7328 ;; Hardware stack levels required when called:    1
  7329 ;; This function calls:
  7330 ;;		___ftpack
  7331 ;; This function is called by:
  7332 ;;		_main
  7333 ;;		_sprintf
  7334 ;;		___ftsub
  7335 ;; This function uses a non-reentrant model
  7336 ;;
  7337                           
  7338                           
  7339                           ;psect for function ___ftadd
  7340  15ED                     ___ftadd:	
  7341                           
  7342                           ;incstack = 0
  7343                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7344  15ED  0020               	movlb	0	; select bank0
  7345  15EE  0846               	movf	___ftadd@f1,w
  7346  15EF  00CC               	movwf	??___ftadd
  7347  15F0  0847               	movf	___ftadd@f1+1,w
  7348  15F1  00CD               	movwf	??___ftadd+1
  7349  15F2  0848               	movf	___ftadd@f1+2,w
  7350  15F3  00CE               	movwf	??___ftadd+2
  7351  15F4  1003               	clrc
  7352  15F5  0D4D               	rlf	??___ftadd+1,w
  7353  15F6  0D4E               	rlf	??___ftadd+2,w
  7354  15F7  00CF               	movwf	??___ftadd+3
  7355  15F8  084F               	movf	??___ftadd+3,w
  7356  15F9  00D2               	movwf	___ftadd@exp1
  7357  15FA  0849               	movf	___ftadd@f2,w
  7358  15FB  00CC               	movwf	??___ftadd
  7359  15FC  084A               	movf	___ftadd@f2+1,w
  7360  15FD  00CD               	movwf	??___ftadd+1
  7361  15FE  084B               	movf	___ftadd@f2+2,w
  7362  15FF  00CE               	movwf	??___ftadd+2
  7363  1600  1003               	clrc
  7364  1601  0D4D               	rlf	??___ftadd+1,w
  7365  1602  0D4E               	rlf	??___ftadd+2,w
  7366  1603  00CF               	movwf	??___ftadd+3
  7367  1604  084F               	movf	??___ftadd+3,w
  7368  1605  00D1               	movwf	___ftadd@exp2
  7369  1606  0852               	movf	___ftadd@exp1,w
  7370  1607  1903               	btfsc	3,2
  7371  1608  2E15               	goto	l2202
  7372  1609  0851               	movf	___ftadd@exp2,w
  7373  160A  0252               	subwf	___ftadd@exp1,w
  7374  160B  1803               	skipnc
  7375  160C  2E1C               	goto	l2206
  7376  160D  0352               	decf	___ftadd@exp1,w
  7377  160E  3AFF               	xorlw	255
  7378  160F  0751               	addwf	___ftadd@exp2,w
  7379  1610  00CC               	movwf	??___ftadd
  7380  1611  3019               	movlw	25
  7381  1612  024C               	subwf	??___ftadd,w
  7382  1613  1C03               	skipc
  7383  1614  2E1C               	goto	l2206
  7384  1615                     l2202:	
  7385  1615  0849               	movf	___ftadd@f2,w
  7386  1616  00C6               	movwf	?___ftadd
  7387  1617  084A               	movf	___ftadd@f2+1,w
  7388  1618  00C7               	movwf	?___ftadd+1
  7389  1619  084B               	movf	___ftadd@f2+2,w
  7390  161A  00C8               	movwf	?___ftadd+2
  7391  161B  0008               	return
  7392  161C                     l2206:	
  7393  161C  0851               	movf	___ftadd@exp2,w
  7394  161D  1903               	btfsc	3,2
  7395  161E  0008               	return
  7396  161F  0852               	movf	___ftadd@exp1,w
  7397  1620  0251               	subwf	___ftadd@exp2,w
  7398  1621  1803               	skipnc
  7399  1622  2E2B               	goto	l2212
  7400  1623  0351               	decf	___ftadd@exp2,w
  7401  1624  3AFF               	xorlw	255
  7402  1625  0752               	addwf	___ftadd@exp1,w
  7403  1626  00CC               	movwf	??___ftadd
  7404  1627  3019               	movlw	25
  7405  1628  024C               	subwf	??___ftadd,w
  7406  1629  1803               	btfsc	3,0
  7407  162A  0008               	return
  7408  162B                     l2212:	
  7409  162B  3006               	movlw	6
  7410  162C  00CC               	movwf	??___ftadd
  7411  162D  084C               	movf	??___ftadd,w
  7412  162E  00D0               	movwf	___ftadd@sign
  7413  162F  1BC8               	btfsc	___ftadd@f1+2,7
  7414  1630  17D0               	bsf	___ftadd@sign,7
  7415  1631  1BCB               	btfsc	___ftadd@f2+2,7
  7416  1632  1750               	bsf	___ftadd@sign,6
  7417  1633  17C7               	bsf	___ftadd@f1+1,7
  7418  1634  30FF               	movlw	255
  7419  1635  05C6               	andwf	___ftadd@f1,f
  7420  1636  30FF               	movlw	255
  7421  1637  05C7               	andwf	___ftadd@f1+1,f
  7422  1638  3000               	movlw	0
  7423  1639  05C8               	andwf	___ftadd@f1+2,f
  7424  163A  17CA               	bsf	___ftadd@f2+1,7
  7425  163B  30FF               	movlw	255
  7426  163C  05C9               	andwf	___ftadd@f2,f
  7427  163D  30FF               	movlw	255
  7428  163E  05CA               	andwf	___ftadd@f2+1,f
  7429  163F  3000               	movlw	0
  7430  1640  05CB               	andwf	___ftadd@f2+2,f
  7431  1641  0851               	movf	___ftadd@exp2,w
  7432  1642  0252               	subwf	___ftadd@exp1,w
  7433  1643  1803               	skipnc
  7434  1644  2E67               	goto	l2234
  7435  1645                     l2224:	
  7436  1645  3001               	movlw	1
  7437  1646                     u2905:	
  7438  1646  35C9               	lslf	___ftadd@f2,f
  7439  1647  0DCA               	rlf	___ftadd@f2+1,f
  7440  1648  0DCB               	rlf	___ftadd@f2+2,f
  7441  1649  0B89               	decfsz	9,f
  7442  164A  2E46               	goto	u2905
  7443  164B  3001               	movlw	1
  7444  164C  02D1               	subwf	___ftadd@exp2,f
  7445  164D  0851               	movf	___ftadd@exp2,w
  7446  164E  0652               	xorwf	___ftadd@exp1,w
  7447  164F  1903               	skipnz
  7448  1650  2E62               	goto	l2232
  7449  1651  3001               	movlw	1
  7450  1652  02D0               	subwf	___ftadd@sign,f
  7451  1653  0850               	movf	___ftadd@sign,w
  7452  1654  3907               	andlw	7
  7453  1655  1903               	btfsc	3,2
  7454  1656  2E62               	goto	l2232
  7455  1657  2E45               	goto	l2224
  7456  1658                     l2230:	
  7457  1658  3001               	movlw	1
  7458  1659                     u2935:	
  7459  1659  36C8               	lsrf	___ftadd@f1+2,f
  7460  165A  0CC7               	rrf	___ftadd@f1+1,f
  7461  165B  0CC6               	rrf	___ftadd@f1,f
  7462  165C  0B89               	decfsz	9,f
  7463  165D  2E59               	goto	u2935
  7464  165E  3001               	movlw	1
  7465  165F  00CC               	movwf	??___ftadd
  7466  1660  084C               	movf	??___ftadd,w
  7467  1661  07D2               	addwf	___ftadd@exp1,f
  7468  1662                     l2232:	
  7469  1662  0852               	movf	___ftadd@exp1,w
  7470  1663  0651               	xorwf	___ftadd@exp2,w
  7471  1664  1903               	btfsc	3,2
  7472  1665  2E8C               	goto	l593
  7473  1666  2E58               	goto	l2230
  7474  1667                     l2234:	
  7475  1667  0852               	movf	___ftadd@exp1,w
  7476  1668  0251               	subwf	___ftadd@exp2,w
  7477  1669  1803               	skipnc
  7478  166A  2E8C               	goto	l593
  7479  166B                     l2236:	
  7480  166B  3001               	movlw	1
  7481  166C                     u2965:	
  7482  166C  35C6               	lslf	___ftadd@f1,f
  7483  166D  0DC7               	rlf	___ftadd@f1+1,f
  7484  166E  0DC8               	rlf	___ftadd@f1+2,f
  7485  166F  0B89               	decfsz	9,f
  7486  1670  2E6C               	goto	u2965
  7487  1671  3001               	movlw	1
  7488  1672  02D2               	subwf	___ftadd@exp1,f
  7489  1673  0851               	movf	___ftadd@exp2,w
  7490  1674  0652               	xorwf	___ftadd@exp1,w
  7491  1675  1903               	skipnz
  7492  1676  2E88               	goto	l2244
  7493  1677  3001               	movlw	1
  7494  1678  02D0               	subwf	___ftadd@sign,f
  7495  1679  0850               	movf	___ftadd@sign,w
  7496  167A  3907               	andlw	7
  7497  167B  1903               	btfsc	3,2
  7498  167C  2E88               	goto	l2244
  7499  167D  2E6B               	goto	l2236
  7500  167E                     l2242:	
  7501  167E  3001               	movlw	1
  7502  167F                     u2995:	
  7503  167F  36CB               	lsrf	___ftadd@f2+2,f
  7504  1680  0CCA               	rrf	___ftadd@f2+1,f
  7505  1681  0CC9               	rrf	___ftadd@f2,f
  7506  1682  0B89               	decfsz	9,f
  7507  1683  2E7F               	goto	u2995
  7508  1684  3001               	movlw	1
  7509  1685  00CC               	movwf	??___ftadd
  7510  1686  084C               	movf	??___ftadd,w
  7511  1687  07D1               	addwf	___ftadd@exp2,f
  7512  1688                     l2244:	
  7513  1688  0852               	movf	___ftadd@exp1,w
  7514  1689  0651               	xorwf	___ftadd@exp2,w
  7515  168A  1D03               	skipz
  7516  168B  2E7E               	goto	l2242
  7517  168C                     l593:	
  7518  168C  1FD0               	btfss	___ftadd@sign,7
  7519  168D  2E9E               	goto	l2248
  7520  168E  30FF               	movlw	255
  7521  168F  06C6               	xorwf	___ftadd@f1,f
  7522  1690  30FF               	movlw	255
  7523  1691  06C7               	xorwf	___ftadd@f1+1,f
  7524  1692  30FF               	movlw	255
  7525  1693  06C8               	xorwf	___ftadd@f1+2,f
  7526  1694  3001               	movlw	1
  7527  1695  07C6               	addwf	___ftadd@f1,f
  7528  1696  3000               	movlw	0
  7529  1697  1803               	skipnc
  7530  1698  3001               	movlw	1
  7531  1699  07C7               	addwf	___ftadd@f1+1,f
  7532  169A  3000               	movlw	0
  7533  169B  1803               	skipnc
  7534  169C  3001               	movlw	1
  7535  169D  07C8               	addwf	___ftadd@f1+2,f
  7536  169E                     l2248:	
  7537  169E  1F50               	btfss	___ftadd@sign,6
  7538  169F  2EB0               	goto	l2252
  7539  16A0  30FF               	movlw	255
  7540  16A1  06C9               	xorwf	___ftadd@f2,f
  7541  16A2  30FF               	movlw	255
  7542  16A3  06CA               	xorwf	___ftadd@f2+1,f
  7543  16A4  30FF               	movlw	255
  7544  16A5  06CB               	xorwf	___ftadd@f2+2,f
  7545  16A6  3001               	movlw	1
  7546  16A7  07C9               	addwf	___ftadd@f2,f
  7547  16A8  3000               	movlw	0
  7548  16A9  1803               	skipnc
  7549  16AA  3001               	movlw	1
  7550  16AB  07CA               	addwf	___ftadd@f2+1,f
  7551  16AC  3000               	movlw	0
  7552  16AD  1803               	skipnc
  7553  16AE  3001               	movlw	1
  7554  16AF  07CB               	addwf	___ftadd@f2+2,f
  7555  16B0                     l2252:	
  7556  16B0  01D0               	clrf	___ftadd@sign
  7557  16B1  0846               	movf	___ftadd@f1,w
  7558  16B2  07C9               	addwf	___ftadd@f2,f
  7559  16B3  0847               	movf	___ftadd@f1+1,w
  7560  16B4  3DCA               	addwfc	___ftadd@f2+1,f
  7561  16B5  0848               	movf	___ftadd@f1+2,w
  7562  16B6  3DCB               	addwfc	___ftadd@f2+2,f
  7563  16B7  1FCB               	btfss	___ftadd@f2+2,7
  7564  16B8  2ECB               	goto	l2262
  7565  16B9  30FF               	movlw	255
  7566  16BA  06C9               	xorwf	___ftadd@f2,f
  7567  16BB  30FF               	movlw	255
  7568  16BC  06CA               	xorwf	___ftadd@f2+1,f
  7569  16BD  30FF               	movlw	255
  7570  16BE  06CB               	xorwf	___ftadd@f2+2,f
  7571  16BF  3001               	movlw	1
  7572  16C0  07C9               	addwf	___ftadd@f2,f
  7573  16C1  3000               	movlw	0
  7574  16C2  1803               	skipnc
  7575  16C3  3001               	movlw	1
  7576  16C4  07CA               	addwf	___ftadd@f2+1,f
  7577  16C5  3000               	movlw	0
  7578  16C6  1803               	skipnc
  7579  16C7  3001               	movlw	1
  7580  16C8  07CB               	addwf	___ftadd@f2+2,f
  7581  16C9  01D0               	clrf	___ftadd@sign
  7582  16CA  0AD0               	incf	___ftadd@sign,f
  7583  16CB                     l2262:	
  7584  16CB  0849               	movf	___ftadd@f2,w
  7585  16CC  00F0               	movwf	___ftpack@arg
  7586  16CD  084A               	movf	___ftadd@f2+1,w
  7587  16CE  00F1               	movwf	___ftpack@arg+1
  7588  16CF  084B               	movf	___ftadd@f2+2,w
  7589  16D0  00F2               	movwf	___ftpack@arg+2
  7590  16D1  0852               	movf	___ftadd@exp1,w
  7591  16D2  00CC               	movwf	??___ftadd
  7592  16D3  084C               	movf	??___ftadd,w
  7593  16D4  00F3               	movwf	___ftpack@exp
  7594  16D5  0850               	movf	___ftadd@sign,w
  7595  16D6  00CD               	movwf	??___ftadd+1
  7596  16D7  084D               	movf	??___ftadd+1,w
  7597  16D8  00F4               	movwf	___ftpack@sign
  7598  16D9  3192  2263         	fcall	___ftpack
  7599  16DB  0870               	movf	?___ftpack,w
  7600  16DC  0020               	movlb	0	; select bank0
  7601  16DD  00C6               	movwf	?___ftadd
  7602  16DE  0871               	movf	?___ftpack+1,w
  7603  16DF  00C7               	movwf	?___ftadd+1
  7604  16E0  0872               	movf	?___ftpack+2,w
  7605  16E1  00C8               	movwf	?___ftadd+2
  7606  16E2  0008               	return
  7607  16E3                     __end_of___ftadd:	
  7608                           
  7609                           	psect	text18
  7610  1059                     __ptext18:	
  7611 ;; *************** function ___ftneg *****************
  7612 ;; Defined at:
  7613 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
  7614 ;; Parameters:    Size  Location     Type
  7615 ;;  f1              3    0[COMMON] float 
  7616 ;; Auto vars:     Size  Location     Type
  7617 ;;		None
  7618 ;; Return value:  Size  Location     Type
  7619 ;;                  3    0[COMMON] float 
  7620 ;; Registers used:
  7621 ;;		wreg
  7622 ;; Tracked objects:
  7623 ;;		On entry : 0/0
  7624 ;;		On exit  : 0/0
  7625 ;;		Unchanged: 0/0
  7626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7627 ;;      Params:         3       0       0       0       0       0       0       0
  7628 ;;      Locals:         0       0       0       0       0       0       0       0
  7629 ;;      Temps:          0       0       0       0       0       0       0       0
  7630 ;;      Totals:         3       0       0       0       0       0       0       0
  7631 ;;Total ram usage:        3 bytes
  7632 ;; Hardware stack levels used:    1
  7633 ;; This function calls:
  7634 ;;		Nothing
  7635 ;; This function is called by:
  7636 ;;		_main
  7637 ;;		_sprintf
  7638 ;; This function uses a non-reentrant model
  7639 ;;
  7640                           
  7641                           
  7642                           ;psect for function ___ftneg
  7643  1059                     ___ftneg:	
  7644                           
  7645                           ;incstack = 0
  7646                           ; Regs used in ___ftneg: [wreg]
  7647  1059  0872               	movf	___ftneg@f1+2,w
  7648  105A  0471               	iorwf	___ftneg@f1+1,w
  7649  105B  0470               	iorwf	___ftneg@f1,w
  7650  105C  1903               	skipnz
  7651  105D  0008               	return
  7652  105E  3080               	movlw	128
  7653  105F  06F2               	xorwf	___ftneg@f1+2,f
  7654  1060  0008               	return
  7655  1061                     __end_of___ftneg:	
  7656                           
  7657                           	psect	text19
  7658  10FD                     __ptext19:	
  7659 ;; *************** function ___ftge *****************
  7660 ;; Defined at:
  7661 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  7662 ;; Parameters:    Size  Location     Type
  7663 ;;  ff1             3    0[COMMON] float 
  7664 ;;  ff2             3    3[COMMON] float 
  7665 ;; Auto vars:     Size  Location     Type
  7666 ;;		None
  7667 ;; Return value:  Size  Location     Type
  7668 ;;		None               void
  7669 ;; Registers used:
  7670 ;;		wreg, status,2, status,0
  7671 ;; Tracked objects:
  7672 ;;		On entry : 0/0
  7673 ;;		On exit  : 0/0
  7674 ;;		Unchanged: 0/0
  7675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7676 ;;      Params:         6       0       0       0       0       0       0       0
  7677 ;;      Locals:         0       0       0       0       0       0       0       0
  7678 ;;      Temps:          3       0       0       0       0       0       0       0
  7679 ;;      Totals:         9       0       0       0       0       0       0       0
  7680 ;;Total ram usage:        9 bytes
  7681 ;; Hardware stack levels used:    1
  7682 ;; This function calls:
  7683 ;;		Nothing
  7684 ;; This function is called by:
  7685 ;;		_sprintf
  7686 ;; This function uses a non-reentrant model
  7687 ;;
  7688                           
  7689                           
  7690                           ;psect for function ___ftge
  7691  10FD                     ___ftge:	
  7692                           
  7693                           ;incstack = 0
  7694                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7695  10FD  1FF2               	btfss	___ftge@ff1+2,7
  7696  10FE  2913               	goto	l2636
  7697  10FF  0970               	comf	___ftge@ff1,w
  7698  1100  00F6               	movwf	??___ftge
  7699  1101  0971               	comf	___ftge@ff1+1,w
  7700  1102  00F7               	movwf	??___ftge+1
  7701  1103  0972               	comf	___ftge@ff1+2,w
  7702  1104  00F8               	movwf	??___ftge+2
  7703  1105  0AF6               	incf	??___ftge,f
  7704  1106  1903               	skipnz
  7705  1107  0AF7               	incf	??___ftge+1,f
  7706  1108  1903               	skipnz
  7707  1109  0AF8               	incf	??___ftge+2,f
  7708  110A  3000               	movlw	0
  7709  110B  0776               	addwf	??___ftge,w
  7710  110C  00F0               	movwf	___ftge@ff1
  7711  110D  3000               	movlw	0
  7712  110E  3D77               	addwfc	??___ftge+1,w
  7713  110F  00F1               	movwf	___ftge@ff1+1
  7714  1110  3080               	movlw	128
  7715  1111  3D78               	addwfc	??___ftge+2,w
  7716  1112  00F2               	movwf	___ftge@ff1+2
  7717  1113                     l2636:	
  7718  1113  1FF5               	btfss	___ftge@ff2+2,7
  7719  1114  2929               	goto	l2640
  7720  1115  0973               	comf	___ftge@ff2,w
  7721  1116  00F6               	movwf	??___ftge
  7722  1117  0974               	comf	___ftge@ff2+1,w
  7723  1118  00F7               	movwf	??___ftge+1
  7724  1119  0975               	comf	___ftge@ff2+2,w
  7725  111A  00F8               	movwf	??___ftge+2
  7726  111B  0AF6               	incf	??___ftge,f
  7727  111C  1903               	skipnz
  7728  111D  0AF7               	incf	??___ftge+1,f
  7729  111E  1903               	skipnz
  7730  111F  0AF8               	incf	??___ftge+2,f
  7731  1120  3000               	movlw	0
  7732  1121  0776               	addwf	??___ftge,w
  7733  1122  00F3               	movwf	___ftge@ff2
  7734  1123  3000               	movlw	0
  7735  1124  3D77               	addwfc	??___ftge+1,w
  7736  1125  00F4               	movwf	___ftge@ff2+1
  7737  1126  3080               	movlw	128
  7738  1127  3D78               	addwfc	??___ftge+2,w
  7739  1128  00F5               	movwf	___ftge@ff2+2
  7740  1129                     l2640:	
  7741  1129  3080               	movlw	128
  7742  112A  06F2               	xorwf	___ftge@ff1+2,f
  7743  112B  3080               	movlw	128
  7744  112C  06F5               	xorwf	___ftge@ff2+2,f
  7745  112D  0875               	movf	___ftge@ff2+2,w
  7746  112E  0272               	subwf	___ftge@ff1+2,w
  7747  112F  1D03               	skipz
  7748  1130  0008               	return
  7749  1131  0874               	movf	___ftge@ff2+1,w
  7750  1132  0271               	subwf	___ftge@ff1+1,w
  7751  1133  1D03               	skipz
  7752  1134  0008               	return
  7753  1135  0873               	movf	___ftge@ff2,w
  7754  1136  0270               	subwf	___ftge@ff1,w
  7755  1137  0008               	return
  7756  1138                     __end_of___ftge:	
  7757                           
  7758                           	psect	text20
  7759  1049                     __ptext20:	
  7760 ;; *************** function _clear *****************
  7761 ;; Defined at:
  7762 ;;		line 138 in file "main.c"
  7763 ;; Parameters:    Size  Location     Type
  7764 ;;		None
  7765 ;; Auto vars:     Size  Location     Type
  7766 ;;		None
  7767 ;; Return value:  Size  Location     Type
  7768 ;;                  1    wreg      void 
  7769 ;; Registers used:
  7770 ;;		wreg, status,2, status,0, pclath, cstack
  7771 ;; Tracked objects:
  7772 ;;		On entry : 0/0
  7773 ;;		On exit  : 0/0
  7774 ;;		Unchanged: 0/0
  7775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7776 ;;      Params:         0       0       0       0       0       0       0       0
  7777 ;;      Locals:         0       0       0       0       0       0       0       0
  7778 ;;      Temps:          0       0       0       0       0       0       0       0
  7779 ;;      Totals:         0       0       0       0       0       0       0       0
  7780 ;;Total ram usage:        0 bytes
  7781 ;; Hardware stack levels used:    1
  7782 ;; Hardware stack levels required when called:    1
  7783 ;; This function calls:
  7784 ;;		_Lcd_Cmd
  7785 ;; This function is called by:
  7786 ;;		_main
  7787 ;; This function uses a non-reentrant model
  7788 ;;
  7789                           
  7790                           
  7791                           ;psect for function _clear
  7792  1049                     _clear:	
  7793                           
  7794                           ;main.c: 139: Lcd_Cmd(1);
  7795                           
  7796                           ;incstack = 0
  7797                           ; Regs used in _clear: [wreg+status,2+status,0+pclath+cstack]
  7798  1049  3001               	movlw	1
  7799  104A  3193  234E         	fcall	_Lcd_Cmd
  7800  104C  0008               	return
  7801  104D                     __end_of_clear:	
  7802                           ;main.c: 141: return;
  7803                           
  7804                           
  7805                           	psect	text21
  7806  13E7                     __ptext21:	
  7807 ;; *************** function ___ftdiv *****************
  7808 ;; Defined at:
  7809 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
  7810 ;; Parameters:    Size  Location     Type
  7811 ;;  f2              3    8[COMMON] float 
  7812 ;;  f1              3   11[COMMON] float 
  7813 ;; Auto vars:     Size  Location     Type
  7814 ;;  f3              3    5[BANK0 ] float 
  7815 ;;  sign            1    9[BANK0 ] unsigned char 
  7816 ;;  exp             1    8[BANK0 ] unsigned char 
  7817 ;;  cntr            1    4[BANK0 ] unsigned char 
  7818 ;; Return value:  Size  Location     Type
  7819 ;;                  3    8[COMMON] float 
  7820 ;; Registers used:
  7821 ;;		wreg, status,2, status,0, pclath, cstack
  7822 ;; Tracked objects:
  7823 ;;		On entry : 0/0
  7824 ;;		On exit  : 0/0
  7825 ;;		Unchanged: 0/0
  7826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7827 ;;      Params:         6       0       0       0       0       0       0       0
  7828 ;;      Locals:         0       6       0       0       0       0       0       0
  7829 ;;      Temps:          0       4       0       0       0       0       0       0
  7830 ;;      Totals:         6      10       0       0       0       0       0       0
  7831 ;;Total ram usage:       16 bytes
  7832 ;; Hardware stack levels used:    1
  7833 ;; Hardware stack levels required when called:    1
  7834 ;; This function calls:
  7835 ;;		___ftpack
  7836 ;; This function is called by:
  7837 ;;		_main
  7838 ;; This function uses a non-reentrant model
  7839 ;;
  7840                           
  7841                           
  7842                           ;psect for function ___ftdiv
  7843  13E7                     ___ftdiv:	
  7844                           
  7845                           ;incstack = 0
  7846                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  7847  13E7  087B               	movf	___ftdiv@f1,w
  7848  13E8  0020               	movlb	0	; select bank0
  7849  13E9  00A0               	movwf	??___ftdiv
  7850  13EA  087C               	movf	___ftdiv@f1+1,w
  7851  13EB  00A1               	movwf	??___ftdiv+1
  7852  13EC  087D               	movf	___ftdiv@f1+2,w
  7853  13ED  00A2               	movwf	??___ftdiv+2
  7854  13EE  1003               	clrc
  7855  13EF  0D21               	rlf	??___ftdiv+1,w
  7856  13F0  0D22               	rlf	??___ftdiv+2,w
  7857  13F1  00A3               	movwf	??___ftdiv+3
  7858  13F2  0823               	movf	??___ftdiv+3,w
  7859  13F3  00A8               	movwf	___ftdiv@exp
  7860  13F4  0828               	movf	___ftdiv@exp,w
  7861  13F5  1D03               	btfss	3,2
  7862  13F6  2BFE               	goto	l3048
  7863  13F7  3000               	movlw	0
  7864  13F8  00F8               	movwf	?___ftdiv
  7865  13F9  3000               	movlw	0
  7866  13FA  00F9               	movwf	?___ftdiv+1
  7867  13FB  3000               	movlw	0
  7868  13FC  00FA               	movwf	?___ftdiv+2
  7869  13FD  0008               	return
  7870  13FE                     l3048:	
  7871  13FE  0878               	movf	___ftdiv@f2,w
  7872  13FF  00A0               	movwf	??___ftdiv
  7873  1400  0879               	movf	___ftdiv@f2+1,w
  7874  1401  00A1               	movwf	??___ftdiv+1
  7875  1402  087A               	movf	___ftdiv@f2+2,w
  7876  1403  00A2               	movwf	??___ftdiv+2
  7877  1404  1003               	clrc
  7878  1405  0D21               	rlf	??___ftdiv+1,w
  7879  1406  0D22               	rlf	??___ftdiv+2,w
  7880  1407  00A3               	movwf	??___ftdiv+3
  7881  1408  0823               	movf	??___ftdiv+3,w
  7882  1409  00A9               	movwf	___ftdiv@sign
  7883  140A  0829               	movf	___ftdiv@sign,w
  7884  140B  1D03               	btfss	3,2
  7885  140C  2C14               	goto	l3054
  7886  140D  3000               	movlw	0
  7887  140E  00F8               	movwf	?___ftdiv
  7888  140F  3000               	movlw	0
  7889  1410  00F9               	movwf	?___ftdiv+1
  7890  1411  3000               	movlw	0
  7891  1412  00FA               	movwf	?___ftdiv+2
  7892  1413  0008               	return
  7893  1414                     l3054:	
  7894  1414  3000               	movlw	0
  7895  1415  00A5               	movwf	___ftdiv@f3
  7896  1416  3000               	movlw	0
  7897  1417  00A6               	movwf	___ftdiv@f3+1
  7898  1418  3000               	movlw	0
  7899  1419  00A7               	movwf	___ftdiv@f3+2
  7900  141A  3089               	movlw	137
  7901  141B  0729               	addwf	___ftdiv@sign,w
  7902  141C  00A0               	movwf	??___ftdiv
  7903  141D  0820               	movf	??___ftdiv,w
  7904  141E  02A8               	subwf	___ftdiv@exp,f
  7905  141F  087B               	movf	___ftdiv@f1,w
  7906  1420  00A0               	movwf	??___ftdiv
  7907  1421  087C               	movf	___ftdiv@f1+1,w
  7908  1422  00A1               	movwf	??___ftdiv+1
  7909  1423  087D               	movf	___ftdiv@f1+2,w
  7910  1424  00A2               	movwf	??___ftdiv+2
  7911  1425  3010               	movlw	16
  7912  1426                     u4555:	
  7913  1426  36A2               	lsrf	??___ftdiv+2,f
  7914  1427  0CA1               	rrf	??___ftdiv+1,f
  7915  1428  0CA0               	rrf	??___ftdiv,f
  7916  1429  0B89               	decfsz	9,f
  7917  142A  2C26               	goto	u4555
  7918  142B  0820               	movf	??___ftdiv,w
  7919  142C  00A3               	movwf	??___ftdiv+3
  7920  142D  0823               	movf	??___ftdiv+3,w
  7921  142E  00A9               	movwf	___ftdiv@sign
  7922  142F  0878               	movf	___ftdiv@f2,w
  7923  1430  00A0               	movwf	??___ftdiv
  7924  1431  0879               	movf	___ftdiv@f2+1,w
  7925  1432  00A1               	movwf	??___ftdiv+1
  7926  1433  087A               	movf	___ftdiv@f2+2,w
  7927  1434  00A2               	movwf	??___ftdiv+2
  7928  1435  3010               	movlw	16
  7929  1436                     u4565:	
  7930  1436  36A2               	lsrf	??___ftdiv+2,f
  7931  1437  0CA1               	rrf	??___ftdiv+1,f
  7932  1438  0CA0               	rrf	??___ftdiv,f
  7933  1439  0B89               	decfsz	9,f
  7934  143A  2C36               	goto	u4565
  7935  143B  0820               	movf	??___ftdiv,w
  7936  143C  00A3               	movwf	??___ftdiv+3
  7937  143D  0823               	movf	??___ftdiv+3,w
  7938  143E  06A9               	xorwf	___ftdiv@sign,f
  7939  143F  3080               	movlw	128
  7940  1440  00A0               	movwf	??___ftdiv
  7941  1441  0820               	movf	??___ftdiv,w
  7942  1442  05A9               	andwf	___ftdiv@sign,f
  7943  1443  17FC               	bsf	___ftdiv@f1+1,7
  7944  1444  30FF               	movlw	255
  7945  1445  05FB               	andwf	___ftdiv@f1,f
  7946  1446  30FF               	movlw	255
  7947  1447  05FC               	andwf	___ftdiv@f1+1,f
  7948  1448  3000               	movlw	0
  7949  1449  05FD               	andwf	___ftdiv@f1+2,f
  7950  144A  17F9               	bsf	___ftdiv@f2+1,7
  7951  144B  30FF               	movlw	255
  7952  144C  05F8               	andwf	___ftdiv@f2,f
  7953  144D  30FF               	movlw	255
  7954  144E  05F9               	andwf	___ftdiv@f2+1,f
  7955  144F  3000               	movlw	0
  7956  1450  05FA               	andwf	___ftdiv@f2+2,f
  7957  1451  3018               	movlw	24
  7958  1452  00A0               	movwf	??___ftdiv
  7959  1453  0820               	movf	??___ftdiv,w
  7960  1454  00A4               	movwf	___ftdiv@cntr
  7961  1455                     l3068:	
  7962  1455  3001               	movlw	1
  7963  1456                     u4575:	
  7964  1456  35A5               	lslf	___ftdiv@f3,f
  7965  1457  0DA6               	rlf	___ftdiv@f3+1,f
  7966  1458  0DA7               	rlf	___ftdiv@f3+2,f
  7967  1459  0B89               	decfsz	9,f
  7968  145A  2C56               	goto	u4575
  7969  145B  087A               	movf	___ftdiv@f2+2,w
  7970  145C  027D               	subwf	___ftdiv@f1+2,w
  7971  145D  1D03               	skipz
  7972  145E  2C65               	goto	u4585
  7973  145F  0879               	movf	___ftdiv@f2+1,w
  7974  1460  027C               	subwf	___ftdiv@f1+1,w
  7975  1461  1D03               	skipz
  7976  1462  2C65               	goto	u4585
  7977  1463  0878               	movf	___ftdiv@f2,w
  7978  1464  027B               	subwf	___ftdiv@f1,w
  7979  1465                     u4585:	
  7980  1465  1C03               	skipc
  7981  1466  2C6E               	goto	l3076
  7982  1467  0878               	movf	___ftdiv@f2,w
  7983  1468  02FB               	subwf	___ftdiv@f1,f
  7984  1469  0879               	movf	___ftdiv@f2+1,w
  7985  146A  3BFC               	subwfb	___ftdiv@f1+1,f
  7986  146B  087A               	movf	___ftdiv@f2+2,w
  7987  146C  3BFD               	subwfb	___ftdiv@f1+2,f
  7988  146D  1425               	bsf	___ftdiv@f3,0
  7989  146E                     l3076:	
  7990  146E  3001               	movlw	1
  7991  146F                     u4595:	
  7992  146F  35FB               	lslf	___ftdiv@f1,f
  7993  1470  0DFC               	rlf	___ftdiv@f1+1,f
  7994  1471  0DFD               	rlf	___ftdiv@f1+2,f
  7995  1472  0B89               	decfsz	9,f
  7996  1473  2C6F               	goto	u4595
  7997  1474  3001               	movlw	1
  7998  1475  02A4               	subwf	___ftdiv@cntr,f
  7999  1476  1D03               	btfss	3,2
  8000  1477  2C55               	goto	l3068
  8001  1478  0825               	movf	___ftdiv@f3,w
  8002  1479  00F0               	movwf	___ftpack@arg
  8003  147A  0826               	movf	___ftdiv@f3+1,w
  8004  147B  00F1               	movwf	___ftpack@arg+1
  8005  147C  0827               	movf	___ftdiv@f3+2,w
  8006  147D  00F2               	movwf	___ftpack@arg+2
  8007  147E  0828               	movf	___ftdiv@exp,w
  8008  147F  00A0               	movwf	??___ftdiv
  8009  1480  0820               	movf	??___ftdiv,w
  8010  1481  00F3               	movwf	___ftpack@exp
  8011  1482  0829               	movf	___ftdiv@sign,w
  8012  1483  00A1               	movwf	??___ftdiv+1
  8013  1484  0821               	movf	??___ftdiv+1,w
  8014  1485  00F4               	movwf	___ftpack@sign
  8015  1486  3192  2263         	fcall	___ftpack
  8016  1488  0870               	movf	?___ftpack,w
  8017  1489  00F8               	movwf	?___ftdiv
  8018  148A  0871               	movf	?___ftpack+1,w
  8019  148B  00F9               	movwf	?___ftdiv+1
  8020  148C  0872               	movf	?___ftpack+2,w
  8021  148D  00FA               	movwf	?___ftdiv+2
  8022  148E  0008               	return
  8023  148F                     __end_of___ftdiv:	
  8024                           
  8025                           	psect	text22
  8026  10B3                     __ptext22:	
  8027 ;; *************** function ___awtoft *****************
  8028 ;; Defined at:
  8029 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
  8030 ;; Parameters:    Size  Location     Type
  8031 ;;  c               2    8[BANK0 ] int 
  8032 ;; Auto vars:     Size  Location     Type
  8033 ;;  sign            1   13[BANK0 ] unsigned char 
  8034 ;; Return value:  Size  Location     Type
  8035 ;;                  3    8[BANK0 ] float 
  8036 ;; Registers used:
  8037 ;;		wreg, status,2, status,0, pclath, cstack
  8038 ;; Tracked objects:
  8039 ;;		On entry : 0/0
  8040 ;;		On exit  : 0/0
  8041 ;;		Unchanged: 0/0
  8042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8043 ;;      Params:         0       3       0       0       0       0       0       0
  8044 ;;      Locals:         0       1       0       0       0       0       0       0
  8045 ;;      Temps:          0       2       0       0       0       0       0       0
  8046 ;;      Totals:         0       6       0       0       0       0       0       0
  8047 ;;Total ram usage:        6 bytes
  8048 ;; Hardware stack levels used:    1
  8049 ;; Hardware stack levels required when called:    1
  8050 ;; This function calls:
  8051 ;;		___ftpack
  8052 ;; This function is called by:
  8053 ;;		_main
  8054 ;; This function uses a non-reentrant model
  8055 ;;
  8056                           
  8057                           
  8058                           ;psect for function ___awtoft
  8059  10B3                     ___awtoft:	
  8060                           
  8061                           ;incstack = 0
  8062                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8063  10B3  0020               	movlb	0	; select bank0
  8064  10B4  01AD               	clrf	___awtoft@sign
  8065  10B5  1FA9               	btfss	___awtoft@c+1,7
  8066  10B6  28BE               	goto	l3038
  8067  10B7  09A8               	comf	___awtoft@c,f
  8068  10B8  09A9               	comf	___awtoft@c+1,f
  8069  10B9  0AA8               	incf	___awtoft@c,f
  8070  10BA  1903               	skipnz
  8071  10BB  0AA9               	incf	___awtoft@c+1,f
  8072  10BC  01AD               	clrf	___awtoft@sign
  8073  10BD  0AAD               	incf	___awtoft@sign,f
  8074  10BE                     l3038:	
  8075  10BE  0828               	movf	___awtoft@c,w
  8076  10BF  00F0               	movwf	___ftpack@arg
  8077  10C0  0829               	movf	___awtoft@c+1,w
  8078  10C1  00F1               	movwf	___ftpack@arg+1
  8079  10C2  01F2               	clrf	___ftpack@arg+2
  8080  10C3  308E               	movlw	142
  8081  10C4  00AB               	movwf	??___awtoft
  8082  10C5  082B               	movf	??___awtoft,w
  8083  10C6  00F3               	movwf	___ftpack@exp
  8084  10C7  082D               	movf	___awtoft@sign,w
  8085  10C8  00AC               	movwf	??___awtoft+1
  8086  10C9  082C               	movf	??___awtoft+1,w
  8087  10CA  00F4               	movwf	___ftpack@sign
  8088  10CB  3192  2263         	fcall	___ftpack
  8089  10CD  0870               	movf	?___ftpack,w
  8090  10CE  0020               	movlb	0	; select bank0
  8091  10CF  00A8               	movwf	?___awtoft
  8092  10D0  0871               	movf	?___ftpack+1,w
  8093  10D1  00A9               	movwf	?___awtoft+1
  8094  10D2  0872               	movf	?___ftpack+2,w
  8095  10D3  00AA               	movwf	?___awtoft+2
  8096  10D4  0008               	return
  8097  10D5                     __end_of___awtoft:	
  8098                           
  8099                           	psect	text23
  8100  1263                     __ptext23:	
  8101 ;; *************** function ___ftpack *****************
  8102 ;; Defined at:
  8103 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  8104 ;; Parameters:    Size  Location     Type
  8105 ;;  arg             3    0[COMMON] unsigned um
  8106 ;;  exp             1    3[COMMON] unsigned char 
  8107 ;;  sign            1    4[COMMON] unsigned char 
  8108 ;; Auto vars:     Size  Location     Type
  8109 ;;		None
  8110 ;; Return value:  Size  Location     Type
  8111 ;;                  3    0[COMMON] float 
  8112 ;; Registers used:
  8113 ;;		wreg, status,2, status,0
  8114 ;; Tracked objects:
  8115 ;;		On entry : 0/0
  8116 ;;		On exit  : 0/0
  8117 ;;		Unchanged: 0/0
  8118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8119 ;;      Params:         5       0       0       0       0       0       0       0
  8120 ;;      Locals:         0       0       0       0       0       0       0       0
  8121 ;;      Temps:          3       0       0       0       0       0       0       0
  8122 ;;      Totals:         8       0       0       0       0       0       0       0
  8123 ;;Total ram usage:        8 bytes
  8124 ;; Hardware stack levels used:    1
  8125 ;; This function calls:
  8126 ;;		Nothing
  8127 ;; This function is called by:
  8128 ;;		___awtoft
  8129 ;;		___ftadd
  8130 ;;		___ftdiv
  8131 ;;		___ftmul
  8132 ;;		___lltoft
  8133 ;; This function uses a non-reentrant model
  8134 ;;
  8135                           
  8136                           
  8137                           ;psect for function ___ftpack
  8138  1263                     ___ftpack:	
  8139                           
  8140                           ;incstack = 0
  8141                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  8142  1263  0873               	movf	___ftpack@exp,w
  8143  1264  1903               	btfsc	3,2
  8144  1265  2A6B               	goto	l2072
  8145  1266  0872               	movf	___ftpack@arg+2,w
  8146  1267  0471               	iorwf	___ftpack@arg+1,w
  8147  1268  0470               	iorwf	___ftpack@arg,w
  8148  1269  1D03               	skipz
  8149  126A  2A7C               	goto	l2078
  8150  126B                     l2072:	
  8151  126B  3000               	movlw	0
  8152  126C  00F0               	movwf	?___ftpack
  8153  126D  3000               	movlw	0
  8154  126E  00F1               	movwf	?___ftpack+1
  8155  126F  3000               	movlw	0
  8156  1270  00F2               	movwf	?___ftpack+2
  8157  1271  0008               	return
  8158  1272                     l2076:	
  8159  1272  3001               	movlw	1
  8160  1273  00F5               	movwf	??___ftpack
  8161  1274  0875               	movf	??___ftpack,w
  8162  1275  07F3               	addwf	___ftpack@exp,f
  8163  1276  3001               	movlw	1
  8164  1277                     u2485:	
  8165  1277  36F2               	lsrf	___ftpack@arg+2,f
  8166  1278  0CF1               	rrf	___ftpack@arg+1,f
  8167  1279  0CF0               	rrf	___ftpack@arg,f
  8168  127A  0B89               	decfsz	9,f
  8169  127B  2A77               	goto	u2485
  8170  127C                     l2078:	
  8171  127C  30FE               	movlw	254
  8172  127D  0572               	andwf	___ftpack@arg+2,w
  8173  127E  1903               	btfsc	3,2
  8174  127F  2A95               	goto	l562
  8175  1280  2A72               	goto	l2076
  8176  1281                     l2080:	
  8177  1281  3001               	movlw	1
  8178  1282  00F5               	movwf	??___ftpack
  8179  1283  0875               	movf	??___ftpack,w
  8180  1284  07F3               	addwf	___ftpack@exp,f
  8181  1285  3001               	movlw	1
  8182  1286  07F0               	addwf	___ftpack@arg,f
  8183  1287  3000               	movlw	0
  8184  1288  1803               	skipnc
  8185  1289  3001               	movlw	1
  8186  128A  07F1               	addwf	___ftpack@arg+1,f
  8187  128B  3000               	movlw	0
  8188  128C  1803               	skipnc
  8189  128D  3001               	movlw	1
  8190  128E  07F2               	addwf	___ftpack@arg+2,f
  8191  128F  3001               	movlw	1
  8192  1290                     u2505:	
  8193  1290  36F2               	lsrf	___ftpack@arg+2,f
  8194  1291  0CF1               	rrf	___ftpack@arg+1,f
  8195  1292  0CF0               	rrf	___ftpack@arg,f
  8196  1293  0B89               	decfsz	9,f
  8197  1294  2A90               	goto	u2505
  8198  1295                     l562:	
  8199  1295  30FF               	movlw	255
  8200  1296  0572               	andwf	___ftpack@arg+2,w
  8201  1297  1903               	btfsc	3,2
  8202  1298  2AA2               	goto	l2088
  8203  1299  2A81               	goto	l2080
  8204  129A                     l2086:	
  8205  129A  3001               	movlw	1
  8206  129B  02F3               	subwf	___ftpack@exp,f
  8207  129C  3001               	movlw	1
  8208  129D                     u2525:	
  8209  129D  35F0               	lslf	___ftpack@arg,f
  8210  129E  0DF1               	rlf	___ftpack@arg+1,f
  8211  129F  0DF2               	rlf	___ftpack@arg+2,f
  8212  12A0  0B89               	decfsz	9,f
  8213  12A1  2A9D               	goto	u2525
  8214  12A2                     l2088:	
  8215  12A2  1BF1               	btfsc	___ftpack@arg+1,7
  8216  12A3  2AA8               	goto	l569
  8217  12A4  3002               	movlw	2
  8218  12A5  0273               	subwf	___ftpack@exp,w
  8219  12A6  1803               	skipnc
  8220  12A7  2A9A               	goto	l2086
  8221  12A8                     l569:	
  8222  12A8  1873               	btfsc	___ftpack@exp,0
  8223  12A9  2AB0               	goto	l570
  8224  12AA  30FF               	movlw	255
  8225  12AB  05F0               	andwf	___ftpack@arg,f
  8226  12AC  307F               	movlw	127
  8227  12AD  05F1               	andwf	___ftpack@arg+1,f
  8228  12AE  30FF               	movlw	255
  8229  12AF  05F2               	andwf	___ftpack@arg+2,f
  8230  12B0                     l570:	
  8231  12B0  1003               	clrc
  8232  12B1  0CF3               	rrf	___ftpack@exp,f
  8233  12B2  0873               	movf	___ftpack@exp,w
  8234  12B3  00F5               	movwf	??___ftpack
  8235  12B4  01F6               	clrf	??___ftpack+1
  8236  12B5  01F7               	clrf	??___ftpack+2
  8237  12B6  3010               	movlw	16
  8238  12B7                     u2565:	
  8239  12B7  35F5               	lslf	??___ftpack,f
  8240  12B8  0DF6               	rlf	??___ftpack+1,f
  8241  12B9  0DF7               	rlf	??___ftpack+2,f
  8242  12BA  0B89               	decfsz	9,f
  8243  12BB  2AB7               	goto	u2565
  8244  12BC  0875               	movf	??___ftpack,w
  8245  12BD  04F0               	iorwf	___ftpack@arg,f
  8246  12BE  0876               	movf	??___ftpack+1,w
  8247  12BF  04F1               	iorwf	___ftpack@arg+1,f
  8248  12C0  0877               	movf	??___ftpack+2,w
  8249  12C1  04F2               	iorwf	___ftpack@arg+2,f
  8250  12C2  0874               	movf	___ftpack@sign,w
  8251  12C3  1903               	btfsc	3,2
  8252  12C4  0008               	return
  8253  12C5  17F2               	bsf	___ftpack@arg+2,7
  8254  12C6  0008               	return
  8255  12C7                     __end_of___ftpack:	
  8256                           
  8257                           	psect	text24
  8258  0800                     __ptext24:	
  8259 ;; *************** function _Lcd_Out *****************
  8260 ;; Defined at:
  8261 ;;		line 94 in file "flex_lcd.h"
  8262 ;; Parameters:    Size  Location     Type
  8263 ;;  y               1    wreg     unsigned char 
  8264 ;;  x               1    3[COMMON] unsigned char 
  8265 ;;  buffer          2    4[COMMON] PTR const unsigned char 
  8266 ;;		 -> STR_11(6), main@buffer(20), 
  8267 ;; Auto vars:     Size  Location     Type
  8268 ;;  y               1    7[COMMON] unsigned char 
  8269 ;;  data            1    8[COMMON] unsigned char 
  8270 ;; Return value:  Size  Location     Type
  8271 ;;                  1    wreg      void 
  8272 ;; Registers used:
  8273 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8274 ;; Tracked objects:
  8275 ;;		On entry : 0/0
  8276 ;;		On exit  : 0/0
  8277 ;;		Unchanged: 0/0
  8278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8279 ;;      Params:         3       0       0       0       0       0       0       0
  8280 ;;      Locals:         2       0       0       0       0       0       0       0
  8281 ;;      Temps:          1       0       0       0       0       0       0       0
  8282 ;;      Totals:         6       0       0       0       0       0       0       0
  8283 ;;Total ram usage:        6 bytes
  8284 ;; Hardware stack levels used:    1
  8285 ;; Hardware stack levels required when called:    1
  8286 ;; This function calls:
  8287 ;;		_Lcd_Chr_CP
  8288 ;;		_Lcd_Cmd
  8289 ;; This function is called by:
  8290 ;;		_main
  8291 ;; This function uses a non-reentrant model
  8292 ;;
  8293                           
  8294                           
  8295                           ;psect for function _Lcd_Out
  8296  0800                     _Lcd_Out:	
  8297                           
  8298                           ;incstack = 0
  8299                           ; Regs used in _Lcd_Out: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8300                           ;Lcd_Out@y stored from wreg
  8301  0800  00F7               	movwf	Lcd_Out@y
  8302                           
  8303                           ;flex_lcd.h: 96: unsigned char data;
  8304                           ;flex_lcd.h: 97: switch (y)
  8305  0801  2811               	goto	l2826
  8306  0802                     l2816:	
  8307                           ;flex_lcd.h: 98: {
  8308                           ;flex_lcd.h: 99: case 1: data = 128 + x; break;
  8309                           
  8310  0802  0873               	movf	Lcd_Out@x,w
  8311  0803  3E80               	addlw	128
  8312  0804  280D               	goto	L15
  8313  0805                     l2818:	
  8314                           ;flex_lcd.h: 100: case 2: data = 192 + x; break;
  8315                           
  8316  0805  0873               	movf	Lcd_Out@x,w
  8317  0806  3EC0               	addlw	192
  8318  0807  280D               	goto	L15
  8319  0808                     l2820:	
  8320                           ;flex_lcd.h: 101: case 3: data = 148 + x; break;
  8321                           
  8322  0808  0873               	movf	Lcd_Out@x,w
  8323  0809  3E94               	addlw	148
  8324  080A  280D               	goto	L15
  8325  080B                     l2822:	
  8326                           ;flex_lcd.h: 102: case 4: data = 212 + x; break;
  8327                           
  8328  080B  0873               	movf	Lcd_Out@x,w
  8329  080C  3ED4               	addlw	212
  8330  080D                     L15:	
  8331  080D  00F6               	movwf	??_Lcd_Out
  8332  080E  0876               	movf	??_Lcd_Out,w
  8333  080F  00F8               	movwf	Lcd_Out@data
  8334                           
  8335                           ;flex_lcd.h: 104: }
  8336                           
  8337                           ;flex_lcd.h: 103: default: break;
  8338  0810  281F               	goto	l2828
  8339  0811                     l2826:	
  8340  0811  0877               	movf	Lcd_Out@y,w
  8341                           
  8342                           ; Switch size 1, requested type "space"
  8343                           ; Number of cases is 4, Range of values is 1 to 4
  8344                           ; switch strategies available:
  8345                           ; Name         Instructions Cycles
  8346                           ; simple_byte           13     7 (average)
  8347                           ; direct_byte           17     9 (fixed)
  8348                           ; jumptable            263     9 (fixed)
  8349                           ;	Chosen strategy is simple_byte
  8350  0812  3A01               	xorlw	1	; case 1
  8351  0813  1903               	skipnz
  8352  0814  2802               	goto	l2816
  8353  0815  3A03               	xorlw	3	; case 2
  8354  0816  1903               	skipnz
  8355  0817  2805               	goto	l2818
  8356  0818  3A01               	xorlw	1	; case 3
  8357  0819  1903               	skipnz
  8358  081A  2808               	goto	l2820
  8359  081B  3A07               	xorlw	7	; case 4
  8360  081C  1903               	skipnz
  8361  081D  280B               	goto	l2822
  8362  081E  281F               	goto	l2828
  8363  081F                     l2828:	
  8364                           
  8365                           ;flex_lcd.h: 105: Lcd_Cmd(data);
  8366  081F  0878               	movf	Lcd_Out@data,w
  8367  0820  3193  234E  3188   	fcall	_Lcd_Cmd
  8368  0823                     l2834:	
  8369                           ;flex_lcd.h: 106: while(*buffer)
  8370                           
  8371  0823  0874               	movf	Lcd_Out@buffer,w
  8372  0824  0084               	movwf	4
  8373  0825  0875               	movf	Lcd_Out@buffer+1,w
  8374  0826  0085               	movwf	5
  8375  0827  0012               	moviw fsr0++
  8376  0828  1903               	btfsc	3,2
  8377  0829  0008               	return
  8378                           
  8379                           ;flex_lcd.h: 107: {
  8380                           ;flex_lcd.h: 108: Lcd_Chr_CP(*buffer);
  8381  082A  0874               	movf	Lcd_Out@buffer,w
  8382  082B  0084               	movwf	4
  8383  082C  0875               	movf	Lcd_Out@buffer+1,w
  8384  082D  0085               	movwf	5
  8385  082E  0800               	movf	0,w	;code access
  8386  082F  3180  200B  3188   	fcall	_Lcd_Chr_CP
  8387                           
  8388                           ;flex_lcd.h: 109: buffer++;
  8389  0832  3001               	movlw	1
  8390  0833  07F4               	addwf	Lcd_Out@buffer,f
  8391  0834  3000               	movlw	0
  8392  0835  3DF5               	addwfc	Lcd_Out@buffer+1,f
  8393  0836  2823               	goto	l2834
  8394  0837                     __end_of_Lcd_Out:	
  8395                           ;flex_lcd.h: 110: }
  8396                           ;flex_lcd.h: 111: return;
  8397                           
  8398                           
  8399                           	psect	text25
  8400  000B                     __ptext25:	
  8401 ;; *************** function _Lcd_Chr_CP *****************
  8402 ;; Defined at:
  8403 ;;		line 136 in file "flex_lcd.h"
  8404 ;; Parameters:    Size  Location     Type
  8405 ;;  data            1    wreg     unsigned char 
  8406 ;; Auto vars:     Size  Location     Type
  8407 ;;  data            1    2[COMMON] unsigned char 
  8408 ;; Return value:  Size  Location     Type
  8409 ;;                  1    wreg      void 
  8410 ;; Registers used:
  8411 ;;		wreg, status,2, status,0
  8412 ;; Tracked objects:
  8413 ;;		On entry : 0/0
  8414 ;;		On exit  : 0/0
  8415 ;;		Unchanged: 0/0
  8416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8417 ;;      Params:         0       0       0       0       0       0       0       0
  8418 ;;      Locals:         1       0       0       0       0       0       0       0
  8419 ;;      Temps:          2       0       0       0       0       0       0       0
  8420 ;;      Totals:         3       0       0       0       0       0       0       0
  8421 ;;Total ram usage:        3 bytes
  8422 ;; Hardware stack levels used:    1
  8423 ;; This function calls:
  8424 ;;		Nothing
  8425 ;; This function is called by:
  8426 ;;		_Lcd_Out
  8427 ;;		_Lcd_Out2
  8428 ;; This function uses a non-reentrant model
  8429 ;;
  8430                           
  8431                           
  8432                           ;psect for function _Lcd_Chr_CP
  8433  000B                     _Lcd_Chr_CP:	
  8434                           
  8435                           ;incstack = 0
  8436                           ; Regs used in _Lcd_Chr_CP: [wreg+status,2+status,0]
  8437                           ;Lcd_Chr_CP@data stored from wreg
  8438  000B  00F2               	movwf	Lcd_Chr_CP@data
  8439                           
  8440                           ;flex_lcd.h: 137: PORTDbits.RD0 = 0; PORTDbits.RD1 = 1;
  8441  000C  0020               	movlb	0	; select bank0
  8442  000D  100F               	bcf	15,0	;volatile
  8443  000E  148F               	bsf	15,1	;volatile
  8444                           
  8445                           ;flex_lcd.h: 138: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0b0100
      +                          0000)>>6;
  8446  000F  0872               	movf	Lcd_Chr_CP@data,w
  8447  0010  00F0               	movwf	??_Lcd_Chr_CP
  8448  0011  3007               	movlw	7
  8449  0012                     u3225:	
  8450  0012  36F0               	lsrf	??_Lcd_Chr_CP,f
  8451  0013  0B89               	decfsz	9,f
  8452  0014  2812               	goto	u3225
  8453  0015  0870               	movf	??_Lcd_Chr_CP,w
  8454  0016  3901               	andlw	1
  8455  0017  00F1               	movwf	??_Lcd_Chr_CP+1
  8456  0018  0CF1               	rrf	??_Lcd_Chr_CP+1,f
  8457  0019  0CF1               	rrf	??_Lcd_Chr_CP+1,f
  8458  001A  080F               	movf	15,w	;volatile
  8459  001B  0671               	xorwf	??_Lcd_Chr_CP+1,w
  8460  001C  397F               	andlw	-129
  8461  001D  0671               	xorwf	??_Lcd_Chr_CP+1,w
  8462  001E  008F               	movwf	15	;volatile
  8463  001F  0872               	movf	Lcd_Chr_CP@data,w
  8464  0020  00F0               	movwf	??_Lcd_Chr_CP
  8465  0021  3006               	movlw	6
  8466  0022                     u3235:	
  8467  0022  36F0               	lsrf	??_Lcd_Chr_CP,f
  8468  0023  0B89               	decfsz	9,f
  8469  0024  2822               	goto	u3235
  8470  0025  0870               	movf	??_Lcd_Chr_CP,w
  8471  0026  3901               	andlw	1
  8472  0027  00F1               	movwf	??_Lcd_Chr_CP+1
  8473  0028  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  8474  0029  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  8475  002A  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  8476  002B  080F               	movf	15,w	;volatile
  8477  002C  0671               	xorwf	??_Lcd_Chr_CP+1,w
  8478  002D  39BF               	andlw	-65
  8479  002E  0671               	xorwf	??_Lcd_Chr_CP+1,w
  8480  002F  008F               	movwf	15	;volatile
  8481                           
  8482                           ;flex_lcd.h: 139: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0b0001
      +                          0000)>>4;
  8483  0030  0872               	movf	Lcd_Chr_CP@data,w
  8484  0031  00F0               	movwf	??_Lcd_Chr_CP
  8485  0032  3005               	movlw	5
  8486  0033                     u3245:	
  8487  0033  36F0               	lsrf	??_Lcd_Chr_CP,f
  8488  0034  0B89               	decfsz	9,f
  8489  0035  2833               	goto	u3245
  8490  0036  0870               	movf	??_Lcd_Chr_CP,w
  8491  0037  3901               	andlw	1
  8492  0038  00F1               	movwf	??_Lcd_Chr_CP+1
  8493  0039  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  8494  003A  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  8495  003B  080F               	movf	15,w	;volatile
  8496  003C  0671               	xorwf	??_Lcd_Chr_CP+1,w
  8497  003D  39DF               	andlw	-33
  8498  003E  0671               	xorwf	??_Lcd_Chr_CP+1,w
  8499  003F  008F               	movwf	15	;volatile
  8500  0040  0872               	movf	Lcd_Chr_CP@data,w
  8501  0041  00F0               	movwf	??_Lcd_Chr_CP
  8502  0042  3004               	movlw	4
  8503  0043                     u3255:	
  8504  0043  36F0               	lsrf	??_Lcd_Chr_CP,f
  8505  0044  0B89               	decfsz	9,f
  8506  0045  2843               	goto	u3255
  8507  0046  0870               	movf	??_Lcd_Chr_CP,w
  8508  0047  3901               	andlw	1
  8509  0048  00F1               	movwf	??_Lcd_Chr_CP+1
  8510  0049  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  8511  004A  080F               	movf	15,w	;volatile
  8512  004B  0671               	xorwf	??_Lcd_Chr_CP+1,w
  8513  004C  39EF               	andlw	-17
  8514  004D  0671               	xorwf	??_Lcd_Chr_CP+1,w
  8515  004E  008F               	movwf	15	;volatile
  8516                           
  8517                           ;flex_lcd.h: 140: _delay(10);
  8518  004F  3003               	movlw	3
  8519  0050                     u5097:	
  8520  0050  0B89               	decfsz	9,f
  8521  0051  2850               	goto	u5097
  8522  0052  0000               	nop
  8523                           
  8524                           ;flex_lcd.h: 141: PORTDbits.RD0 = 1; _delay((unsigned long)((5)*(32000000/4000000.0))); 
      +                          PORTDbits.RD0 = 0;
  8525  0053  0020               	movlb	0	; select bank0
  8526  0054  140F               	bsf	15,0	;volatile
  8527  0055  300D               	movlw	13
  8528  0056                     u5107:	
  8529  0056  0B89               	decfsz	9,f
  8530  0057  2856               	goto	u5107
  8531  0058  0000               	nop
  8532  0059  0020               	movlb	0	; select bank0
  8533  005A  100F               	bcf	15,0	;volatile
  8534                           
  8535                           ;flex_lcd.h: 142: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0b0000
      +                          0100)>>2;
  8536  005B  0872               	movf	Lcd_Chr_CP@data,w
  8537  005C  00F0               	movwf	??_Lcd_Chr_CP
  8538  005D  3003               	movlw	3
  8539  005E                     u3265:	
  8540  005E  36F0               	lsrf	??_Lcd_Chr_CP,f
  8541  005F  0B89               	decfsz	9,f
  8542  0060  285E               	goto	u3265
  8543  0061  0870               	movf	??_Lcd_Chr_CP,w
  8544  0062  3901               	andlw	1
  8545  0063  00F1               	movwf	??_Lcd_Chr_CP+1
  8546  0064  0CF1               	rrf	??_Lcd_Chr_CP+1,f
  8547  0065  0CF1               	rrf	??_Lcd_Chr_CP+1,f
  8548  0066  080F               	movf	15,w	;volatile
  8549  0067  0671               	xorwf	??_Lcd_Chr_CP+1,w
  8550  0068  397F               	andlw	-129
  8551  0069  0671               	xorwf	??_Lcd_Chr_CP+1,w
  8552  006A  008F               	movwf	15	;volatile
  8553  006B  0872               	movf	Lcd_Chr_CP@data,w
  8554  006C  00F0               	movwf	??_Lcd_Chr_CP
  8555  006D  3002               	movlw	2
  8556  006E                     u3275:	
  8557  006E  36F0               	lsrf	??_Lcd_Chr_CP,f
  8558  006F  0B89               	decfsz	9,f
  8559  0070  286E               	goto	u3275
  8560  0071  0870               	movf	??_Lcd_Chr_CP,w
  8561  0072  3901               	andlw	1
  8562  0073  00F1               	movwf	??_Lcd_Chr_CP+1
  8563  0074  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  8564  0075  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  8565  0076  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  8566  0077  080F               	movf	15,w	;volatile
  8567  0078  0671               	xorwf	??_Lcd_Chr_CP+1,w
  8568  0079  39BF               	andlw	-65
  8569  007A  0671               	xorwf	??_Lcd_Chr_CP+1,w
  8570  007B  008F               	movwf	15	;volatile
  8571                           
  8572                           ;flex_lcd.h: 143: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0b0000
      +                          0001);
  8573  007C  3672               	lsrf	Lcd_Chr_CP@data,w
  8574  007D  3901               	andlw	1
  8575  007E  00F0               	movwf	??_Lcd_Chr_CP
  8576  007F  0EF0               	swapf	??_Lcd_Chr_CP,f
  8577  0080  0DF0               	rlf	??_Lcd_Chr_CP,f
  8578  0081  080F               	movf	15,w	;volatile
  8579  0082  0670               	xorwf	??_Lcd_Chr_CP,w
  8580  0083  39DF               	andlw	-33
  8581  0084  0670               	xorwf	??_Lcd_Chr_CP,w
  8582  0085  008F               	movwf	15	;volatile
  8583  0086  0872               	movf	Lcd_Chr_CP@data,w
  8584  0087  3901               	andlw	1
  8585  0088  00F0               	movwf	??_Lcd_Chr_CP
  8586  0089  0EF0               	swapf	??_Lcd_Chr_CP,f
  8587  008A  080F               	movf	15,w	;volatile
  8588  008B  0670               	xorwf	??_Lcd_Chr_CP,w
  8589  008C  39EF               	andlw	-17
  8590  008D  0670               	xorwf	??_Lcd_Chr_CP,w
  8591  008E  008F               	movwf	15	;volatile
  8592                           
  8593                           ;flex_lcd.h: 144: _delay(10);
  8594  008F  3003               	movlw	3
  8595  0090                     u5117:	
  8596  0090  0B89               	decfsz	9,f
  8597  0091  2890               	goto	u5117
  8598  0092  0000               	nop
  8599                           
  8600                           ;flex_lcd.h: 145: PORTDbits.RD0 = 1; _delay((unsigned long)((5)*(32000000/4000000.0))); 
      +                          PORTDbits.RD0 = 0;
  8601  0093  0020               	movlb	0	; select bank0
  8602  0094  140F               	bsf	15,0	;volatile
  8603  0095  300D               	movlw	13
  8604  0096                     u5127:	
  8605  0096  0B89               	decfsz	9,f
  8606  0097  2896               	goto	u5127
  8607  0098  0000               	nop
  8608  0099  0020               	movlb	0	; select bank0
  8609  009A  100F               	bcf	15,0	;volatile
  8610                           
  8611                           ;flex_lcd.h: 146: _delay((unsigned long)((5)*(32000000/4000000.0))); _delay((unsigned lo
      +                          ng)((5500)*(32000000/4000000.0)));
  8612  009B  300D               	movlw	13
  8613  009C                     u5137:	
  8614  009C  0B89               	decfsz	9,f
  8615  009D  289C               	goto	u5137
  8616  009E  0000               	nop
  8617  009F  303A               	movlw	58
  8618  00A0  00F0               	movwf	??_Lcd_Chr_CP
  8619  00A1  3023               	movlw	35
  8620  00A2                     u5147:	
  8621  00A2  0B89               	decfsz	9,f
  8622  00A3  28A2               	goto	u5147
  8623  00A4  0BF0               	decfsz	??_Lcd_Chr_CP,f
  8624  00A5  28A2               	goto	u5147
  8625  00A6  0000               	nop
  8626  00A7  0008               	return
  8627  00A8                     __end_of_Lcd_Chr_CP:	
  8628                           
  8629                           	psect	text26
  8630  148F                     __ptext26:	
  8631 ;; *************** function _Lcd_Init *****************
  8632 ;; Defined at:
  8633 ;;		line 52 in file "flex_lcd.h"
  8634 ;; Parameters:    Size  Location     Type
  8635 ;;		None
  8636 ;; Auto vars:     Size  Location     Type
  8637 ;;  data            1    4[COMMON] unsigned char 
  8638 ;; Return value:  Size  Location     Type
  8639 ;;                  1    wreg      void 
  8640 ;; Registers used:
  8641 ;;		wreg, status,2, status,0, pclath, cstack
  8642 ;; Tracked objects:
  8643 ;;		On entry : 0/0
  8644 ;;		On exit  : 0/0
  8645 ;;		Unchanged: 0/0
  8646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8647 ;;      Params:         0       0       0       0       0       0       0       0
  8648 ;;      Locals:         1       0       0       0       0       0       0       0
  8649 ;;      Temps:          1       0       0       0       0       0       0       0
  8650 ;;      Totals:         2       0       0       0       0       0       0       0
  8651 ;;Total ram usage:        2 bytes
  8652 ;; Hardware stack levels used:    1
  8653 ;; Hardware stack levels required when called:    1
  8654 ;; This function calls:
  8655 ;;		_Lcd_Cmd
  8656 ;; This function is called by:
  8657 ;;		_main
  8658 ;; This function uses a non-reentrant model
  8659 ;;
  8660                           
  8661                           
  8662                           ;psect for function _Lcd_Init
  8663  148F                     _Lcd_Init:	
  8664                           
  8665                           ;flex_lcd.h: 53: unsigned char data;
  8666                           ;flex_lcd.h: 54: TRISDbits.TRISD7 = 0;
  8667                           
  8668                           ;incstack = 0
  8669                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  8670  148F  0021               	movlb	1	; select bank1
  8671  1490  138F               	bcf	15,7	;volatile
  8672                           
  8673                           ;flex_lcd.h: 55: TRISDbits.TRISD6 = 0;
  8674  1491  130F               	bcf	15,6	;volatile
  8675                           
  8676                           ;flex_lcd.h: 56: TRISDbits.TRISD5 = 0;
  8677  1492  128F               	bcf	15,5	;volatile
  8678                           
  8679                           ;flex_lcd.h: 57: TRISDbits.TRISD4 = 0;
  8680  1493  120F               	bcf	15,4	;volatile
  8681                           
  8682                           ;flex_lcd.h: 58: TRISDbits.TRISD0 = 0;
  8683  1494  100F               	bcf	15,0	;volatile
  8684                           
  8685                           ;flex_lcd.h: 59: TRISDbits.TRISD1 = 0;
  8686  1495  108F               	bcf	15,1	;volatile
  8687                           
  8688                           ;flex_lcd.h: 60: PORTDbits.RD7 = 0;
  8689  1496  0020               	movlb	0	; select bank0
  8690  1497  138F               	bcf	15,7	;volatile
  8691                           
  8692                           ;flex_lcd.h: 61: PORTDbits.RD6 = 0;
  8693  1498  130F               	bcf	15,6	;volatile
  8694                           
  8695                           ;flex_lcd.h: 62: PORTDbits.RD5 = 0;
  8696  1499  128F               	bcf	15,5	;volatile
  8697                           
  8698                           ;flex_lcd.h: 63: PORTDbits.RD4 = 0;
  8699  149A  120F               	bcf	15,4	;volatile
  8700                           
  8701                           ;flex_lcd.h: 64: PORTDbits.RD0 = 0;
  8702  149B  100F               	bcf	15,0	;volatile
  8703                           
  8704                           ;flex_lcd.h: 65: PORTDbits.RD1 = 0;
  8705  149C  108F               	bcf	15,1	;volatile
  8706                           
  8707                           ;flex_lcd.h: 66: _delay((unsigned long)((5500)*(32000000/4000000.0)));
  8708  149D  303A               	movlw	58
  8709  149E  00F3               	movwf	??_Lcd_Init
  8710  149F  3023               	movlw	35
  8711  14A0                     u5157:	
  8712  14A0  0B89               	decfsz	9,f
  8713  14A1  2CA0               	goto	u5157
  8714  14A2  0BF3               	decfsz	??_Lcd_Init,f
  8715  14A3  2CA0               	goto	u5157
  8716  14A4  0000               	nop
  8717                           
  8718                           ;flex_lcd.h: 67: _delay((unsigned long)((5500)*(32000000/4000000.0)));
  8719  14A5  303A               	movlw	58
  8720  14A6  00F3               	movwf	??_Lcd_Init
  8721  14A7  3023               	movlw	35
  8722  14A8                     u5167:	
  8723  14A8  0B89               	decfsz	9,f
  8724  14A9  2CA8               	goto	u5167
  8725  14AA  0BF3               	decfsz	??_Lcd_Init,f
  8726  14AB  2CA8               	goto	u5167
  8727  14AC  0000               	nop
  8728                           
  8729                           ;flex_lcd.h: 68: _delay((unsigned long)((5500)*(32000000/4000000.0)));
  8730  14AD  303A               	movlw	58
  8731  14AE  00F3               	movwf	??_Lcd_Init
  8732  14AF  3023               	movlw	35
  8733  14B0                     u5177:	
  8734  14B0  0B89               	decfsz	9,f
  8735  14B1  2CB0               	goto	u5177
  8736  14B2  0BF3               	decfsz	??_Lcd_Init,f
  8737  14B3  2CB0               	goto	u5177
  8738  14B4  0000               	nop
  8739                           
  8740                           ;flex_lcd.h: 69: _delay((unsigned long)((5500)*(32000000/4000000.0)));
  8741  14B5  303A               	movlw	58
  8742  14B6  00F3               	movwf	??_Lcd_Init
  8743  14B7  3023               	movlw	35
  8744  14B8                     u5187:	
  8745  14B8  0B89               	decfsz	9,f
  8746  14B9  2CB8               	goto	u5187
  8747  14BA  0BF3               	decfsz	??_Lcd_Init,f
  8748  14BB  2CB8               	goto	u5187
  8749  14BC  0000               	nop
  8750                           
  8751                           ;flex_lcd.h: 70: _delay((unsigned long)((5500)*(32000000/4000000.0)));
  8752  14BD  303A               	movlw	58
  8753  14BE  00F3               	movwf	??_Lcd_Init
  8754  14BF  3023               	movlw	35
  8755  14C0                     u5197:	
  8756  14C0  0B89               	decfsz	9,f
  8757  14C1  2CC0               	goto	u5197
  8758  14C2  0BF3               	decfsz	??_Lcd_Init,f
  8759  14C3  2CC0               	goto	u5197
  8760  14C4  0000               	nop
  8761                           
  8762                           ;flex_lcd.h: 71: _delay((unsigned long)((5500)*(32000000/4000000.0)));
  8763  14C5  303A               	movlw	58
  8764  14C6  00F3               	movwf	??_Lcd_Init
  8765  14C7  3023               	movlw	35
  8766  14C8                     u5207:	
  8767  14C8  0B89               	decfsz	9,f
  8768  14C9  2CC8               	goto	u5207
  8769  14CA  0BF3               	decfsz	??_Lcd_Init,f
  8770  14CB  2CC8               	goto	u5207
  8771  14CC  0000               	nop
  8772                           
  8773                           ;flex_lcd.h: 72: for(data = 1; data < 4; data ++)
  8774  14CD  01F4               	clrf	Lcd_Init@data
  8775  14CE  0AF4               	incf	Lcd_Init@data,f
  8776  14CF  3004               	movlw	4
  8777  14D0  0274               	subwf	Lcd_Init@data,w
  8778  14D1  1803               	btfsc	3,0
  8779  14D2  2CFB               	goto	l50
  8780  14D3                     l49:	
  8781                           
  8782                           ;flex_lcd.h: 73: {
  8783                           ;flex_lcd.h: 74: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 
      +                          = 1; PORTDbits.RD0 = 0;
  8784  14D3  0020               	movlb	0	; select bank0
  8785  14D4  138F               	bcf	15,7	;volatile
  8786  14D5  130F               	bcf	15,6	;volatile
  8787  14D6  168F               	bsf	15,5	;volatile
  8788  14D7  160F               	bsf	15,4	;volatile
  8789  14D8  100F               	bcf	15,0	;volatile
  8790                           
  8791                           ;flex_lcd.h: 75: PORTDbits.RD1 = 0; PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 
      +                          = 1; PORTDbits.RD4 = 1;
  8792  14D9  108F               	bcf	15,1	;volatile
  8793  14DA  138F               	bcf	15,7	;volatile
  8794  14DB  130F               	bcf	15,6	;volatile
  8795  14DC  168F               	bsf	15,5	;volatile
  8796  14DD  160F               	bsf	15,4	;volatile
  8797                           
  8798                           ;flex_lcd.h: 76: PORTDbits.RD0 = 1; PORTDbits.RD1 = 0;
  8799  14DE  140F               	bsf	15,0	;volatile
  8800  14DF  108F               	bcf	15,1	;volatile
  8801                           
  8802                           ;flex_lcd.h: 77: _delay((unsigned long)((5)*(32000000/4000000.0)));
  8803  14E0  300D               	movlw	13
  8804  14E1                     u5217:	
  8805  14E1  0B89               	decfsz	9,f
  8806  14E2  2CE1               	goto	u5217
  8807  14E3  0000               	nop
  8808                           
  8809                           ;flex_lcd.h: 78: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 
      +                          = 1; PORTDbits.RD0 = 0;
  8810  14E4  0020               	movlb	0	; select bank0
  8811  14E5  138F               	bcf	15,7	;volatile
  8812  14E6  130F               	bcf	15,6	;volatile
  8813  14E7  168F               	bsf	15,5	;volatile
  8814  14E8  160F               	bsf	15,4	;volatile
  8815  14E9  100F               	bcf	15,0	;volatile
  8816                           
  8817                           ;flex_lcd.h: 79: PORTDbits.RD1 = 0;
  8818  14EA  108F               	bcf	15,1	;volatile
  8819                           
  8820                           ;flex_lcd.h: 80: _delay((unsigned long)((5500)*(32000000/4000000.0)));
  8821  14EB  303A               	movlw	58
  8822  14EC  00F3               	movwf	??_Lcd_Init
  8823  14ED  3023               	movlw	35
  8824  14EE                     u5227:	
  8825  14EE  0B89               	decfsz	9,f
  8826  14EF  2CEE               	goto	u5227
  8827  14F0  0BF3               	decfsz	??_Lcd_Init,f
  8828  14F1  2CEE               	goto	u5227
  8829  14F2  0000               	nop
  8830  14F3  3001               	movlw	1
  8831  14F4  00F3               	movwf	??_Lcd_Init
  8832  14F5  0873               	movf	??_Lcd_Init,w
  8833  14F6  07F4               	addwf	Lcd_Init@data,f
  8834  14F7  3004               	movlw	4
  8835  14F8  0274               	subwf	Lcd_Init@data,w
  8836  14F9  1C03               	skipc
  8837  14FA  2CD3               	goto	l49
  8838  14FB                     l50:	
  8839                           
  8840                           ;flex_lcd.h: 81: }
  8841                           ;flex_lcd.h: 82: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 
      +                          = 0; PORTDbits.RD0 = 0; PORTDbits.RD1 = 0;
  8842  14FB  0020               	movlb	0	; select bank0
  8843  14FC  138F               	bcf	15,7	;volatile
  8844  14FD  130F               	bcf	15,6	;volatile
  8845  14FE  168F               	bsf	15,5	;volatile
  8846  14FF  120F               	bcf	15,4	;volatile
  8847  1500  100F               	bcf	15,0	;volatile
  8848  1501  108F               	bcf	15,1	;volatile
  8849                           
  8850                           ;flex_lcd.h: 83: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 
      +                          = 0; PORTDbits.RD0 = 1; PORTDbits.RD1 = 0;
  8851  1502  138F               	bcf	15,7	;volatile
  8852  1503  130F               	bcf	15,6	;volatile
  8853  1504  168F               	bsf	15,5	;volatile
  8854  1505  120F               	bcf	15,4	;volatile
  8855  1506  140F               	bsf	15,0	;volatile
  8856  1507  108F               	bcf	15,1	;volatile
  8857                           
  8858                           ;flex_lcd.h: 84: _delay((unsigned long)((5)*(32000000/4000000.0)));
  8859  1508  300D               	movlw	13
  8860  1509                     u5237:	
  8861  1509  0B89               	decfsz	9,f
  8862  150A  2D09               	goto	u5237
  8863  150B  0000               	nop
  8864                           
  8865                           ;flex_lcd.h: 85: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 
      +                          = 0; PORTDbits.RD0 = 0; PORTDbits.RD1 = 0;
  8866  150C  0020               	movlb	0	; select bank0
  8867  150D  138F               	bcf	15,7	;volatile
  8868  150E  130F               	bcf	15,6	;volatile
  8869  150F  168F               	bsf	15,5	;volatile
  8870  1510  120F               	bcf	15,4	;volatile
  8871  1511  100F               	bcf	15,0	;volatile
  8872  1512  108F               	bcf	15,1	;volatile
  8873                           
  8874                           ;flex_lcd.h: 86: _delay((unsigned long)((5500)*(32000000/4000000.0)));
  8875  1513  303A               	movlw	58
  8876  1514  00F3               	movwf	??_Lcd_Init
  8877  1515  3023               	movlw	35
  8878  1516                     u5247:	
  8879  1516  0B89               	decfsz	9,f
  8880  1517  2D16               	goto	u5247
  8881  1518  0BF3               	decfsz	??_Lcd_Init,f
  8882  1519  2D16               	goto	u5247
  8883  151A  0000               	nop
  8884                           
  8885                           ;flex_lcd.h: 87: data = 40; Lcd_Cmd(data);
  8886  151B  3028               	movlw	40
  8887  151C  00F3               	movwf	??_Lcd_Init
  8888  151D  0873               	movf	??_Lcd_Init,w
  8889  151E  00F4               	movwf	Lcd_Init@data
  8890  151F  0874               	movf	Lcd_Init@data,w
  8891  1520  3193  234E  3194   	fcall	_Lcd_Cmd
  8892                           
  8893                           ;flex_lcd.h: 88: data = 16; Lcd_Cmd(data);
  8894  1523  3010               	movlw	16
  8895  1524  00F3               	movwf	??_Lcd_Init
  8896  1525  0873               	movf	??_Lcd_Init,w
  8897  1526  00F4               	movwf	Lcd_Init@data
  8898  1527  0874               	movf	Lcd_Init@data,w
  8899  1528  3193  234E  3194   	fcall	_Lcd_Cmd
  8900                           
  8901                           ;flex_lcd.h: 89: data = 1; Lcd_Cmd(data);
  8902  152B  01F4               	clrf	Lcd_Init@data
  8903  152C  0AF4               	incf	Lcd_Init@data,f
  8904  152D  0874               	movf	Lcd_Init@data,w
  8905  152E  3193  234E  3194   	fcall	_Lcd_Cmd
  8906                           
  8907                           ;flex_lcd.h: 90: data = 15; Lcd_Cmd(data);
  8908  1531  300F               	movlw	15
  8909  1532  00F3               	movwf	??_Lcd_Init
  8910  1533  0873               	movf	??_Lcd_Init,w
  8911  1534  00F4               	movwf	Lcd_Init@data
  8912  1535  0874               	movf	Lcd_Init@data,w
  8913  1536  3193  234E         	fcall	_Lcd_Cmd
  8914  1538  0008               	return
  8915  1539                     __end_of_Lcd_Init:	
  8916                           
  8917                           	psect	text27
  8918  134E                     __ptext27:	
  8919 ;; *************** function _Lcd_Cmd *****************
  8920 ;; Defined at:
  8921 ;;		line 150 in file "flex_lcd.h"
  8922 ;; Parameters:    Size  Location     Type
  8923 ;;  data            1    wreg     unsigned char 
  8924 ;; Auto vars:     Size  Location     Type
  8925 ;;  data            1    2[COMMON] unsigned char 
  8926 ;; Return value:  Size  Location     Type
  8927 ;;                  1    wreg      void 
  8928 ;; Registers used:
  8929 ;;		wreg, status,2, status,0
  8930 ;; Tracked objects:
  8931 ;;		On entry : 0/0
  8932 ;;		On exit  : 0/0
  8933 ;;		Unchanged: 0/0
  8934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8935 ;;      Params:         0       0       0       0       0       0       0       0
  8936 ;;      Locals:         1       0       0       0       0       0       0       0
  8937 ;;      Temps:          2       0       0       0       0       0       0       0
  8938 ;;      Totals:         3       0       0       0       0       0       0       0
  8939 ;;Total ram usage:        3 bytes
  8940 ;; Hardware stack levels used:    1
  8941 ;; This function calls:
  8942 ;;		Nothing
  8943 ;; This function is called by:
  8944 ;;		_Lcd_Init
  8945 ;;		_Lcd_Out
  8946 ;;		_main
  8947 ;;		_clear
  8948 ;;		_Lcd_Out2
  8949 ;; This function uses a non-reentrant model
  8950 ;;
  8951                           
  8952                           
  8953                           ;psect for function _Lcd_Cmd
  8954  134E                     _Lcd_Cmd:	
  8955                           
  8956                           ;incstack = 0
  8957                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0]
  8958                           ;Lcd_Cmd@data stored from wreg
  8959  134E  00F2               	movwf	Lcd_Cmd@data
  8960                           
  8961                           ;flex_lcd.h: 151: PORTDbits.RD0 = 0; PORTDbits.RD1 = 0;
  8962  134F  0020               	movlb	0	; select bank0
  8963  1350  100F               	bcf	15,0	;volatile
  8964  1351  108F               	bcf	15,1	;volatile
  8965                           
  8966                           ;flex_lcd.h: 152: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0b0100
      +                          0000)>>6;
  8967  1352  0872               	movf	Lcd_Cmd@data,w
  8968  1353  00F0               	movwf	??_Lcd_Cmd
  8969  1354  3007               	movlw	7
  8970  1355                     u3165:	
  8971  1355  36F0               	lsrf	??_Lcd_Cmd,f
  8972  1356  0B89               	decfsz	9,f
  8973  1357  2B55               	goto	u3165
  8974  1358  0870               	movf	??_Lcd_Cmd,w
  8975  1359  3901               	andlw	1
  8976  135A  00F1               	movwf	??_Lcd_Cmd+1
  8977  135B  0CF1               	rrf	??_Lcd_Cmd+1,f
  8978  135C  0CF1               	rrf	??_Lcd_Cmd+1,f
  8979  135D  080F               	movf	15,w	;volatile
  8980  135E  0671               	xorwf	??_Lcd_Cmd+1,w
  8981  135F  397F               	andlw	-129
  8982  1360  0671               	xorwf	??_Lcd_Cmd+1,w
  8983  1361  008F               	movwf	15	;volatile
  8984  1362  0872               	movf	Lcd_Cmd@data,w
  8985  1363  00F0               	movwf	??_Lcd_Cmd
  8986  1364  3006               	movlw	6
  8987  1365                     u3175:	
  8988  1365  36F0               	lsrf	??_Lcd_Cmd,f
  8989  1366  0B89               	decfsz	9,f
  8990  1367  2B65               	goto	u3175
  8991  1368  0870               	movf	??_Lcd_Cmd,w
  8992  1369  3901               	andlw	1
  8993  136A  00F1               	movwf	??_Lcd_Cmd+1
  8994  136B  0EF1               	swapf	??_Lcd_Cmd+1,f
  8995  136C  0DF1               	rlf	??_Lcd_Cmd+1,f
  8996  136D  0DF1               	rlf	??_Lcd_Cmd+1,f
  8997  136E  080F               	movf	15,w	;volatile
  8998  136F  0671               	xorwf	??_Lcd_Cmd+1,w
  8999  1370  39BF               	andlw	-65
  9000  1371  0671               	xorwf	??_Lcd_Cmd+1,w
  9001  1372  008F               	movwf	15	;volatile
  9002                           
  9003                           ;flex_lcd.h: 153: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0b0001
      +                          0000)>>4;
  9004  1373  0872               	movf	Lcd_Cmd@data,w
  9005  1374  00F0               	movwf	??_Lcd_Cmd
  9006  1375  3005               	movlw	5
  9007  1376                     u3185:	
  9008  1376  36F0               	lsrf	??_Lcd_Cmd,f
  9009  1377  0B89               	decfsz	9,f
  9010  1378  2B76               	goto	u3185
  9011  1379  0870               	movf	??_Lcd_Cmd,w
  9012  137A  3901               	andlw	1
  9013  137B  00F1               	movwf	??_Lcd_Cmd+1
  9014  137C  0EF1               	swapf	??_Lcd_Cmd+1,f
  9015  137D  0DF1               	rlf	??_Lcd_Cmd+1,f
  9016  137E  080F               	movf	15,w	;volatile
  9017  137F  0671               	xorwf	??_Lcd_Cmd+1,w
  9018  1380  39DF               	andlw	-33
  9019  1381  0671               	xorwf	??_Lcd_Cmd+1,w
  9020  1382  008F               	movwf	15	;volatile
  9021  1383  0872               	movf	Lcd_Cmd@data,w
  9022  1384  00F0               	movwf	??_Lcd_Cmd
  9023  1385  3004               	movlw	4
  9024  1386                     u3195:	
  9025  1386  36F0               	lsrf	??_Lcd_Cmd,f
  9026  1387  0B89               	decfsz	9,f
  9027  1388  2B86               	goto	u3195
  9028  1389  0870               	movf	??_Lcd_Cmd,w
  9029  138A  3901               	andlw	1
  9030  138B  00F1               	movwf	??_Lcd_Cmd+1
  9031  138C  0EF1               	swapf	??_Lcd_Cmd+1,f
  9032  138D  080F               	movf	15,w	;volatile
  9033  138E  0671               	xorwf	??_Lcd_Cmd+1,w
  9034  138F  39EF               	andlw	-17
  9035  1390  0671               	xorwf	??_Lcd_Cmd+1,w
  9036  1391  008F               	movwf	15	;volatile
  9037                           
  9038                           ;flex_lcd.h: 154: _delay(10);
  9039  1392  3003               	movlw	3
  9040  1393                     u5257:	
  9041  1393  0B89               	decfsz	9,f
  9042  1394  2B93               	goto	u5257
  9043  1395  0000               	nop
  9044                           
  9045                           ;flex_lcd.h: 155: PORTDbits.RD0 = 1; _delay((unsigned long)((5)*(32000000/4000000.0))); 
      +                          PORTDbits.RD0 = 0;
  9046  1396  0020               	movlb	0	; select bank0
  9047  1397  140F               	bsf	15,0	;volatile
  9048  1398  300D               	movlw	13
  9049  1399                     u5267:	
  9050  1399  0B89               	decfsz	9,f
  9051  139A  2B99               	goto	u5267
  9052  139B  0000               	nop
  9053  139C  0020               	movlb	0	; select bank0
  9054  139D  100F               	bcf	15,0	;volatile
  9055                           
  9056                           ;flex_lcd.h: 156: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0b0000
      +                          0100)>>2;
  9057  139E  0872               	movf	Lcd_Cmd@data,w
  9058  139F  00F0               	movwf	??_Lcd_Cmd
  9059  13A0  3003               	movlw	3
  9060  13A1                     u3205:	
  9061  13A1  36F0               	lsrf	??_Lcd_Cmd,f
  9062  13A2  0B89               	decfsz	9,f
  9063  13A3  2BA1               	goto	u3205
  9064  13A4  0870               	movf	??_Lcd_Cmd,w
  9065  13A5  3901               	andlw	1
  9066  13A6  00F1               	movwf	??_Lcd_Cmd+1
  9067  13A7  0CF1               	rrf	??_Lcd_Cmd+1,f
  9068  13A8  0CF1               	rrf	??_Lcd_Cmd+1,f
  9069  13A9  080F               	movf	15,w	;volatile
  9070  13AA  0671               	xorwf	??_Lcd_Cmd+1,w
  9071  13AB  397F               	andlw	-129
  9072  13AC  0671               	xorwf	??_Lcd_Cmd+1,w
  9073  13AD  008F               	movwf	15	;volatile
  9074  13AE  0872               	movf	Lcd_Cmd@data,w
  9075  13AF  00F0               	movwf	??_Lcd_Cmd
  9076  13B0  3002               	movlw	2
  9077  13B1                     u3215:	
  9078  13B1  36F0               	lsrf	??_Lcd_Cmd,f
  9079  13B2  0B89               	decfsz	9,f
  9080  13B3  2BB1               	goto	u3215
  9081  13B4  0870               	movf	??_Lcd_Cmd,w
  9082  13B5  3901               	andlw	1
  9083  13B6  00F1               	movwf	??_Lcd_Cmd+1
  9084  13B7  0EF1               	swapf	??_Lcd_Cmd+1,f
  9085  13B8  0DF1               	rlf	??_Lcd_Cmd+1,f
  9086  13B9  0DF1               	rlf	??_Lcd_Cmd+1,f
  9087  13BA  080F               	movf	15,w	;volatile
  9088  13BB  0671               	xorwf	??_Lcd_Cmd+1,w
  9089  13BC  39BF               	andlw	-65
  9090  13BD  0671               	xorwf	??_Lcd_Cmd+1,w
  9091  13BE  008F               	movwf	15	;volatile
  9092                           
  9093                           ;flex_lcd.h: 157: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0b0000
      +                          0001);
  9094  13BF  3672               	lsrf	Lcd_Cmd@data,w
  9095  13C0  3901               	andlw	1
  9096  13C1  00F0               	movwf	??_Lcd_Cmd
  9097  13C2  0EF0               	swapf	??_Lcd_Cmd,f
  9098  13C3  0DF0               	rlf	??_Lcd_Cmd,f
  9099  13C4  080F               	movf	15,w	;volatile
  9100  13C5  0670               	xorwf	??_Lcd_Cmd,w
  9101  13C6  39DF               	andlw	-33
  9102  13C7  0670               	xorwf	??_Lcd_Cmd,w
  9103  13C8  008F               	movwf	15	;volatile
  9104  13C9  0872               	movf	Lcd_Cmd@data,w
  9105  13CA  3901               	andlw	1
  9106  13CB  00F0               	movwf	??_Lcd_Cmd
  9107  13CC  0EF0               	swapf	??_Lcd_Cmd,f
  9108  13CD  080F               	movf	15,w	;volatile
  9109  13CE  0670               	xorwf	??_Lcd_Cmd,w
  9110  13CF  39EF               	andlw	-17
  9111  13D0  0670               	xorwf	??_Lcd_Cmd,w
  9112  13D1  008F               	movwf	15	;volatile
  9113                           
  9114                           ;flex_lcd.h: 158: _delay(10);
  9115  13D2  3003               	movlw	3
  9116  13D3                     u5277:	
  9117  13D3  0B89               	decfsz	9,f
  9118  13D4  2BD3               	goto	u5277
  9119  13D5  0000               	nop
  9120                           
  9121                           ;flex_lcd.h: 159: PORTDbits.RD0 = 1; _delay((unsigned long)((5)*(32000000/4000000.0))); 
      +                          PORTDbits.RD0 = 0;
  9122  13D6  0020               	movlb	0	; select bank0
  9123  13D7  140F               	bsf	15,0	;volatile
  9124  13D8  300D               	movlw	13
  9125  13D9                     u5287:	
  9126  13D9  0B89               	decfsz	9,f
  9127  13DA  2BD9               	goto	u5287
  9128  13DB  0000               	nop
  9129  13DC  0020               	movlb	0	; select bank0
  9130  13DD  100F               	bcf	15,0	;volatile
  9131                           
  9132                           ;flex_lcd.h: 160: _delay((unsigned long)((5500)*(32000000/4000000.0)));
  9133  13DE  303A               	movlw	58
  9134  13DF  00F0               	movwf	??_Lcd_Cmd
  9135  13E0  3023               	movlw	35
  9136  13E1                     u5297:	
  9137  13E1  0B89               	decfsz	9,f
  9138  13E2  2BE1               	goto	u5297
  9139  13E3  0BF0               	decfsz	??_Lcd_Cmd,f
  9140  13E4  2BE1               	goto	u5297
  9141  13E5  0000               	nop
  9142  13E6  0008               	return
  9143  13E7                     __end_of_Lcd_Cmd:	
  9144                           
  9145                           	psect	text28
  9146  1061                     __ptext28:	
  9147 ;; *************** function _InitKeypad *****************
  9148 ;; Defined at:
  9149 ;;		line 4 in file "Keypad.c"
  9150 ;; Parameters:    Size  Location     Type
  9151 ;;		None
  9152 ;; Auto vars:     Size  Location     Type
  9153 ;;		None
  9154 ;; Return value:  Size  Location     Type
  9155 ;;                  1    wreg      void 
  9156 ;; Registers used:
  9157 ;;		wreg, status,2, status,0
  9158 ;; Tracked objects:
  9159 ;;		On entry : 0/0
  9160 ;;		On exit  : 0/0
  9161 ;;		Unchanged: 0/0
  9162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9163 ;;      Params:         0       0       0       0       0       0       0       0
  9164 ;;      Locals:         0       0       0       0       0       0       0       0
  9165 ;;      Temps:          1       0       0       0       0       0       0       0
  9166 ;;      Totals:         1       0       0       0       0       0       0       0
  9167 ;;Total ram usage:        1 bytes
  9168 ;; Hardware stack levels used:    1
  9169 ;; This function calls:
  9170 ;;		Nothing
  9171 ;; This function is called by:
  9172 ;;		_main
  9173 ;; This function uses a non-reentrant model
  9174 ;;
  9175                           
  9176                           
  9177                           ;psect for function _InitKeypad
  9178  1061                     _InitKeypad:	
  9179                           
  9180                           ;Keypad.c: 6: PORTB = 0x00;
  9181                           
  9182                           ;incstack = 0
  9183                           ; Regs used in _InitKeypad: [wreg+status,2+status,0]
  9184  1061  0020               	movlb	0	; select bank0
  9185  1062  018D               	clrf	13	;volatile
  9186                           
  9187                           ;Keypad.c: 7: TRISB = 0xF0;
  9188  1063  30F0               	movlw	240
  9189  1064  0021               	movlb	1	; select bank1
  9190  1065  008D               	movwf	13	;volatile
  9191                           
  9192                           ;Keypad.c: 10: OPTION_REG &= 0x7F;
  9193  1066  307F               	movlw	127
  9194  1067  00F0               	movwf	??_InitKeypad
  9195  1068  0870               	movf	??_InitKeypad,w
  9196  1069  0595               	andwf	21,f	;volatile
  9197  106A  0008               	return
  9198  106B                     __end_of_InitKeypad:	
  9199  007E                     btemp	set	126	;btemp
  9200  007E                     wtemp0	set	126


Data Sizes:
    Strings     12
    Constant    118
    Data        12
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     75      75
    BANK1            80     23      37
    BANK2            80     68      78
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_10(CODE[3]), STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[3]), 
		 -> STR_6(CODE[3]), STR_5(CODE[3]), STR_4(CODE[3]), STR_3(CODE[3]), 
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> main@buffer(BANK2[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Out@buffer	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_11(CODE[6]), main@buffer(BANK2[20]), 


Critical Paths under _main in COMMON

    _main->___ftdiv
    _main->___wmul
    _switch_press_scan->_keypad_scanner
    _sprintf->___lldiv
    _sprintf->___lltoft
    _sprintf->___wmul
    _sprintf->__div_to_l_
    _scale->___wmul
    _fround->___wmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___ftsub->___lltoft
    ___ftadd->___wmul
    _clear->_Lcd_Cmd
    ___ftdiv->___ftpack
    ___awtoft->___wmul
    _Lcd_Out->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___awtoft->___wmul

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                75    75      0   65785
                                             68 BANK0      7     7      0
                                              0 BANK2     68    68      0
                         _InitKeypad
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                             ___wmul
                              _clear
                            _sprintf
                  _switch_press_scan
 ---------------------------------------------------------------------------------
 (1) _switch_press_scan                                    2     2      0      46
                                              2 COMMON     2     2      0
                     _keypad_scanner
 ---------------------------------------------------------------------------------
 (2) _keypad_scanner                                       2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             41    36      5   45433
                                             57 BANK0     11     6      5
                                              0 BANK1     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                9     6      3   10606
                                             24 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _fround                                              14    11      3   10408
                                             24 BANK0     14    11      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2780
                                             12 COMMON     2     2      0
                                              4 BANK0      4     0      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    4355
                                              8 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1580
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         16    10      6     431
                                              0 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     574
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    2242
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     543
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     418
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     444
                                             33 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3912
                                             51 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3717
                                             38 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             ___wmul (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     173
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     648
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (1) _clear                                                0     0      0     176
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             16    10      6    2517
                                              8 COMMON     6     0      6
                                              0 BANK0     10    10      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             6     3      3    2328
                                              8 BANK0      6     3      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2109
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out                                              6     3      3    1173
                                              3 COMMON     6     3      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              3 COMMON     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     176
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitKeypad                                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitKeypad
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Lcd_Chr_CP
     _Lcd_Cmd
   ___awtoft
     ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftadd
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftdiv
     ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftneg
   ___wmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
   _clear
     _Lcd_Cmd
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _switch_press_scan
     _keypad_scanner

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      CC       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4B      4B       6       93.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     17      25       8       46.3%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     44      4E      10       97.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      CC      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Mon Nov 16 22:29:03 2020

               __CFG_CP$OFF 0000                          l50 14FB                          l49 14D3  
                        l90 0900                          l94 0918                          l95 0913  
                        l89 0905                          l98 092B                          l99 0926  
              ___awdiv@sign 0021         ___wmul@multiplicand 0026                ___ftadd@exp1 0052  
              ___ftadd@exp2 0051                ___ftadd@sign 0050                         l110 0968  
                       l102 093E                         l111 0963                         l103 0939  
                       l130 09CB                         l122 09A5                         l114 097B  
                       l106 0955                         l131 09C6                         l123 09A0  
                       l115 0976                         l107 0950                         l142 0A08  
                       l134 09DE                         l126 09B8                         l118 098E  
                       l151 0A29                         l143 0A03                         l135 09D9  
                       l127 09B3                         l119 0989                         l215 07D6  
                       l146 0A1B                         l138 09F5                         l147 0A16  
                       l139 09F0                         l263 0CEC                         l257 0BB8  
                       l550 17F4                         l384 1082                         l570 12B0  
                       l562 1295                         l619 0868                         l629 08E1  
                       l670 1334                         l569 12A8                         l593 168C  
                       _RB0 0068                         _RB1 0069                         _RB2 006A  
                       _RB3 006B                         _RB4 006C                         _RB5 006D  
                       _RB6 006E                         _RB7 006F                __CFG_CPD$OFF 0000  
              ___awmod@sign 0076                         wreg 0009                 _sprintf$677 00A0  
              __CFG_LVP$OFF 0000                ___ftdiv@cntr 0024                ___ftdiv@sign 0029  
                      l2102 107B                        l2202 1615                        l2122 121C  
                      l2212 162B                        l2140 123B                        l3012 0FD7  
                      l3020 0B9D                        l2230 1658                        l2206 161C  
                      l2150 1256                        l2302 15BD                        l3006 0FC3  
                      l3014 0FDC                        l3022 0FFA                        l2080 1281  
                      l2072 126B                        l2232 1662                        l2224 1645  
                      l2128 1227                        l2242 167E                        l2234 1667  
                      l2154 125E                        l2146 124D                        l2138 122F  
                      l2170 118B                        l2306 15C5                        l3210 0501  
                      l2076 1272                        l2252 16B0                        l2244 1688  
                      l2236 166B                        l2180 119D                        l3300 079F  
                      l3204 04D7                        l2086 129A                        l2078 127C  
                      l3038 10BE                        l3054 1414                        l2262 16CB  
                      l2166 1184                        l3206 04E5                        l3214 050F  
                      l2088 12A2                        l3048 13FE                        l2248 169E  
                      l2600 1769                        l2192 11BA                        l2184 11A9  
                      l2272 1550                        l2504 01B0                        l3224 053B  
                      l3208 04F3                        l3216 051E                        l2178 1191  
                      l2290 15A1                        l2522 02CF                        l3242 05C0  
                      l3234 0577                        l3146 0361                        l3076 146E  
                      l3068 1455                        l2700 132B                        l2620 17DE  
                      l2532 0850                        l2188 11B2                        l2516 0270  
                      l2508 01CD                        l2460 0A2E                        l3252 05F0  
                      l3308 07B8                        l3180 045A                        l3164 03E5  
                      l3156 039D                        l2702 1337                        l2294 15A9  
                      l2278 1566                        l3262 0639                        l3182 0464  
                      l2640 1129                        l2608 17B1                        l3280 06A7  
                      l3256 062A                        l3264 064B                        l3176 0420  
                      l2706 1345                        l2730 1208                        l2626 17EB  
                      l2618 17D0                        l2554 08A3                        l2546 0889  
                      l2482 0B68                        l2474 0AF0                        l3258 0634  
                      l3186 0469                        l2820 0808                        l2636 1113  
                      l2716 11CF                        l2740 1140                        l2628 17F7  
                      l2572 08D8                        l2564 08BD                        l3292 0753  
                      l3284 06D4                        l3188 047B                        l2822 080B  
                      l2726 11FD                        l2718 11DD                        l2742 114E  
                      l2750 1171                        l2590 171E                        l2574 08E4  
                      l2566 08CB                        l2910 0CD5                        l2902 0C88  
                      l2816 0802                        l2664 109D                        l2760 10E9  
                      l2584 1701                        l3288 0711                        l2834 0823  
                      l2818 0805                        l2826 0811                        l2674 12E0  
                      l2746 1166                        l2498 0151                        l3298 0790  
                      l2828 081F                        l2692 1310                        l2924 0D58  
                      l2916 0D21                        l2694 131E                        l2758 10D9  
                      l2942 0DEE                        l2862 0BBA                        l2870 0BCC  
                      l2928 0D6C                        l2872 0BE5                        l2848 1077  
                      l2970 0E9B                        l2954 0E2B                        l2938 0DA0  
                      l2866 0BC9                        l2948 0DF4                        l2990 0EF3  
                      l2982 0ECC                        l2886 0C2C                        l2976 0EAF  
                      l2968 0E47                        STR_1 187C                        STR_2 187C  
                      STR_3 187C                        STR_4 187C                        STR_5 187C  
                      STR_6 187C                        STR_7 187F                        STR_8 187F  
                      STR_9 187F                        u3105 15B0                        u3205 13A1  
                      u3215 13B1                        u4015 1311                        u3135 15C6  
                      u3225 0012                        u2505 1290                        u4105 11DE  
                      u3145 15CC                        u3065 1572                        u3235 0022  
                      u4115 11F2                        u3075 1582                        u3165 1355  
                      u3245 0033                        u2525 129D                        u4045 132C  
                      u4125 11FE                        u4205 10DE                        u2605 1088  
                      u3175 1365                        u3255 0043                        u3095 15AA  
                      u5007 0982                        u3185 1376                        u3265 005E  
                      u4305 0C41                        u5017 0999                        u3195 1386  
                      u3275 006E                        u5107 0056                        u4155 1143  
                      u5027 09AC                        u5117 0090                        u2565 12B7  
                      u2485 1277                        u4085 11D2                        u5037 09BF  
                      u5207 14C8                        u5127 0096                        u4175 115C  
                      u2655 1232                        u4415 0E1F                        u5047 09D2  
                      u5217 14E1                        u5137 009C                        u2905 1646  
                      u4185 1167                        u3705 089A                        u4345 0CF8  
                      u5057 09E9                        u5227 14EE                        u5147 00A2  
                      u3715 08A4                        u2675 123C                        u2755 1194  
                      u2595 1083                        u4355 0D2D                        u5067 09FC  
                      u4620 030F                        u5237 1509                        u5157 14A0  
                      u2685 1246                        u5077 0A0F                        u4630 031D  
                      u5247 1516                        u5167 14A8                        u2935 1659  
                      u2695 124E                        u2775 11A3                        u4455 0EBA  
                      u5087 0A22                        u4640 032B                        u5257 1393  
                      u5177 14B0                        u5097 0050                        u3905 17EC  
                      u3825 176A                        u2785 11AA                        u4465 0EC8  
                      u4385 0D56                        u4705 0413                        u5267 1399  
                      u5187 14B8                        u4555 1426                        u3835 1794  
                      u3755 08BE                        u4715 0444                        u5277 13D3  
                      u5197 14C0                        u4565 1436                        u2965 166C  
                      u5287 13D9                        u4575 1456                        u3695 088A  
                      u4815 05CE                        u4735 0479                        u4655 035F  
                      u5297 13E1                        u4585 1465                        u3785 08D9  
                      u4825 05E3                        u4595 146F                        u2995 167F  
                      u3875 17D1                        u4835 0614                        u4755 048D  
                      u4675 03B1                        u4917 07AE                        u4927 07D0  
                      u4855 0649                        u4775 0539                        u4695 03FE  
                      u3985 12E7                        u4937 08F9                        u4947 090C  
                      u4875 065D                        u4795 058B                        u4957 091F  
                      u4967 0932                        u4977 0949                        u4987 095C  
                      u4997 096F                        _main 02EC                ___ftpack@arg 0070  
              ___ftpack@exp 0073                        fsr0h 0005                        fsr1h 0007  
                      indf0 0000                        fsr0l 0004                        indf1 0001  
                      fsr1l 0006                        btemp 007E                        start 0002  
           __end_of_Lcd_Cmd 13E7             __end_of_Lcd_Out 0837                ___ftmul@cntr 0036  
              ___ftmul@sign 0037                  _Lcd_Chr_CP 000B                ___fttol@exp1 004E  
              ___fttol@lval 004A                       ?_main 0070             __end_of___awdiv 1263  
           __end_of___ftadd 16E3                       STR_10 187F                       STR_11 1827  
             __CFG_WDTE$OFF 0000             __end_of___awmod 11BF             __end_of___ftdiv 148F  
           __end_of___ftneg 1061             __end_of___lldiv 1211             __end_of___ftmul 15ED  
           ___awdiv@divisor 0077             __end_of___llmod 117A             __end_of___ftsub 10B3  
           __end_of___fttol 134E             ___awdiv@counter 0020                       _PORTB 000D  
                     _PORTC 000E                       _TRISB 008D                       _TRISC 008E  
              ___lltoft@exp 007D            ??_keypad_scanner 0070               ___awtoft@sign 002D  
                     _clear 1049             __end_of_dpowers 1855                       _scale 00A8  
             ___ftpack@sign 0074                       main@i 0162                       main@j 015C  
            __CFG_BOREN$OFF 0000                       status 0003                       wtemp0 007E  
           __end_of_sprintf 1000            __end_of_Lcd_Init 1539                  _InitKeypad 1061  
           __initialization 07D8                __end_of_main 07D8                      ??_main 0064  
             ___fttol@sign1 0049        __size_of__tdiv_to_l_ 00B6                      ?_clear 0070  
          ___llmod@dividend 0074                      ?_scale 0038            ___awdiv@dividend 0079  
          __end_of___awtoft 10D5                      _ANSELB 018D                      _ANSELD 018F  
          __end_of___ftpack 12C7            __end_of___lltoft 10FD                   ??_Lcd_Cmd 0070  
                 ??_Lcd_Out 0076              __CFG_PWRTE$OFF 0000            __end_of__powers_ 187C  
                    ___ftge 10FD                 ?_Lcd_Chr_CP 0070                      ___wmul 1079  
                 ??___awdiv 007B                   ??___ftadd 004C                   ??___awmod 0074  
                 ??___ftdiv 0020                   ??___ftneg 0073                   ??___lldiv 0078  
                 ??___ftmul 002E                   ??___llmod 0078                   ??___ftsub 007E  
                 ??___fttol 0045                      _fround 0A30            ___awdiv@quotient 0022  
           ___awmod@divisor 0070               main@operation 0153             ___awmod@counter 0075  
                    main@op 0144       ___ftmul@f3_as_product 0033                   ??_sprintf 005E  
   __end_of__initialization 07FD                  ___ftadd@f1 0046                  ___ftadd@f2 0049  
                ___ftge@ff1 0070                  ___ftge@ff2 0073                  ___ftdiv@f1 007B  
                ___ftdiv@f2 0078                  ___ftdiv@f3 0025                  ___ftneg@f1 0070  
                ___awtoft@c 0028                 ?_InitKeypad 0070                  ___ftmul@f1 0028  
                ___ftmul@f2 002B                  ___ftsub@f1 0056                  ___ftsub@f2 0053  
                ___fttol@f1 0041              __pcstackCOMMON 0070                __pidataBANK1 0005  
              __pidataBANK2 1053               __end_of_clear 104D                  ___lltoft@c 0078  
             __end_of_scale 02EC                  __div_to_l_ 16E3                   ?_Lcd_Init 0070  
                   ??_clear 0073             __div_to_l_@exp1 0025             __div_to_l_@cntr 0024  
                   ??_scale 003B             __div_to_l_@quot 0020         __size_of_Lcd_Chr_CP 009D  
                __pbssBANK1 00B7                  __pbssBANK2 016A               __div_to_l_@f1 0070  
             __div_to_l_@f2 0073                  __pmaintext 02EC                     ?___ftge 0070  
                   ?___wmul 0024                     ?_fround 0038                   ?___awtoft 0028  
                 ?___ftpack 0070                   ?___lltoft 0078                  ??_Lcd_Init 0073  
       __size_of_InitKeypad 000A                     _Lcd_Cmd 134E                     _Lcd_Out 0800  
         __end_of__npowers_ 1827             __size_of___ftge 003B                     ___awdiv 1211  
                   ___ftadd 15ED                     ___awmod 117A                     ___ftdiv 13E7  
                   ___ftneg 1059                     ___lldiv 11BF             __size_of___wmul 001C  
                   ___ftmul 1539                     ___llmod 1138                     ___ftsub 1095  
                   ___fttol 12C7                  _fround$674 0042                  _fround$675 003F  
                ??___awtoft 002B                  ??___ftpack 0075             __size_of_fround 0165  
                ??___lltoft 007C                     __ptext1 106B                     __ptext2 08ED  
                   __ptext3 0B95                     __ptext4 00A8                     __ptext5 0A30  
                   __ptext6 1079                     __ptext7 1539                     __ptext8 117A  
                   __ptext9 1211                 ?__div_to_l_ 0070                     _dpowers 182D  
          ___awmod@dividend 0072                     main@clc 0151                     _sprintf 0B95  
                   main@udc 0134                     main@num 0140        end_of_initialization 07FD  
                   init_ram 104D                     initloop 104E             ___lldiv@divisor 0070  
           ___lldiv@counter 007D                ??_Lcd_Chr_CP 0070              __tdiv_to_l_@f1 0070  
            __tdiv_to_l_@f2 0073               ??__tdiv_to_l_ 0076                   _PORTDbits 000F  
          __CFG_FOSC$INTOSC 0000                   _TRISDbits 008F        switch_press_scan@key 0073  
        __end_of_Lcd_Chr_CP 00A8                 ___ftdiv@exp 0028                  main@buffer 0120  
   __size_of_keypad_scanner 0143                  main@number 0145         __size_of__div_to_l_ 011D  
              ??_InitKeypad 0070                 ___ftmul@exp 0032              __end_of___ftge 1138  
            __end_of___wmul 1095              __end_of_fround 0B95         start_initialization 07D8  
       __end_of__tdiv_to_l_ 08ED          __end_of_InitKeypad 106B               Lcd_Out@buffer 0074  
         __size_of_Lcd_Init 00AA             ___llmod@divisor 0070             ___llmod@counter 0079  
                  ??___ftge 0076                    ??___wmul 007C                 __pdataBANK1 00BF  
               __pdataBANK2 0164                    ??_fround 003B               sprintf@tmpval 00AE  
                fround@prec 0045           __size_of___awtoft 0022           __size_of___ftpack 0064  
         __size_of___lltoft 0028                   ___latbits 0002               __pcstackBANK0 0020  
             __pcstackBANK1 00A0               __pcstackBANK2 0120                    ?_Lcd_Cmd 0070  
               sprintf@flag 00A4                    ?_Lcd_Out 0073                 sprintf@fval 00B2  
               sprintf@prec 00A6                    ?___awdiv 0077                    ?___ftadd 0046  
                  ?___awmod 0070                    ?___ftdiv 0078                    ?___ftneg 0070  
                  ?___lldiv 0070                    ?___ftmul 0028                    ?___llmod 0070  
                  ?___ftsub 0053                   __npowers_ 1800                    ?___fttol 0041  
               __tdiv_to_l_ 0837                ??__div_to_l_ 0076                   _scale$676 003D  
            __size_of_clear 0004                    ?_sprintf 0059              __size_of_scale 0244  
            ___wmul@product 007C              _keypad_scanner 08ED          __end_of__div_to_l_ 1800  
                  Lcd_Out@x 0073                    Lcd_Out@y 0077                   main@F3635 0164  
                 main@F3645 016A                   main@F3637 00BF                   main@F3639 00B7  
         _switch_press_scan 106B                Lcd_Init@data 0074                   main@i_203 0160  
                 main@i_206 014F                   main@j_205 015E                   main@i_198 014D  
         ___wmul@multiplier 0024          ?_switch_press_scan 0070                    _Lcd_Init 148F  
       ??_switch_press_scan 0072      __end_of_keypad_scanner 0A30            __size_of_Lcd_Cmd 0099  
          __size_of_Lcd_Out 0037   __end_of_switch_press_scan 1079            __size_of___awdiv 0052  
          __size_of___ftadd 00F6            __size_of___awmod 0045            __size_of___ftdiv 00A8  
          __size_of___ftneg 0008            __size_of___lldiv 0052            __size_of___ftmul 00B4  
          __size_of___llmod 0042            __size_of___ftsub 001E            __size_of___fttol 0087  
                  ___awtoft 10B3                    ___ftpack 1263                    ___lltoft 10D5  
                sprintf@exp 00AC                  sprintf@val 00A8              Lcd_Chr_CP@data 0072  
                  __ptext10 0837                    __ptext11 16E3                    __ptext20 1049  
                  __ptext12 10D5                    __ptext21 13E7                    __ptext13 1138  
                  __ptext22 10B3                    __ptext14 11BF                    __ptext23 1263  
                  __ptext15 12C7                    __ptext24 0800                    __ptext16 1095  
                  __ptext25 000B                    __ptext17 15ED                    __ptext26 148F  
                  __ptext18 1059                    __ptext27 134E                    __ptext19 10FD  
                  __ptext28 1061                    __powers_ 1855            __size_of_sprintf 046B  
           ?_keypad_scanner 0070                 Lcd_Cmd@data 0072               __size_of_main 04EC  
                  main@udc1 013A                    main@num1 0156                    main@num2 0159  
               Lcd_Out@data 0078                    scale@scl 0040                   sprintf@ap 00A3  
          __tdiv_to_l_@exp1 0025            __tdiv_to_l_@cntr 0024                   sprintf@sp 00B6  
          __tdiv_to_l_@quot 0020            ___lldiv@dividend 0074                  _OSCCONbits 0099  
__size_of_switch_press_scan 000E                ?__tdiv_to_l_ 0070               __pstringtext1 182D  
             __pstringtext2 1855               __pstringtext3 1800               __pstringtext4 187C  
             __pstringtext5 187F               __pstringtext6 0000                  _OPTION_REG 0095  
                  sprintf@c 00B5                    sprintf@f 0059            ___lldiv@quotient 0079  
